
Ov7670_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008304  08008304  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08008304  08008304  00018304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800830c  0800830c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08008314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000104  08008418  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001a4  080084b8  000201a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00038c1c  20000244  08008558  00020244  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20038e60  08008558  00028e60  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e5b3  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003eff  00000000  00000000  0003e825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e0  00000000  00000000  00042728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001518  00000000  00000000  00043e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b96c  00000000  00000000  00045320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f2ae  00000000  00000000  00070c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001071ae  00000000  00000000  0008ff3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001970e8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f54  00000000  00000000  00197138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000244 	.word	0x20000244
 8000214:	00000000 	.word	0x00000000
 8000218:	080081d4 	.word	0x080081d4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000248 	.word	0x20000248
 8000234:	080081d4 	.word	0x080081d4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_DCMI_Init+0x60>)
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_DCMI_Init+0x64>)
 8000544:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_DCMI_Init+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_DCMI_Init+0x60>)
 800054e:	2220      	movs	r2, #32
 8000550:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_DCMI_Init+0x60>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_DCMI_Init+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_DCMI_Init+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_DCMI_Init+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_DCMI_Init+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_DCMI_Init+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_DCMI_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_DCMI_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_DCMI_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_DCMI_Init+0x60>)
 800058a:	f001 fa07 	bl	800199c <HAL_DCMI_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fc60 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000260 	.word	0x20000260
 80005a0:	50050000 	.word	0x50050000

080005a4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08e      	sub	sp, #56	; 0x38
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a6d      	ldr	r2, [pc, #436]	; (8000778 <HAL_DCMI_MspInit+0x1d4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	f040 80d3 	bne.w	800076e <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80005c8:	4b6c      	ldr	r3, [pc, #432]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005cc:	4a6b      	ldr	r2, [pc, #428]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6353      	str	r3, [r2, #52]	; 0x34
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
 80005de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a65      	ldr	r2, [pc, #404]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
 80005ec:	4b63      	ldr	r3, [pc, #396]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a5f      	ldr	r2, [pc, #380]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
 8000604:	4b5d      	ldr	r3, [pc, #372]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a59      	ldr	r2, [pc, #356]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
 800061c:	4b57      	ldr	r3, [pc, #348]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a53      	ldr	r2, [pc, #332]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a4d      	ldr	r2, [pc, #308]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000658:	2370      	movs	r3, #112	; 0x70
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000668:	230d      	movs	r3, #13
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4843      	ldr	r0, [pc, #268]	; (8000780 <HAL_DCMI_MspInit+0x1dc>)
 8000674:	f003 fd04 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000678:	2350      	movs	r3, #80	; 0x50
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000688:	230d      	movs	r3, #13
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	483c      	ldr	r0, [pc, #240]	; (8000784 <HAL_DCMI_MspInit+0x1e0>)
 8000694:	f003 fcf4 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000698:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006aa:	230d      	movs	r3, #13
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <HAL_DCMI_MspInit+0x1e4>)
 80006b6:	f003 fce3 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ba:	2308      	movs	r3, #8
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ca:	230d      	movs	r3, #13
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	4619      	mov	r1, r3
 80006d4:	482d      	ldr	r0, [pc, #180]	; (800078c <HAL_DCMI_MspInit+0x1e8>)
 80006d6:	f003 fcd3 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ec:	230d      	movs	r3, #13
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	4826      	ldr	r0, [pc, #152]	; (8000790 <HAL_DCMI_MspInit+0x1ec>)
 80006f8:	f003 fcc2 	bl	8004080 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <HAL_DCMI_MspInit+0x1f4>)
 8000700:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000708:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000724:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000736:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800073a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000744:	f001 fbf6 	bl	8001f34 <HAL_DMA_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_DCMI_MspInit+0x1ae>
    {
      Error_Handler();
 800074e:	f000 fb83 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000756:	649a      	str	r2, [r3, #72]	; 0x48
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	204e      	movs	r0, #78	; 0x4e
 8000764:	f001 f8e3 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000768:	204e      	movs	r0, #78	; 0x4e
 800076a:	f001 f8fc 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3738      	adds	r7, #56	; 0x38
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	50050000 	.word	0x50050000
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020000 	.word	0x40020000
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40021800 	.word	0x40021800
 8000794:	200002b0 	.word	0x200002b0
 8000798:	40026428 	.word	0x40026428

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x38>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2039      	movs	r0, #57	; 0x39
 80007c0:	f001 f8b5 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007c4:	2039      	movs	r0, #57	; 0x39
 80007c6:	f001 f8ce 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <MX_ETH_Init+0x88>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ETH_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ETH_Init+0x8c>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ETH_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ETH_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ETH_Init+0x84>)
 8000808:	4a16      	ldr	r2, [pc, #88]	; (8000864 <MX_ETH_Init+0x8c>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ETH_Init+0x84>)
 800080e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000812:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ETH_Init+0x84>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_ETH_Init+0x90>)
 8000818:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_ETH_Init+0x84>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x94>)
 800081e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ETH_Init+0x84>)
 8000822:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000826:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x84>)
 800082a:	f003 f903 	bl	8003a34 <HAL_ETH_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 fb10 	bl	8000e58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000838:	2238      	movs	r2, #56	; 0x38
 800083a:	2100      	movs	r1, #0
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x98>)
 800083e:	f007 fcc1 	bl	80081c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ETH_Init+0x98>)
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_ETH_Init+0x98>)
 800084a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800084e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_ETH_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000348 	.word	0x20000348
 8000860:	40028000 	.word	0x40028000
 8000864:	200003f8 	.word	0x200003f8
 8000868:	200001a4 	.word	0x200001a4
 800086c:	20000104 	.word	0x20000104
 8000870:	20000310 	.word	0x20000310

08000874 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a4e      	ldr	r2, [pc, #312]	; (80009cc <HAL_ETH_MspInit+0x158>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f040 8096 	bne.w	80009c4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000898:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a40      	ldr	r2, [pc, #256]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800092e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000940:	2332      	movs	r3, #50	; 0x32
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000950:	230b      	movs	r3, #11
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <HAL_ETH_MspInit+0x160>)
 800095c:	f003 fb90 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000960:	2386      	movs	r3, #134	; 0x86
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4817      	ldr	r0, [pc, #92]	; (80009d8 <HAL_ETH_MspInit+0x164>)
 800097c:	f003 fb80 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000992:	230b      	movs	r3, #11
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <HAL_ETH_MspInit+0x168>)
 800099e:	f003 fb6f 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_ETH_MspInit+0x16c>)
 80009c0:	f003 fb5e 	bl	8004080 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40028000 	.word	0x40028000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800

080009e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x180>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a59      	ldr	r2, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b54      	ldr	r3, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a53      	ldr	r2, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a4d      	ldr	r2, [pc, #308]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a41      	ldr	r2, [pc, #260]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a35      	ldr	r2, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CAMERA_RESET_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f644 0181 	movw	r1, #18561	; 0x4881
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000ac2:	f003 fc89 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4828      	ldr	r0, [pc, #160]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000acc:	f003 fc84 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <MX_GPIO_Init+0x18c>)
 8000ae8:	f003 faca 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000b06:	f003 fabb 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000b24:	f003 faac 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000b40:	f003 fa9e 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000b58:	f003 fa92 	bl	8004080 <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C2_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C2_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bb0:	f003 fc2c 	bl	800440c <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 f94d 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bc2:	f004 fa71 	bl	80050a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 f944 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bd4:	f004 fab3 	bl	800513e <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 f93b 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000400 	.word	0x20000400
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	20404768 	.word	0x20404768

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	; 0xb8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2290      	movs	r2, #144	; 0x90
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 fad5 	bl	80081c4 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_I2C_MspInit+0xb0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d13b      	bne.n	8000c9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f005 f94c 	bl	8005ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f000 f90b 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_I2C_MspInit+0xb8>)
 8000c80:	f003 f9fe 	bl	8004080 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	37b8      	adds	r7, #184	; 0xb8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40021400 	.word	0x40021400

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fcde 	bl	8001676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f85d 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f7ff fe91 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc2:	f7ff fd6b 	bl	800079c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cc6:	f000 f9e5 	bl	8001094 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cca:	f000 fa73 	bl	80011b4 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000cce:	f7ff fc35 	bl	800053c <MX_DCMI_Init>
  MX_I2C2_Init();
 8000cd2:	f7ff ff4f 	bl	8000b74 <MX_I2C2_Init>
  MX_ETH_Init();
 8000cd6:	f7ff fd7f 	bl	80007d8 <MX_ETH_Init>
  MX_TIM10_Init();
 8000cda:	f000 f937 	bl	8000f4c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start(&htim10, TIM_CHANNEL_1);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	481d      	ldr	r0, [pc, #116]	; (8000d58 <main+0xa8>)
 8000ce2:	f005 fdd5 	bl	8006890 <HAL_TIM_OC_Start>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <main+0xac>)
 8000ce8:	491d      	ldr	r1, [pc, #116]	; (8000d60 <main+0xb0>)
 8000cea:	481e      	ldr	r0, [pc, #120]	; (8000d64 <main+0xb4>)
 8000cec:	f000 fb0a 	bl	8001304 <ov7670_init>
  ov7670_config(0u);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fb4f 	bl	8001394 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS, (uint32_t)imagebuf);
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <main+0xb8>)
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 fba4 	bl	8001448 <ov7670_startCap>
  HAL_Delay(2000);
 8000d00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d04:	f000 fd14 	bl	8001730 <HAL_Delay>
  ov7670_stopCap();
 8000d08:	f000 fbcc 	bl	80014a4 <ov7670_stopCap>
  uint8_t send = 255;
 8000d0c:	23ff      	movs	r3, #255	; 0xff
 8000d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  for (i = 1; i<= (OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT *2); i+=2){
 8000d10:	2301      	movs	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	e00a      	b.n	8000d2c <main+0x7c>
	  tempbuf[i/2]=imagebuf[i];
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	4913      	ldr	r1, [pc, #76]	; (8000d68 <main+0xb8>)
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	440a      	add	r2, r1
 8000d20:	7811      	ldrb	r1, [r2, #0]
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <main+0xbc>)
 8000d24:	54d1      	strb	r1, [r2, r3]
  for (i = 1; i<= (OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT *2); i+=2){
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3302      	adds	r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000d32:	d9f0      	bls.n	8000d16 <main+0x66>
  }
//  for(i=0; i < 2* OV7670_QVGA_WIDTH; i++)
//  {
 // HAL_UART_Transmit(&huart3, &send, 1, 1000);
 // }
  HAL_UART_Transmit(&huart3, tempbuf, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2, 1000);
 8000d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d38:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d3c:	490b      	ldr	r1, [pc, #44]	; (8000d6c <main+0xbc>)
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <main+0xc0>)
 8000d40:	f006 fa8b 	bl	800725a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, &tempbuf[OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2], OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2, 1000);
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d4c:	4909      	ldr	r1, [pc, #36]	; (8000d74 <main+0xc4>)
 8000d4e:	4808      	ldr	r0, [pc, #32]	; (8000d70 <main+0xc0>)
 8000d50:	f006 fa83 	bl	800725a <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart3, "hola", sizeof("hola"), 1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <main+0xa4>
 8000d56:	bf00      	nop
 8000d58:	20038854 	.word	0x20038854
 8000d5c:	20000400 	.word	0x20000400
 8000d60:	200002b0 	.word	0x200002b0
 8000d64:	20000260 	.word	0x20000260
 8000d68:	20000454 	.word	0x20000454
 8000d6c:	20025c54 	.word	0x20025c54
 8000d70:	200388a0 	.word	0x200388a0
 8000d74:	2002f254 	.word	0x2002f254

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2234      	movs	r2, #52	; 0x34
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f007 fa1c 	bl	80081c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d9c:	f004 fb64 	bl	8005468 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <SystemClock_Config+0xd8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <SystemClock_Config+0xd8>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SystemClock_Config+0xd8>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <SystemClock_Config+0xdc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <SystemClock_Config+0xdc>)
 8000dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <SystemClock_Config+0xdc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de4:	2304      	movs	r3, #4
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000de8:	23d8      	movs	r3, #216	; 0xd8
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000df0:	2309      	movs	r3, #9
 8000df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fb93 	bl	8005528 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e08:	f000 f826 	bl	8000e58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e0c:	f004 fb3c 	bl	8005488 <HAL_PWREx_EnableOverDrive>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e16:	f000 f81f 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	2107      	movs	r1, #7
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fe23 	bl	8005a84 <HAL_RCC_ClockConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e44:	f000 f808 	bl	8000e58 <Error_Handler>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	3750      	adds	r7, #80	; 0x50
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 fbfa 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <DMA2_Stream1_IRQHandler+0x10>)
 8000f06:	f001 f9b5 	bl	8002274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200002b0 	.word	0x200002b0

08000f14 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <DCMI_IRQHandler+0x10>)
 8000f1a:	f000 fec5 	bl	8001ca8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000260 	.word	0x20000260

08000f28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <MX_TIM10_Init+0x94>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5-1;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f8a:	f005 fbc9 	bl	8006720 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8000f94:	f7ff ff60 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8000f98:	4810      	ldr	r0, [pc, #64]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000f9a:	f005 fc18 	bl	80067ce <HAL_TIM_OC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f7ff ff58 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fa8:	2330      	movs	r3, #48	; 0x30
 8000faa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000fc0:	f005 fd60 	bl	8006a84 <HAL_TIM_OC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8000fca:	f7ff ff45 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <MX_TIM10_Init+0x90>)
 8000fd0:	f000 f828 	bl	8001024 <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20038854 	.word	0x20038854
 8000fe0:	40014400 	.word	0x40014400

08000fe4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x38>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10b      	bne.n	800100e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40014400 	.word	0x40014400
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_TIM_MspPostInit+0x64>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d11c      	bne.n	8001080 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_MspPostInit+0x68>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_TIM_MspPostInit+0x68>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_MspPostInit+0x68>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001070:	2303      	movs	r3, #3
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_TIM_MspPostInit+0x6c>)
 800107c:	f003 f800 	bl	8004080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40014400 	.word	0x40014400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020400 	.word	0x40020400

08001094 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART3_UART_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <MX_USART3_UART_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010a0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ca:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_USART3_UART_Init+0x58>)
 80010da:	f006 f870 	bl	80071be <HAL_UART_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80010e4:	f7ff feb8 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200388a0 	.word	0x200388a0
 80010f0:	40004800 	.word	0x40004800

080010f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ae      	sub	sp, #184	; 0xb8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2290      	movs	r2, #144	; 0x90
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f007 f855 	bl	80081c4 <memset>
  if(uartHandle->Instance==USART3)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_UART_MspInit+0xb4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d13c      	bne.n	800119e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001128:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800112a:	2300      	movs	r3, #0
 800112c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fecc 	bl	8005ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800113e:	f7ff fe8b 	bl	8000e58 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_UART_MspInit+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0xb8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800118c:	2307      	movs	r3, #7
 800118e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_UART_MspInit+0xbc>)
 800119a:	f002 ff71 	bl	8004080 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800119e:	bf00      	nop
 80011a0:	37b8      	adds	r7, #184	; 0xb8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004800 	.word	0x40004800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c2:	2206      	movs	r2, #6
 80011c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011da:	2201      	movs	r2, #1
 80011dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f8:	f003 ffed 	bl	80051d6 <HAL_PCD_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001202:	f7ff fe29 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20038928 	.word	0x20038928

08001210 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0ae      	sub	sp, #184	; 0xb8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2290      	movs	r2, #144	; 0x90
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f006 ffc7 	bl	80081c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123e:	d159      	bne.n	80012f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001244:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4618      	mov	r0, r3
 8001252:	f004 fe3d 	bl	8005ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800125c:	f7ff fdfc 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_PCD_MspInit+0xec>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_PCD_MspInit+0xec>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_PCD_MspInit+0xec>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001278:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800127c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001292:	230a      	movs	r3, #10
 8001294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800129c:	4619      	mov	r1, r3
 800129e:	4818      	ldr	r0, [pc, #96]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 80012a0:	f002 feee 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012bc:	4619      	mov	r1, r3
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 80012c0:	f002 fede 	bl	8004080 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_PCD_MspInit+0xec>)
 80012c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_PCD_MspInit+0xec>)
 80012ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ce:	6353      	str	r3, [r2, #52]	; 0x34
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_PCD_MspInit+0xec>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_PCD_MspInit+0xec>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_PCD_MspInit+0xec>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6453      	str	r3, [r2, #68]	; 0x44
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_PCD_MspInit+0xec>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	37b8      	adds	r7, #184	; 0xb8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <ov7670_init+0x7c>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <ov7670_init+0x80>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <ov7670_init+0x84>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <ov7670_init+0x88>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <ov7670_init+0x8c>)
 8001330:	f003 f852 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f000 f9fb 	bl	8001730 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <ov7670_init+0x8c>)
 8001342:	f003 f849 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f000 f9f2 	bl	8001730 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	2012      	movs	r0, #18
 8001350:	f000 f922 	bl	8001598 <ov7670_write>
  HAL_Delay(30);
 8001354:	201e      	movs	r0, #30
 8001356:	f000 f9eb 	bl	8001730 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	200b      	movs	r0, #11
 8001362:	f000 f939 	bl	80015d8 <ov7670_read>
  ov7670_read(0x01, &buffer[1]);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	3301      	adds	r3, #1
 800136c:	4619      	mov	r1, r3
 800136e:	2001      	movs	r0, #1
 8001370:	f000 f932 	bl	80015d8 <ov7670_read>
 // printf("[OV7670] dev id = %02X\n", buffer[0]);


  return RET_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20038e3c 	.word	0x20038e3c
 8001384:	20038e40 	.word	0x20038e40
 8001388:	20038e44 	.word	0x20038e44
 800138c:	20038e48 	.word	0x20038e48
 8001390:	40020400 	.word	0x40020400

08001394 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint8_t ret_value;
  ov7670_stopCap();
 800139c:	f000 f882 	bl	80014a4 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	2012      	movs	r0, #18
 80013a4:	f000 f8f8 	bl	8001598 <ov7670_write>
  HAL_Delay(30);
 80013a8:	201e      	movs	r0, #30
 80013aa:	f000 f9c1 	bl	8001730 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e012      	b.n	80013da <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 80013b4:	4a22      	ldr	r2, [pc, #136]	; (8001440 <ov7670_config+0xac>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013bc:	4920      	ldr	r1, [pc, #128]	; (8001440 <ov7670_config+0xac>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	440b      	add	r3, r1
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f000 f8e5 	bl	8001598 <ov7670_write>
    HAL_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 f9ae 	bl	8001730 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <ov7670_config+0xac>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d1e6      	bne.n	80013b4 <ov7670_config+0x20>
  }
  for(int i = 0; OV7670_reg_read[i][0] != REG_BATT; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	e01d      	b.n	8001428 <ov7670_config+0x94>
	ret_value = ov7670_read(OV7670_reg_read[i][0], &OV7670_reg_read[i][1]);
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <ov7670_config+0xb0>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	3301      	adds	r3, #1
 80013fa:	4912      	ldr	r1, [pc, #72]	; (8001444 <ov7670_config+0xb0>)
 80013fc:	440b      	add	r3, r1
 80013fe:	4619      	mov	r1, r3
 8001400:	4610      	mov	r0, r2
 8001402:	f000 f8e9 	bl	80015d8 <ov7670_read>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
    if (ret_value != HAL_OK){
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <ov7670_config+0x88>
    	OV7670_reg_read[i][1]=0xFF;
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <ov7670_config+0xb0>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	22ff      	movs	r2, #255	; 0xff
 800141a:	705a      	strb	r2, [r3, #1]
    }
    HAL_Delay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f000 f987 	bl	8001730 <HAL_Delay>
  for(int i = 0; OV7670_reg_read[i][0] != REG_BATT; i++) {
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3301      	adds	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <ov7670_config+0xb0>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001430:	2bff      	cmp	r3, #255	; 0xff
 8001432:	d1db      	bne.n	80013ec <ov7670_config+0x58>
  }
  return RET_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	08008204 	.word	0x08008204
 8001444:	20000004 	.word	0x20000004

08001448 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8001452:	f000 f827 	bl	80014a4 <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10b      	bne.n	8001474 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <ov7670_startCap+0x54>)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <ov7670_startCap+0x58>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	2100      	movs	r1, #0
 800146e:	f000 fb0f 	bl	8001a90 <HAL_DCMI_Start_DMA>
 8001472:	e00d      	b.n	8001490 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10a      	bne.n	8001490 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <ov7670_startCap+0x54>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <ov7670_startCap+0x58>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	2102      	movs	r1, #2
 800148c:	f000 fb00 	bl	8001a90 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20038e48 	.word	0x20038e48
 80014a0:	20038e3c 	.word	0x20038e3c

080014a4 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <ov7670_stopCap+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fb9d 	bl	8001bec <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20038e3c 	.word	0x20038e3c

080014bc <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	f_events++;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_DCMI_FrameEventCallback+0x60>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_DCMI_FrameEventCallback+0x60>)
 80014cc:	6013      	str	r3, [r2, #0]
    if (f_events == 1){
//		HAL_DCMI_Stop(sp_hdcmi);
	}
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_DCMI_FrameEventCallback+0x64>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_DCMI_FrameEventCallback+0x26>
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_DCMI_FrameEventCallback+0x64>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_DCMI_FrameEventCallback+0x68>)
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	4610      	mov	r0, r2
 80014e0:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_DCMI_FrameEventCallback+0x6c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_DCMI_FrameEventCallback+0x46>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT /2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3328      	adds	r3, #40	; 0x28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_DCMI_FrameEventCallback+0x6c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014fe:	f000 fdc7 	bl	8002090 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_DCMI_FrameEventCallback+0x68>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_DCMI_FrameEventCallback+0x68>)
 800150a:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_DCMI_FrameEventCallback+0x70>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20038e38 	.word	0x20038e38
 8001520:	20038e50 	.word	0x20038e50
 8001524:	20038e58 	.word	0x20038e58
 8001528:	20038e48 	.word	0x20038e48
 800152c:	20038e54 	.word	0x20038e54

08001530 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	v_events++;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_DCMI_VsyncEventCallback+0x20>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_DCMI_VsyncEventCallback+0x20>)
 8001540:	6013      	str	r3, [r2, #0]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20038e34 	.word	0x20038e34

08001554 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	h_events++;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_DCMI_LineEventCallback+0x38>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_DCMI_LineEventCallback+0x38>)
 8001564:	6013      	str	r3, [r2, #0]

////  printf("HSYNC %d\n", HAL_GetTick());
  if(s_cbHsync)s_cbHsync(s_currentH);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_DCMI_LineEventCallback+0x3c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_DCMI_LineEventCallback+0x26>
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_DCMI_LineEventCallback+0x3c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_DCMI_LineEventCallback+0x40>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4610      	mov	r0, r2
 8001578:	4798      	blx	r3
  s_currentH++;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_DCMI_LineEventCallback+0x40>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_DCMI_LineEventCallback+0x40>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20038e30 	.word	0x20038e30
 8001590:	20038e4c 	.word	0x20038e4c
 8001594:	20038e54 	.word	0x20038e54

08001598 <ov7670_write>:

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <ov7670_write+0x3c>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	1dbb      	adds	r3, r7, #6
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	2142      	movs	r1, #66	; 0x42
 80015c0:	f003 f99e 	bl	8004900 <HAL_I2C_Mem_Write>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20038e44 	.word	0x20038e44

080015d8 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <ov7670_read+0x48>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	1dfa      	adds	r2, r7, #7
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	2142      	movs	r1, #66	; 0x42
 80015f2:	f002 ff9b 	bl	800452c <HAL_I2C_Master_Transmit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <ov7670_read+0x48>)
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	2364      	movs	r3, #100	; 0x64
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	2142      	movs	r1, #66	; 0x42
 8001608:	f003 f884 	bl	8004714 <HAL_I2C_Master_Receive>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	4313      	orrs	r3, r2
 8001614:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20038e44 	.word	0x20038e44

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001640:	4c0b      	ldr	r4, [pc, #44]	; (8001670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800164e:	f7ff fc6b 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001652:	f006 fd93 	bl	800817c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001656:	f7ff fb2b 	bl	8000cb0 <main>
  bx  lr    
 800165a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001668:	08008314 	.word	0x08008314
  ldr r2, =_sbss
 800166c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001670:	20038e60 	.word	0x20038e60

08001674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC_IRQHandler>

08001676 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167a:	2003      	movs	r0, #3
 800167c:	f000 f94c 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001680:	2000      	movs	r0, #0
 8001682:	f000 f805 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001686:	f7ff fbed 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f967 	bl	8001982 <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f92f 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000100 	.word	0x20000100
 80016ec:	200000fc 	.word	0x200000fc

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000100 	.word	0x20000100
 8001714:	20038e5c 	.word	0x20038e5c

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20038e5c 	.word	0x20038e5c

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff ffee 	bl	8001718 <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d005      	beq.n	8001756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_Delay+0x44>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	bf00      	nop
 8001758:	f7ff ffde 	bl	8001718 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d8f7      	bhi.n	8001758 <HAL_Delay+0x28>
  {
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000100 	.word	0x20000100

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	05fa0000 	.word	0x05fa0000

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e069      	b.n	8001a82 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe fdf2 	bl	80005a4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_DCMI_Init+0xf0>)
 80019e2:	400b      	ands	r3, r1
 80019e4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80019fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a06:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a12:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a1e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a2a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d112      	bne.n	8001a62 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7f1b      	ldrb	r3, [r3, #28]
 8001a40:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7f5b      	ldrb	r3, [r3, #29]
 8001a46:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a48:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7f9b      	ldrb	r3, [r3, #30]
 8001a4e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a50:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7fdb      	ldrb	r3, [r3, #31]
 8001a58:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a5e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a60:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 021e 	orr.w	r2, r2, #30
 8001a70:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	ffe0f007 	.word	0xffe0f007

08001a90 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DCMI_Start_DMA+0x20>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e095      	b.n	8001bdc <HAL_DCMI_Start_DMA+0x14c>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ace:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0202 	bic.w	r2, r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <HAL_DCMI_Start_DMA+0x154>)
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afc:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <HAL_DCMI_Start_DMA+0x158>)
 8001afe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	2200      	movs	r2, #0
 8001b06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d20e      	bcs.n	8001b46 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3328      	adds	r3, #40	; 0x28
 8001b32:	4619      	mov	r1, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	f000 faaa 	bl	8002090 <HAL_DMA_Start_IT>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03f      	beq.n	8001bc2 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e04a      	b.n	8001bdc <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <HAL_DCMI_Start_DMA+0x154>)
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001b60:	e009      	b.n	8001b76 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b66:	085a      	lsrs	r2, r3, #1
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	005a      	lsls	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d2f0      	bcs.n	8001b62 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	1e9a      	subs	r2, r3, #2
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3328      	adds	r3, #40	; 0x28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	f000 fdc8 	bl	8002748 <HAL_DMAEx_MultiBufferStart_IT>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00c      	b.n	8001bdc <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	08001dd1 	.word	0x08001dd1
 8001be8:	08001efb 	.word	0x08001efb

08001bec <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_DCMI_Stop+0xb4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_DCMI_Stop+0xb8>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0a5b      	lsrs	r3, r3, #9
 8001c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c04:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_DCMI_Stop+0x2e>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e03d      	b.n	8001c96 <HAL_DCMI_Stop+0xaa>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	1e5c      	subs	r4, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d108      	bne.n	8001c54 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	73fb      	strb	r3, [r7, #15]
      break;
 8001c52:	e006      	b.n	8001c62 <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1eb      	bne.n	8001c3a <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c70:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fa6a 	bl	8002150 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <HAL_DCMI_IRQHandler+0x110>)
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 faa0 	bl	8002230 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01e      	beq.n	8001d38 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_DCMI_IRQHandler+0x110>)
 8001d1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fa84 	bl	8002230 <HAL_DMA_Abort_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f8e1 	bl	8001efa <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2210      	movs	r2, #16
 8001d48:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fc02 	bl	8001554 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2208      	movs	r2, #8
 8001d60:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fbe4 	bl	8001530 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01d      	beq.n	8001dae <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d107      	bne.n	8001d90 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 021e 	bic.w	r2, r2, #30
 8001d8e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fb87 	bl	80014bc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08001efb 	.word	0x08001efb

08001dbc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d043      	beq.n	8001e72 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df6:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d118      	bne.n	8001e36 <DCMI_DMAXferCplt+0x66>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	00da      	lsls	r2, r3, #3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	f001 fdc5 	bl	80039b4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	1e5a      	subs	r2, r3, #1
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
 8001e34:	e044      	b.n	8001ec0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d13c      	bne.n	8001ec0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	00da      	lsls	r2, r3, #3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	f001 fda7 	bl	80039b4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e70:	e026      	b.n	8001ec0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	e017      	b.n	8001ec0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d112      	bne.n	8001ef2 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d103      	bne.n	8001ef2 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d009      	beq.n	8001f26 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff48 	bl	8001dbc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fbea 	bl	8001718 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e099      	b.n	8002084 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f70:	e00f      	b.n	8001f92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f72:	f7ff fbd1 	bl	8001718 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d908      	bls.n	8001f92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e078      	b.n	8002084 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e8      	bne.n	8001f72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_DMA_Init+0x158>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2b04      	cmp	r3, #4
 8002024:	d117      	bne.n	8002056 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fb09 	bl	8002650 <DMA_CheckFifoParam>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002052:	2301      	movs	r3, #1
 8002054:	e016      	b.n	8002084 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fac0 	bl	80025e4 <DMA_CalcBaseAndBitshift>
 8002064:	4603      	mov	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	223f      	movs	r2, #63	; 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	e010803f 	.word	0xe010803f

08002090 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA_Start_IT+0x26>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e048      	b.n	8002148 <HAL_DMA_Start_IT+0xb8>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d137      	bne.n	800213a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fa52 	bl	8002588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0216 	orr.w	r2, r2, #22
 80020fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800210e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0208 	orr.w	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e005      	b.n	8002146 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002142:	2302      	movs	r3, #2
 8002144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002146:	7dfb      	ldrb	r3, [r7, #23]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215e:	f7ff fadb 	bl	8001718 <HAL_GetTick>
 8002162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d008      	beq.n	8002182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e052      	b.n	8002228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0216 	bic.w	r2, r2, #22
 8002190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <HAL_DMA_Abort+0x62>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0208 	bic.w	r2, r2, #8
 80021c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d2:	e013      	b.n	80021fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d4:	f7ff faa0 	bl	8001718 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d90c      	bls.n	80021fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2203      	movs	r2, #3
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e015      	b.n	8002228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1e4      	bne.n	80021d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	223f      	movs	r2, #63	; 0x3f
 8002210:	409a      	lsls	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00c      	b.n	8002268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2205      	movs	r2, #5
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <HAL_DMA_IRQHandler+0x248>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a8e      	ldr	r2, [pc, #568]	; (80024c0 <HAL_DMA_IRQHandler+0x24c>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0a9b      	lsrs	r3, r3, #10
 800228c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2208      	movs	r2, #8
 80022a0:	409a      	lsls	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01a      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0204 	bic.w	r2, r2, #4
 80022c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	2208      	movs	r2, #8
 80022ce:	409a      	lsls	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	2201      	movs	r2, #1
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2201      	movs	r2, #1
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0202 	orr.w	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	2204      	movs	r2, #4
 800231c:	409a      	lsls	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d012      	beq.n	800234c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	2204      	movs	r2, #4
 800233a:	409a      	lsls	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	2210      	movs	r2, #16
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d043      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03c      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	2210      	movs	r2, #16
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d024      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	4798      	blx	r3
 80023a2:	e01f      	b.n	80023e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
 80023b4:	e016      	b.n	80023e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0208 	bic.w	r2, r2, #8
 80023d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2220      	movs	r2, #32
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 808f 	beq.w	8002514 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8087 	beq.w	8002514 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2220      	movs	r2, #32
 800240c:	409a      	lsls	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b05      	cmp	r3, #5
 800241c:	d136      	bne.n	800248c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0216 	bic.w	r2, r2, #22
 800242c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800243c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <HAL_DMA_IRQHandler+0x1da>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0208 	bic.w	r2, r2, #8
 800245c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	223f      	movs	r2, #63	; 0x3f
 8002464:	409a      	lsls	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	2b00      	cmp	r3, #0
 8002480:	d07e      	beq.n	8002580 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
        }
        return;
 800248a:	e079      	b.n	8002580 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01d      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d031      	beq.n	8002514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
 80024b8:	e02c      	b.n	8002514 <HAL_DMA_IRQHandler+0x2a0>
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000
 80024c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d023      	beq.n	8002514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e01e      	b.n	8002514 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10f      	bne.n	8002504 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0210 	bic.w	r2, r2, #16
 80024f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	2b00      	cmp	r3, #0
 800251a:	d032      	beq.n	8002582 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d022      	beq.n	800256e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2205      	movs	r2, #5
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	3301      	adds	r3, #1
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	d307      	bcc.n	800255c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f2      	bne.n	8002540 <HAL_DMA_IRQHandler+0x2cc>
 800255a:	e000      	b.n	800255e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800255c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
 800257e:	e000      	b.n	8002582 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002580:	bf00      	nop
    }
  }
}
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d108      	bne.n	80025c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025c6:	e007      	b.n	80025d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	3b10      	subs	r3, #16
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <DMA_CalcBaseAndBitshift+0x60>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <DMA_CalcBaseAndBitshift+0x64>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d908      	bls.n	8002624 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <DMA_CalcBaseAndBitshift+0x68>)
 800261a:	4013      	ands	r3, r2
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	; 0x58
 8002622:	e006      	b.n	8002632 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <DMA_CalcBaseAndBitshift+0x68>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	aaaaaaab 	.word	0xaaaaaaab
 8002648:	080082fc 	.word	0x080082fc
 800264c:	fffffc00 	.word	0xfffffc00

08002650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11f      	bne.n	80026aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d856      	bhi.n	800271e <DMA_CheckFifoParam+0xce>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <DMA_CheckFifoParam+0x28>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002689 	.word	0x08002689
 800267c:	0800269b 	.word	0x0800269b
 8002680:	08002689 	.word	0x08002689
 8002684:	0800271f 	.word	0x0800271f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d046      	beq.n	8002722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e043      	b.n	8002722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a2:	d140      	bne.n	8002726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e03d      	b.n	8002726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b2:	d121      	bne.n	80026f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d837      	bhi.n	800272a <DMA_CheckFifoParam+0xda>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <DMA_CheckFifoParam+0x70>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026d7 	.word	0x080026d7
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	080026e9 	.word	0x080026e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      break;
 80026d4:	e030      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d025      	beq.n	800272e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e6:	e022      	b.n	800272e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f0:	d11f      	bne.n	8002732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026f6:	e01c      	b.n	8002732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d903      	bls.n	8002706 <DMA_CheckFifoParam+0xb6>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d003      	beq.n	800270c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002704:	e018      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      break;
 800270a:	e015      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e00b      	b.n	8002736 <DMA_CheckFifoParam+0xe6>
      break;
 800271e:	bf00      	nop
 8002720:	e00a      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 8002722:	bf00      	nop
 8002724:	e008      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 8002726:	bf00      	nop
 8002728:	e006      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 800272a:	bf00      	nop
 800272c:	e004      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;   
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
    }
  } 
  
  return status; 
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop

08002748 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b80      	cmp	r3, #128	; 0x80
 8002760:	d106      	bne.n	8002770 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f001 b8ff 	b.w	800396e <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002776:	2b01      	cmp	r3, #1
 8002778:	d102      	bne.n	8002780 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 800277a:	2302      	movs	r3, #2
 800277c:	f001 b8f7 	b.w	800396e <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	f041 80e5 	bne.w	8003960 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027b2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f001 f910 	bl	80039e8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b8d      	ldr	r3, [pc, #564]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d960      	bls.n	8002896 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a8b      	ldr	r2, [pc, #556]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d057      	beq.n	800288e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a8a      	ldr	r2, [pc, #552]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d050      	beq.n	800288a <HAL_DMAEx_MultiBufferStart_IT+0x142>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a88      	ldr	r2, [pc, #544]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d049      	beq.n	8002886 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a87      	ldr	r2, [pc, #540]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d042      	beq.n	8002882 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a85      	ldr	r2, [pc, #532]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d03a      	beq.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a84      	ldr	r2, [pc, #528]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d032      	beq.n	8002876 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a82      	ldr	r2, [pc, #520]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02a      	beq.n	8002870 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a81      	ldr	r2, [pc, #516]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7f      	ldr	r2, [pc, #508]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01a      	beq.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7e      	ldr	r2, [pc, #504]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d012      	beq.n	800285e <HAL_DMAEx_MultiBufferStart_IT+0x116>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7c      	ldr	r2, [pc, #496]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00a      	beq.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7b      	ldr	r2, [pc, #492]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d102      	bne.n	8002852 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 800284c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002850:	e01e      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002856:	e01b      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800285c:	e018      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800285e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002862:	e015      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002868:	e012      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800286a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800286e:	e00f      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002874:	e00c      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800287a:	e009      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800287c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002880:	e006      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002882:	2320      	movs	r3, #32
 8002884:	e004      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002886:	2320      	movs	r3, #32
 8002888:	e002      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800288a:	2320      	movs	r3, #32
 800288c:	e000      	b.n	8002890 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800288e:	2320      	movs	r3, #32
 8002890:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002892:	60d3      	str	r3, [r2, #12]
 8002894:	e14f      	b.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b67      	ldr	r3, [pc, #412]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d960      	bls.n	8002964 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d057      	beq.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d050      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d049      	beq.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a53      	ldr	r2, [pc, #332]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d042      	beq.n	8002950 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d03a      	beq.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d032      	beq.n	8002944 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d02a      	beq.n	800293e <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d022      	beq.n	8002938 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a4c      	ldr	r2, [pc, #304]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d01a      	beq.n	8002932 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d012      	beq.n	800292c <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a49      	ldr	r2, [pc, #292]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00a      	beq.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800291a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800291e:	e01e      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002924:	e01b      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002926:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800292a:	e018      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800292c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002930:	e015      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002936:	e012      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002938:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800293c:	e00f      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800293e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002942:	e00c      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002948:	e009      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800294a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800294e:	e006      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002950:	2320      	movs	r3, #32
 8002952:	e004      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002954:	2320      	movs	r3, #32
 8002956:	e002      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002958:	2320      	movs	r3, #32
 800295a:	e000      	b.n	800295e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800295c:	2320      	movs	r3, #32
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002960:	6093      	str	r3, [r2, #8]
 8002962:	e0e8      	b.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800296c:	429a      	cmp	r2, r3
 800296e:	f240 8082 	bls.w	8002a76 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d078      	beq.n	8002a6e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d071      	beq.n	8002a6a <HAL_DMAEx_MultiBufferStart_IT+0x322>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d06a      	beq.n	8002a66 <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d063      	beq.n	8002a62 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d05b      	beq.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x314>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d053      	beq.n	8002a56 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04b      	beq.n	8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d043      	beq.n	8002a4a <HAL_DMAEx_MultiBufferStart_IT+0x302>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d03b      	beq.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d012      	beq.n	80029fc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00a      	beq.n	80029f6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d102      	bne.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 80029ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ee:	e03f      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029f4:	e03c      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029fa:	e039      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a00:	e036      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a02:	bf00      	nop
 8002a04:	40026458 	.word	0x40026458
 8002a08:	40026010 	.word	0x40026010
 8002a0c:	40026410 	.word	0x40026410
 8002a10:	40026070 	.word	0x40026070
 8002a14:	40026470 	.word	0x40026470
 8002a18:	40026028 	.word	0x40026028
 8002a1c:	40026428 	.word	0x40026428
 8002a20:	40026088 	.word	0x40026088
 8002a24:	40026488 	.word	0x40026488
 8002a28:	40026040 	.word	0x40026040
 8002a2c:	40026440 	.word	0x40026440
 8002a30:	400260a0 	.word	0x400260a0
 8002a34:	400264a0 	.word	0x400264a0
 8002a38:	40026400 	.word	0x40026400
 8002a3c:	400260b8 	.word	0x400260b8
 8002a40:	40026058 	.word	0x40026058
 8002a44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a48:	e012      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a4e:	e00f      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a54:	e00c      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5a:	e009      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a60:	e006      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a62:	2320      	movs	r3, #32
 8002a64:	e004      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a66:	2320      	movs	r3, #32
 8002a68:	e002      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e000      	b.n	8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a6e:	2320      	movs	r3, #32
 8002a70:	4a8c      	ldr	r2, [pc, #560]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8002a72:	60d3      	str	r3, [r2, #12]
 8002a74:	e05f      	b.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a8b      	ldr	r2, [pc, #556]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d057      	beq.n	8002b30 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a89      	ldr	r2, [pc, #548]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d050      	beq.n	8002b2c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a88      	ldr	r2, [pc, #544]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d049      	beq.n	8002b28 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a86      	ldr	r2, [pc, #536]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d042      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a85      	ldr	r2, [pc, #532]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d03a      	beq.n	8002b1e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d032      	beq.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a82      	ldr	r2, [pc, #520]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d02a      	beq.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a80      	ldr	r2, [pc, #512]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d022      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7f      	ldr	r2, [pc, #508]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01a      	beq.n	8002b06 <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a7d      	ldr	r2, [pc, #500]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d012      	beq.n	8002b00 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7c      	ldr	r2, [pc, #496]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00a      	beq.n	8002afa <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d102      	bne.n	8002af4 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 8002aee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002af2:	e01e      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002af4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002af8:	e01b      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002afa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002afe:	e018      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b04:	e015      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b0a:	e012      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b10:	e00f      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b16:	e00c      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b1c:	e009      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b22:	e006      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b24:	2320      	movs	r3, #32
 8002b26:	e004      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e002      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e000      	b.n	8002b32 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b30:	2320      	movs	r3, #32
 8002b32:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8002b34:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b66      	ldr	r3, [pc, #408]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d960      	bls.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d057      	beq.n	8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d050      	beq.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d049      	beq.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d042      	beq.n	8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03a      	beq.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d032      	beq.n	8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d02a      	beq.n	8002bde <HAL_DMAEx_MultiBufferStart_IT+0x496>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d022      	beq.n	8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x490>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d01a      	beq.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d012      	beq.n	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x484>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00a      	beq.n	8002bc6 <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d102      	bne.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8002bba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bbe:	e01e      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bc4:	e01b      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bca:	e018      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd0:	e015      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd6:	e012      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bdc:	e00f      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be2:	e00c      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be8:	e009      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bee:	e006      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	e004      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	e002      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	e000      	b.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	4a37      	ldr	r2, [pc, #220]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002c00:	60d3      	str	r3, [r2, #12]
 8002c02:	e14f      	b.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f240 8082 	bls.w	8002d16 <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d078      	beq.n	8002d0e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d071      	beq.n	8002d0a <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d06a      	beq.n	8002d06 <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d063      	beq.n	8002d02 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d05b      	beq.n	8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d053      	beq.n	8002cf6 <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04b      	beq.n	8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d043      	beq.n	8002cea <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d03b      	beq.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d012      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00a      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d102      	bne.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 8002c8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c8e:	e03f      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c94:	e03c      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c9a:	e039      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ca0:	e036      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002ca2:	bf00      	nop
 8002ca4:	40026000 	.word	0x40026000
 8002ca8:	40026010 	.word	0x40026010
 8002cac:	40026410 	.word	0x40026410
 8002cb0:	40026070 	.word	0x40026070
 8002cb4:	40026470 	.word	0x40026470
 8002cb8:	40026028 	.word	0x40026028
 8002cbc:	40026428 	.word	0x40026428
 8002cc0:	40026088 	.word	0x40026088
 8002cc4:	40026488 	.word	0x40026488
 8002cc8:	40026040 	.word	0x40026040
 8002ccc:	40026440 	.word	0x40026440
 8002cd0:	400260a0 	.word	0x400260a0
 8002cd4:	400264a0 	.word	0x400264a0
 8002cd8:	40026458 	.word	0x40026458
 8002cdc:	40026400 	.word	0x40026400
 8002ce0:	400260b8 	.word	0x400260b8
 8002ce4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ce8:	e012      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cee:	e00f      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf4:	e00c      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cfa:	e009      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d00:	e006      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d02:	2310      	movs	r3, #16
 8002d04:	e004      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d06:	2310      	movs	r3, #16
 8002d08:	e002      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	e000      	b.n	8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d0e:	2310      	movs	r3, #16
 8002d10:	4a8c      	ldr	r2, [pc, #560]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 8002d12:	6093      	str	r3, [r2, #8]
 8002d14:	e0c6      	b.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d960      	bls.n	8002de4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a89      	ldr	r2, [pc, #548]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d057      	beq.n	8002ddc <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a87      	ldr	r2, [pc, #540]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d050      	beq.n	8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a86      	ldr	r2, [pc, #536]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d049      	beq.n	8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a84      	ldr	r2, [pc, #528]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d042      	beq.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a83      	ldr	r2, [pc, #524]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03a      	beq.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a81      	ldr	r2, [pc, #516]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d032      	beq.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a80      	ldr	r2, [pc, #512]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d02a      	beq.n	8002dbe <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a7e      	ldr	r2, [pc, #504]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d022      	beq.n	8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7d      	ldr	r2, [pc, #500]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d01a      	beq.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7b      	ldr	r2, [pc, #492]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d012      	beq.n	8002dac <HAL_DMAEx_MultiBufferStart_IT+0x664>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a7a      	ldr	r2, [pc, #488]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00a      	beq.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a78      	ldr	r2, [pc, #480]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d102      	bne.n	8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8002d9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d9e:	e01e      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002da0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002da4:	e01b      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002da6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002daa:	e018      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db0:	e015      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002db2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db6:	e012      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dbc:	e00f      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc2:	e00c      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc8:	e009      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dce:	e006      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	e004      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	e002      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	e000      	b.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	4a67      	ldr	r2, [pc, #412]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002de0:	60d3      	str	r3, [r2, #12]
 8002de2:	e05f      	b.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d057      	beq.n	8002e9e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d050      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d049      	beq.n	8002e96 <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a54      	ldr	r2, [pc, #336]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d042      	beq.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d03a      	beq.n	8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d032      	beq.n	8002e86 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02a      	beq.n	8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d022      	beq.n	8002e7a <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01a      	beq.n	8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d012      	beq.n	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0x726>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00a      	beq.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x720>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d102      	bne.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 8002e5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e60:	e01e      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e66:	e01b      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e6c:	e018      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e72:	e015      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e78:	e012      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e7e:	e00f      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e84:	e00c      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8a:	e009      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	e006      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e92:	2310      	movs	r3, #16
 8002e94:	e004      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e96:	2310      	movs	r3, #16
 8002e98:	e002      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	e000      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	4a36      	ldr	r2, [pc, #216]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002ea2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f240 8082 	bls.w	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d078      	beq.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d071      	beq.n	8002faa <HAL_DMAEx_MultiBufferStart_IT+0x862>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d06a      	beq.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d063      	beq.n	8002fa2 <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d05b      	beq.n	8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d053      	beq.n	8002f96 <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d04b      	beq.n	8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d043      	beq.n	8002f8a <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d03b      	beq.n	8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d012      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00a      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d102      	bne.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 8002f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f2e:	e03f      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f34:	e03c      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f3a:	e039      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f40:	e036      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f42:	bf00      	nop
 8002f44:	40026400 	.word	0x40026400
 8002f48:	40026058 	.word	0x40026058
 8002f4c:	40026010 	.word	0x40026010
 8002f50:	40026410 	.word	0x40026410
 8002f54:	40026070 	.word	0x40026070
 8002f58:	40026470 	.word	0x40026470
 8002f5c:	40026028 	.word	0x40026028
 8002f60:	40026428 	.word	0x40026428
 8002f64:	40026088 	.word	0x40026088
 8002f68:	40026488 	.word	0x40026488
 8002f6c:	40026040 	.word	0x40026040
 8002f70:	40026440 	.word	0x40026440
 8002f74:	400260a0 	.word	0x400260a0
 8002f78:	400264a0 	.word	0x400264a0
 8002f7c:	40026000 	.word	0x40026000
 8002f80:	40026458 	.word	0x40026458
 8002f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f88:	e012      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f8e:	e00f      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f94:	e00c      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9a:	e009      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa0:	e006      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	e004      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	e002      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e000      	b.n	8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	4a8c      	ldr	r2, [pc, #560]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8002fb2:	60d3      	str	r3, [r2, #12]
 8002fb4:	e14e      	b.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d960      	bls.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a89      	ldr	r2, [pc, #548]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d057      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a87      	ldr	r2, [pc, #540]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d050      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a86      	ldr	r2, [pc, #536]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d049      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a84      	ldr	r2, [pc, #528]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d042      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a83      	ldr	r2, [pc, #524]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d03a      	beq.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a81      	ldr	r2, [pc, #516]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d032      	beq.n	8003064 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a80      	ldr	r2, [pc, #512]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d02a      	beq.n	800305e <HAL_DMAEx_MultiBufferStart_IT+0x916>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7e      	ldr	r2, [pc, #504]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7d      	ldr	r2, [pc, #500]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01a      	beq.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d012      	beq.n	800304c <HAL_DMAEx_MultiBufferStart_IT+0x904>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00a      	beq.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a78      	ldr	r2, [pc, #480]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d102      	bne.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 800303a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800303e:	e01e      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003044:	e01b      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003046:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800304a:	e018      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800304c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003050:	e015      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003052:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003056:	e012      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800305c:	e00f      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800305e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003062:	e00c      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	e009      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800306a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306e:	e006      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003070:	2308      	movs	r3, #8
 8003072:	e004      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003074:	2308      	movs	r3, #8
 8003076:	e002      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003078:	2308      	movs	r3, #8
 800307a:	e000      	b.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800307c:	2308      	movs	r3, #8
 800307e:	4a59      	ldr	r2, [pc, #356]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8003080:	6093      	str	r3, [r2, #8]
 8003082:	e0e7      	b.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d960      	bls.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a55      	ldr	r2, [pc, #340]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d057      	beq.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a54      	ldr	r2, [pc, #336]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d050      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d049      	beq.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a51      	ldr	r2, [pc, #324]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d042      	beq.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d03a      	beq.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4e      	ldr	r2, [pc, #312]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d032      	beq.n	8003132 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02a      	beq.n	800312c <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a49      	ldr	r2, [pc, #292]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01a      	beq.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d012      	beq.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a46      	ldr	r2, [pc, #280]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00a      	beq.n	8003114 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a45      	ldr	r2, [pc, #276]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d102      	bne.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 8003108:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800310c:	e01e      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800310e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003112:	e01b      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003114:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003118:	e018      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800311a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800311e:	e015      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003120:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003124:	e012      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800312a:	e00f      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800312c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003130:	e00c      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003136:	e009      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313c:	e006      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800313e:	2308      	movs	r3, #8
 8003140:	e004      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003142:	2308      	movs	r3, #8
 8003144:	e002      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003146:	2308      	movs	r3, #8
 8003148:	e000      	b.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800314a:	2308      	movs	r3, #8
 800314c:	4a34      	ldr	r2, [pc, #208]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800314e:	60d3      	str	r3, [r2, #12]
 8003150:	e080      	b.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d078      	beq.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d071      	beq.n	800324a <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d06a      	beq.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d063      	beq.n	8003242 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d05b      	beq.n	800323c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d053      	beq.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d04b      	beq.n	8003230 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d043      	beq.n	800322a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d012      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00a      	beq.n	80031d6 <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d102      	bne.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 80031ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031ce:	e03f      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d4:	e03c      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031da:	e039      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031e0:	e036      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031e2:	bf00      	nop
 80031e4:	40026400 	.word	0x40026400
 80031e8:	400260b8 	.word	0x400260b8
 80031ec:	40026010 	.word	0x40026010
 80031f0:	40026410 	.word	0x40026410
 80031f4:	40026070 	.word	0x40026070
 80031f8:	40026470 	.word	0x40026470
 80031fc:	40026028 	.word	0x40026028
 8003200:	40026428 	.word	0x40026428
 8003204:	40026088 	.word	0x40026088
 8003208:	40026488 	.word	0x40026488
 800320c:	40026040 	.word	0x40026040
 8003210:	40026440 	.word	0x40026440
 8003214:	400260a0 	.word	0x400260a0
 8003218:	400264a0 	.word	0x400264a0
 800321c:	40026058 	.word	0x40026058
 8003220:	40026000 	.word	0x40026000
 8003224:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003228:	e012      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800322a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800322e:	e00f      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003234:	e00c      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323a:	e009      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800323c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003240:	e006      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003242:	2308      	movs	r3, #8
 8003244:	e004      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003246:	2308      	movs	r3, #8
 8003248:	e002      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800324a:	2308      	movs	r3, #8
 800324c:	e000      	b.n	8003250 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800324e:	2308      	movs	r3, #8
 8003250:	4a8a      	ldr	r2, [pc, #552]	; (800347c <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8003252:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 800325c:	429a      	cmp	r2, r3
 800325e:	d960      	bls.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a87      	ldr	r2, [pc, #540]	; (8003484 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d057      	beq.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a86      	ldr	r2, [pc, #536]	; (8003488 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d050      	beq.n	8003316 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a84      	ldr	r2, [pc, #528]	; (800348c <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d049      	beq.n	8003312 <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a83      	ldr	r2, [pc, #524]	; (8003490 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d042      	beq.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a81      	ldr	r2, [pc, #516]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d03a      	beq.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a80      	ldr	r2, [pc, #512]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d032      	beq.n	8003302 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7e      	ldr	r2, [pc, #504]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02a      	beq.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7d      	ldr	r2, [pc, #500]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a7b      	ldr	r2, [pc, #492]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01a      	beq.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7a      	ldr	r2, [pc, #488]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d012      	beq.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a78      	ldr	r2, [pc, #480]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00a      	beq.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a77      	ldr	r2, [pc, #476]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d102      	bne.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 80032d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032dc:	e01e      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e2:	e01b      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032e8:	e018      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032ee:	e015      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032f4:	e012      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fa:	e00f      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003300:	e00c      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003306:	e009      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330c:	e006      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800330e:	2304      	movs	r3, #4
 8003310:	e004      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003312:	2304      	movs	r3, #4
 8003314:	e002      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003316:	2304      	movs	r3, #4
 8003318:	e000      	b.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800331a:	2304      	movs	r3, #4
 800331c:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800331e:	60d3      	str	r3, [r2, #12]
 8003320:	e150      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800332a:	429a      	cmp	r2, r3
 800332c:	d960      	bls.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a54      	ldr	r2, [pc, #336]	; (8003484 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d057      	beq.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d050      	beq.n	80033e4 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a51      	ldr	r2, [pc, #324]	; (800348c <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d049      	beq.n	80033e0 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a4f      	ldr	r2, [pc, #316]	; (8003490 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d042      	beq.n	80033dc <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a4e      	ldr	r2, [pc, #312]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d03a      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d032      	beq.n	80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a4b      	ldr	r2, [pc, #300]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02a      	beq.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d022      	beq.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a48      	ldr	r2, [pc, #288]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d01a      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a46      	ldr	r2, [pc, #280]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d012      	beq.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a45      	ldr	r2, [pc, #276]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00a      	beq.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d102      	bne.n	80033ac <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 80033a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033aa:	e01e      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b0:	e01b      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033b6:	e018      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033bc:	e015      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033c2:	e012      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c8:	e00f      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ce:	e00c      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d4:	e009      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033da:	e006      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033dc:	2304      	movs	r3, #4
 80033de:	e004      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e002      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e000      	b.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033e8:	2304      	movs	r3, #4
 80033ea:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	e0e9      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f240 8083 	bls.w	8003504 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d079      	beq.n	80034fc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d072      	beq.n	80034f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d06b      	beq.n	80034f4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d064      	beq.n	80034f0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d05c      	beq.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d054      	beq.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04c      	beq.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d044      	beq.n	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d03c      	beq.n	80034d2 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d034      	beq.n	80034cc <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d02c      	beq.n	80034c6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d124      	bne.n	80034c0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003476:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800347a:	e040      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800347c:	40026000 	.word	0x40026000
 8003480:	40026458 	.word	0x40026458
 8003484:	40026010 	.word	0x40026010
 8003488:	40026410 	.word	0x40026410
 800348c:	40026070 	.word	0x40026070
 8003490:	40026470 	.word	0x40026470
 8003494:	40026028 	.word	0x40026028
 8003498:	40026428 	.word	0x40026428
 800349c:	40026088 	.word	0x40026088
 80034a0:	40026488 	.word	0x40026488
 80034a4:	40026040 	.word	0x40026040
 80034a8:	40026440 	.word	0x40026440
 80034ac:	400260a0 	.word	0x400260a0
 80034b0:	400264a0 	.word	0x400264a0
 80034b4:	40026400 	.word	0x40026400
 80034b8:	400260b8 	.word	0x400260b8
 80034bc:	40026058 	.word	0x40026058
 80034c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c4:	e01b      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034ca:	e018      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034d0:	e015      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034d6:	e012      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034dc:	e00f      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e2:	e00c      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e8:	e009      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ee:	e006      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034f0:	2304      	movs	r3, #4
 80034f2:	e004      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034f4:	2304      	movs	r3, #4
 80034f6:	e002      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e000      	b.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034fc:	2304      	movs	r3, #4
 80034fe:	4a8b      	ldr	r2, [pc, #556]	; (800372c <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8003500:	60d3      	str	r3, [r2, #12]
 8003502:	e05f      	b.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a89      	ldr	r2, [pc, #548]	; (8003730 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d057      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a88      	ldr	r2, [pc, #544]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d050      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a86      	ldr	r2, [pc, #536]	; (8003738 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d049      	beq.n	80035b6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a85      	ldr	r2, [pc, #532]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d042      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a83      	ldr	r2, [pc, #524]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03a      	beq.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a82      	ldr	r2, [pc, #520]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d032      	beq.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02a      	beq.n	80035a0 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7f      	ldr	r2, [pc, #508]	; (800374c <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7d      	ldr	r2, [pc, #500]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01a      	beq.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7c      	ldr	r2, [pc, #496]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d012      	beq.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a7a      	ldr	r2, [pc, #488]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00a      	beq.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a79      	ldr	r2, [pc, #484]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d102      	bne.n	8003582 <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 800357c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003580:	e01e      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003586:	e01b      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003588:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800358c:	e018      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800358e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003592:	e015      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003598:	e012      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800359a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359e:	e00f      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a4:	e00c      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035aa:	e009      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b0:	e006      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e004      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e002      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035ba:	2304      	movs	r3, #4
 80035bc:	e000      	b.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035be:	2304      	movs	r3, #4
 80035c0:	4a5a      	ldr	r2, [pc, #360]	; (800372c <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 80035c2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d95c      	bls.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a56      	ldr	r2, [pc, #344]	; (8003730 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d053      	beq.n	8003682 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d04c      	beq.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a53      	ldr	r2, [pc, #332]	; (8003738 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d045      	beq.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d03e      	beq.n	8003676 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d037      	beq.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d030      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a4d      	ldr	r2, [pc, #308]	; (8003748 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d029      	beq.n	800366a <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4c      	ldr	r2, [pc, #304]	; (800374c <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01a      	beq.n	8003660 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a49      	ldr	r2, [pc, #292]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d012      	beq.n	800365a <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00a      	beq.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a46      	ldr	r2, [pc, #280]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d102      	bne.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 8003648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800364c:	e01a      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800364e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003652:	e017      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003658:	e014      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800365a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365e:	e011      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003664:	e00e      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003666:	2340      	movs	r3, #64	; 0x40
 8003668:	e00c      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800366a:	2340      	movs	r3, #64	; 0x40
 800366c:	e00a      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800366e:	2340      	movs	r3, #64	; 0x40
 8003670:	e008      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	e006      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003676:	2301      	movs	r3, #1
 8003678:	e004      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800367a:	2301      	movs	r3, #1
 800367c:	e002      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003682:	2301      	movs	r3, #1
 8003684:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003686:	60d3      	str	r3, [r2, #12]
 8003688:	e141      	b.n	800390e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	4b35      	ldr	r3, [pc, #212]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003692:	429a      	cmp	r2, r3
 8003694:	d97c      	bls.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a25      	ldr	r2, [pc, #148]	; (8003730 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d073      	beq.n	8003788 <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d06c      	beq.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a22      	ldr	r2, [pc, #136]	; (8003738 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d065      	beq.n	8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d05e      	beq.n	800377c <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d057      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d050      	beq.n	8003774 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d049      	beq.n	8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d042      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01a      	beq.n	8003726 <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d012      	beq.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00a      	beq.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d102      	bne.n	8003714 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 800370e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003712:	e03a      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003714:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003718:	e037      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800371a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800371e:	e034      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003724:	e031      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372a:	e02e      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800372c:	40026000 	.word	0x40026000
 8003730:	40026010 	.word	0x40026010
 8003734:	40026410 	.word	0x40026410
 8003738:	40026070 	.word	0x40026070
 800373c:	40026470 	.word	0x40026470
 8003740:	40026028 	.word	0x40026028
 8003744:	40026428 	.word	0x40026428
 8003748:	40026088 	.word	0x40026088
 800374c:	40026488 	.word	0x40026488
 8003750:	40026040 	.word	0x40026040
 8003754:	40026440 	.word	0x40026440
 8003758:	400260a0 	.word	0x400260a0
 800375c:	400264a0 	.word	0x400264a0
 8003760:	40026458 	.word	0x40026458
 8003764:	40026400 	.word	0x40026400
 8003768:	400260b8 	.word	0x400260b8
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	e00c      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003770:	2340      	movs	r3, #64	; 0x40
 8003772:	e00a      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003774:	2340      	movs	r3, #64	; 0x40
 8003776:	e008      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003778:	2340      	movs	r3, #64	; 0x40
 800377a:	e006      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800377c:	2301      	movs	r3, #1
 800377e:	e004      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003780:	2301      	movs	r3, #1
 8003782:	e002      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003788:	2301      	movs	r3, #1
 800378a:	4a7b      	ldr	r2, [pc, #492]	; (8003978 <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 800378c:	6093      	str	r3, [r2, #8]
 800378e:	e0be      	b.n	800390e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b79      	ldr	r3, [pc, #484]	; (800397c <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8003798:	429a      	cmp	r2, r3
 800379a:	d95c      	bls.n	8003856 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a77      	ldr	r2, [pc, #476]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d053      	beq.n	800384e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a76      	ldr	r2, [pc, #472]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04c      	beq.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a74      	ldr	r2, [pc, #464]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a73      	ldr	r2, [pc, #460]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03e      	beq.n	8003842 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a71      	ldr	r2, [pc, #452]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d037      	beq.n	800383e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a70      	ldr	r2, [pc, #448]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d030      	beq.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6e      	ldr	r2, [pc, #440]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d029      	beq.n	8003836 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6d      	ldr	r2, [pc, #436]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6b      	ldr	r2, [pc, #428]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01a      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d012      	beq.n	8003826 <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00a      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d102      	bne.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 8003814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003818:	e01a      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800381a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800381e:	e017      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003824:	e014      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800382a:	e011      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800382c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003830:	e00e      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	e00c      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	e00a      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	e008      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	e006      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003842:	2301      	movs	r3, #1
 8003844:	e004      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003846:	2301      	movs	r3, #1
 8003848:	e002      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800384e:	2301      	movs	r3, #1
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e05b      	b.n	800390e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a49      	ldr	r2, [pc, #292]	; (8003980 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d053      	beq.n	8003908 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a47      	ldr	r2, [pc, #284]	; (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d04c      	beq.n	8003904 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a46      	ldr	r2, [pc, #280]	; (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d045      	beq.n	8003900 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a44      	ldr	r2, [pc, #272]	; (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d03e      	beq.n	80038fc <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a43      	ldr	r2, [pc, #268]	; (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d037      	beq.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a41      	ldr	r2, [pc, #260]	; (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d030      	beq.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d029      	beq.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3e      	ldr	r2, [pc, #248]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d022      	beq.n	80038ec <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d01a      	beq.n	80038e6 <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d012      	beq.n	80038e0 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00a      	beq.n	80038da <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a38      	ldr	r2, [pc, #224]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d102      	bne.n	80038d4 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 80038ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038d2:	e01a      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038d8:	e017      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038de:	e014      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e4:	e011      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ea:	e00e      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038ec:	2340      	movs	r3, #64	; 0x40
 80038ee:	e00c      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038f0:	2340      	movs	r3, #64	; 0x40
 80038f2:	e00a      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	e008      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	e006      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e004      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003900:	2301      	movs	r3, #1
 8003902:	e002      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003908:	2301      	movs	r3, #1
 800390a:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800390c:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0216 	orr.w	r2, r2, #22
 800391c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800392c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0208 	orr.w	r2, r2, #8
 800394c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e005      	b.n	800396c <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003968:	2302      	movs	r3, #2
 800396a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800396c:	7dfb      	ldrb	r3, [r7, #23]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40026400 	.word	0x40026400
 800397c:	40026058 	.word	0x40026058
 8003980:	40026010 	.word	0x40026010
 8003984:	40026410 	.word	0x40026410
 8003988:	40026070 	.word	0x40026070
 800398c:	40026470 	.word	0x40026470
 8003990:	40026028 	.word	0x40026028
 8003994:	40026428 	.word	0x40026428
 8003998:	40026088 	.word	0x40026088
 800399c:	40026488 	.word	0x40026488
 80039a0:	40026040 	.word	0x40026040
 80039a4:	40026440 	.word	0x40026440
 80039a8:	400260a0 	.word	0x400260a0
 80039ac:	400264a0 	.word	0x400264a0
 80039b0:	40026000 	.word	0x40026000

080039b4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e003      	b.n	80039da <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d108      	bne.n	8003a18 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a16:	e007      	b.n	8003a28 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06a      	b.n	8003b1c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2223      	movs	r2, #35	; 0x23
 8003a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fc ff0b 	bl	8000874 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_ETH_Init+0xf0>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a30      	ldr	r2, [pc, #192]	; (8003b24 <HAL_ETH_Init+0xf0>)
 8003a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_ETH_Init+0xf0>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_ETH_Init+0xf4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <HAL_ETH_Init+0xf4>)
 8003a7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_ETH_Init+0xf4>)
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4927      	ldr	r1, [pc, #156]	; (8003b28 <HAL_ETH_Init+0xf4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_ETH_Init+0xf4>)
 8003a92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aaa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aac:	f7fd fe34 	bl	8001718 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ab2:	e011      	b.n	8003ad8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ab4:	f7fd fe30 	bl	8001718 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ac2:	d909      	bls.n	8003ad8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	22e0      	movs	r2, #224	; 0xe0
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e021      	b.n	8003b1c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e4      	bne.n	8003ab4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f958 	bl	8003da0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9ff 	bl	8003ef4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa55 	bl	8003fa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	461a      	mov	r2, r3
 8003b02:	2100      	movs	r1, #0
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f9bd 	bl	8003e84 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2210      	movs	r2, #16
 8003b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40013800 	.word	0x40013800

08003b2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <ETH_SetMACConfig+0x15c>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	7c1b      	ldrb	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <ETH_SetMACConfig+0x28>
 8003b4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b52:	e000      	b.n	8003b56 <ETH_SetMACConfig+0x2a>
 8003b54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	7c5b      	ldrb	r3, [r3, #17]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <ETH_SetMACConfig+0x38>
 8003b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b62:	e000      	b.n	8003b66 <ETH_SetMACConfig+0x3a>
 8003b64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	7fdb      	ldrb	r3, [r3, #31]
 8003b72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	7f92      	ldrb	r2, [r2, #30]
 8003b80:	2a00      	cmp	r2, #0
 8003b82:	d102      	bne.n	8003b8a <ETH_SetMACConfig+0x5e>
 8003b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b88:	e000      	b.n	8003b8c <ETH_SetMACConfig+0x60>
 8003b8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	7f1b      	ldrb	r3, [r3, #28]
 8003b92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	791b      	ldrb	r3, [r3, #4]
 8003ba0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ba2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003baa:	2a00      	cmp	r2, #0
 8003bac:	d102      	bne.n	8003bb4 <ETH_SetMACConfig+0x88>
 8003bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb2:	e000      	b.n	8003bb6 <ETH_SetMACConfig+0x8a>
 8003bb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	7bdb      	ldrb	r3, [r3, #15]
 8003bbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7fd fda2 	bl	8001730 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c02:	4013      	ands	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	d101      	bne.n	8003c1a <ETH_SetMACConfig+0xee>
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	e000      	b.n	8003c1c <ETH_SetMACConfig+0xf0>
 8003c1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c2a:	2a01      	cmp	r2, #1
 8003c2c:	d101      	bne.n	8003c32 <ETH_SetMACConfig+0x106>
 8003c2e:	2208      	movs	r2, #8
 8003c30:	e000      	b.n	8003c34 <ETH_SetMACConfig+0x108>
 8003c32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c3c:	2a01      	cmp	r2, #1
 8003c3e:	d101      	bne.n	8003c44 <ETH_SetMACConfig+0x118>
 8003c40:	2204      	movs	r2, #4
 8003c42:	e000      	b.n	8003c46 <ETH_SetMACConfig+0x11a>
 8003c44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c4e:	2a01      	cmp	r2, #1
 8003c50:	d101      	bne.n	8003c56 <ETH_SetMACConfig+0x12a>
 8003c52:	2202      	movs	r2, #2
 8003c54:	e000      	b.n	8003c58 <ETH_SetMACConfig+0x12c>
 8003c56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f7fd fd5d 	bl	8001730 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	619a      	str	r2, [r3, #24]
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	ff20810f 	.word	0xff20810f

08003c8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <ETH_SetDMAConfig+0x110>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	7b1b      	ldrb	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <ETH_SetDMAConfig+0x2c>
 8003cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cb6:	e000      	b.n	8003cba <ETH_SetDMAConfig+0x2e>
 8003cb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	7b5b      	ldrb	r3, [r3, #13]
 8003cbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	7f52      	ldrb	r2, [r2, #29]
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d102      	bne.n	8003cd0 <ETH_SetDMAConfig+0x44>
 8003cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cce:	e000      	b.n	8003cd2 <ETH_SetDMAConfig+0x46>
 8003cd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	7b9b      	ldrb	r3, [r3, #14]
 8003cd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ce0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	7f1b      	ldrb	r3, [r3, #28]
 8003ce6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	7f9b      	ldrb	r3, [r3, #30]
 8003cee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cf0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cf6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d00:	4313      	orrs	r3, r2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	461a      	mov	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d22:	2001      	movs	r0, #1
 8003d24:	f7fd fd04 	bl	8001730 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d30:	461a      	mov	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	791b      	ldrb	r3, [r3, #4]
 8003d3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7fd fcd5 	bl	8001730 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	f8de3f23 	.word	0xf8de3f23

08003da0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0a6      	sub	sp, #152	; 0x98
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003db4:	2300      	movs	r3, #0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe86 	bl	8003b2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e42:	2300      	movs	r3, #0
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e54:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ff08 	bl	8003c8c <ETH_SetDMAConfig>
}
 8003e7c:	bf00      	nop
 8003e7e:	3798      	adds	r7, #152	; 0x98
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3305      	adds	r3, #5
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	3204      	adds	r2, #4
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <ETH_MACAddressConfig+0x68>)
 8003ea6:	4413      	add	r3, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3303      	adds	r3, #3
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	061a      	lsls	r2, r3, #24
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <ETH_MACAddressConfig+0x6c>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6013      	str	r3, [r2, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40028040 	.word	0x40028040
 8003ef0:	40028044 	.word	0x40028044

08003ef4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e03e      	b.n	8003f80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68d9      	ldr	r1, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	3206      	adds	r2, #6
 8003f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d80c      	bhi.n	8003f64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68d9      	ldr	r1, [r3, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	e004      	b.n	8003f6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d9bd      	bls.n	8003f02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	611a      	str	r2, [r3, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e046      	b.n	8004042 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6919      	ldr	r1, [r3, #16]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003ff8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	3212      	adds	r2, #18
 800400e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d80c      	bhi.n	8004032 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6919      	ldr	r1, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e004      	b.n	800403c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	461a      	mov	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d9b5      	bls.n	8003fb4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004072:	60da      	str	r2, [r3, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	; 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e175      	b.n	800438c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80040a0:	2201      	movs	r2, #1
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	f040 8164 	bne.w	8004386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d005      	beq.n	80040d6 <HAL_GPIO_Init+0x56>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d130      	bne.n	8004138 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	2203      	movs	r2, #3
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800410c:	2201      	movs	r2, #1
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 0201 	and.w	r2, r3, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	2b03      	cmp	r3, #3
 8004142:	d017      	beq.n	8004174 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	2203      	movs	r2, #3
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d123      	bne.n	80041c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	08da      	lsrs	r2, r3, #3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3208      	adds	r2, #8
 8004188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	220f      	movs	r2, #15
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	08da      	lsrs	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	69b9      	ldr	r1, [r7, #24]
 80041c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 0203 	and.w	r2, r3, #3
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80be 	beq.w	8004386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420a:	4b66      	ldr	r3, [pc, #408]	; (80043a4 <HAL_GPIO_Init+0x324>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_GPIO_Init+0x324>)
 8004210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004214:	6453      	str	r3, [r2, #68]	; 0x44
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_GPIO_Init+0x324>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004222:	4a61      	ldr	r2, [pc, #388]	; (80043a8 <HAL_GPIO_Init+0x328>)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	089b      	lsrs	r3, r3, #2
 8004228:	3302      	adds	r3, #2
 800422a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	220f      	movs	r2, #15
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_GPIO_Init+0x32c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d037      	beq.n	80042be <HAL_GPIO_Init+0x23e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a57      	ldr	r2, [pc, #348]	; (80043b0 <HAL_GPIO_Init+0x330>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d031      	beq.n	80042ba <HAL_GPIO_Init+0x23a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a56      	ldr	r2, [pc, #344]	; (80043b4 <HAL_GPIO_Init+0x334>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02b      	beq.n	80042b6 <HAL_GPIO_Init+0x236>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a55      	ldr	r2, [pc, #340]	; (80043b8 <HAL_GPIO_Init+0x338>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d025      	beq.n	80042b2 <HAL_GPIO_Init+0x232>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_GPIO_Init+0x33c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01f      	beq.n	80042ae <HAL_GPIO_Init+0x22e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a53      	ldr	r2, [pc, #332]	; (80043c0 <HAL_GPIO_Init+0x340>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d019      	beq.n	80042aa <HAL_GPIO_Init+0x22a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_GPIO_Init+0x344>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_GPIO_Init+0x226>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a51      	ldr	r2, [pc, #324]	; (80043c8 <HAL_GPIO_Init+0x348>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00d      	beq.n	80042a2 <HAL_GPIO_Init+0x222>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a50      	ldr	r2, [pc, #320]	; (80043cc <HAL_GPIO_Init+0x34c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <HAL_GPIO_Init+0x21e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <HAL_GPIO_Init+0x350>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_GPIO_Init+0x21a>
 8004296:	2309      	movs	r3, #9
 8004298:	e012      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 800429a:	230a      	movs	r3, #10
 800429c:	e010      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 800429e:	2308      	movs	r3, #8
 80042a0:	e00e      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042a2:	2307      	movs	r3, #7
 80042a4:	e00c      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042a6:	2306      	movs	r3, #6
 80042a8:	e00a      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042aa:	2305      	movs	r3, #5
 80042ac:	e008      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042ae:	2304      	movs	r3, #4
 80042b0:	e006      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042b2:	2303      	movs	r3, #3
 80042b4:	e004      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e002      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_GPIO_Init+0x240>
 80042be:	2300      	movs	r3, #0
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f002 0203 	and.w	r2, r2, #3
 80042c6:	0092      	lsls	r2, r2, #2
 80042c8:	4093      	lsls	r3, r2
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042d0:	4935      	ldr	r1, [pc, #212]	; (80043a8 <HAL_GPIO_Init+0x328>)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	3302      	adds	r3, #2
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042de:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_GPIO_Init+0x354>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004302:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <HAL_GPIO_Init+0x354>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004308:	4b32      	ldr	r3, [pc, #200]	; (80043d4 <HAL_GPIO_Init+0x354>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800432c:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_GPIO_Init+0x354>)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004332:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_GPIO_Init+0x354>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004356:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <HAL_GPIO_Init+0x354>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_GPIO_Init+0x354>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <HAL_GPIO_Init+0x354>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	f67f ae86 	bls.w	80040a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40020000 	.word	0x40020000
 80043b0:	40020400 	.word	0x40020400
 80043b4:	40020800 	.word	0x40020800
 80043b8:	40020c00 	.word	0x40020c00
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40021400 	.word	0x40021400
 80043c4:	40021800 	.word	0x40021800
 80043c8:	40021c00 	.word	0x40021c00
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40022400 	.word	0x40022400
 80043d4:	40013c00 	.word	0x40013c00

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07f      	b.n	800451e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fbde 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800445c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	e006      	b.n	8004494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d104      	bne.n	80044a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_I2C_Init+0x11c>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	02008000 	.word	0x02008000

0800452c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	460b      	mov	r3, r1
 800453a:	817b      	strh	r3, [r7, #10]
 800453c:	4613      	mov	r3, r2
 800453e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b20      	cmp	r3, #32
 800454a:	f040 80da 	bne.w	8004702 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_I2C_Master_Transmit+0x30>
 8004558:	2302      	movs	r3, #2
 800455a:	e0d3      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1d8>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004564:	f7fd f8d8 	bl	8001718 <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	2319      	movs	r3, #25
 8004570:	2201      	movs	r2, #1
 8004572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fb4e 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0be      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2221      	movs	r2, #33	; 0x21
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2210      	movs	r2, #16
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	893a      	ldrh	r2, [r7, #8]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2bff      	cmp	r3, #255	; 0xff
 80045b6:	d90e      	bls.n	80045d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	8979      	ldrh	r1, [r7, #10]
 80045c6:	4b51      	ldr	r3, [pc, #324]	; (800470c <HAL_I2C_Master_Transmit+0x1e0>)
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fd38 	bl	8005044 <I2C_TransferConfig>
 80045d4:	e06c      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	8979      	ldrh	r1, [r7, #10]
 80045e8:	4b48      	ldr	r3, [pc, #288]	; (800470c <HAL_I2C_Master_Transmit+0x1e0>)
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fd27 	bl	8005044 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045f6:	e05b      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	6a39      	ldr	r1, [r7, #32]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fb4b 	bl	8004c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e07b      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d034      	beq.n	80046b0 <HAL_I2C_Master_Transmit+0x184>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d130      	bne.n	80046b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fadd 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04d      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2bff      	cmp	r3, #255	; 0xff
 8004670:	d90e      	bls.n	8004690 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	22ff      	movs	r2, #255	; 0xff
 8004676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	b2da      	uxtb	r2, r3
 800467e:	8979      	ldrh	r1, [r7, #10]
 8004680:	2300      	movs	r3, #0
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fcdb 	bl	8005044 <I2C_TransferConfig>
 800468e:	e00f      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	8979      	ldrh	r1, [r7, #10]
 80046a2:	2300      	movs	r3, #0
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fcca 	bl	8005044 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d19e      	bne.n	80045f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fb2a 	bl	8004d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01a      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2220      	movs	r2, #32
 80046d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_I2C_Master_Transmit+0x1e4>)
 80046e2:	400b      	ands	r3, r1
 80046e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	80002000 	.word	0x80002000
 8004710:	fe00e800 	.word	0xfe00e800

08004714 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	461a      	mov	r2, r3
 8004720:	460b      	mov	r3, r1
 8004722:	817b      	strh	r3, [r7, #10]
 8004724:	4613      	mov	r3, r2
 8004726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b20      	cmp	r3, #32
 8004732:	f040 80db 	bne.w	80048ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_I2C_Master_Receive+0x30>
 8004740:	2302      	movs	r3, #2
 8004742:	e0d4      	b.n	80048ee <HAL_I2C_Master_Receive+0x1da>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800474c:	f7fc ffe4 	bl	8001718 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	2319      	movs	r3, #25
 8004758:	2201      	movs	r2, #1
 800475a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fa5a 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0bf      	b.n	80048ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2222      	movs	r2, #34	; 0x22
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2210      	movs	r2, #16
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	893a      	ldrh	r2, [r7, #8]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	2bff      	cmp	r3, #255	; 0xff
 800479e:	d90e      	bls.n	80047be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	8979      	ldrh	r1, [r7, #10]
 80047ae:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <HAL_I2C_Master_Receive+0x1e4>)
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fc44 	bl	8005044 <I2C_TransferConfig>
 80047bc:	e06d      	b.n	800489a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	8979      	ldrh	r1, [r7, #10]
 80047d0:	4b49      	ldr	r3, [pc, #292]	; (80048f8 <HAL_I2C_Master_Receive+0x1e4>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fc33 	bl	8005044 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047de:	e05c      	b.n	800489a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6a39      	ldr	r1, [r7, #32]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fad3 	bl	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e07c      	b.n	80048ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d034      	beq.n	800489a <HAL_I2C_Master_Receive+0x186>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d130      	bne.n	800489a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f9e8 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e04d      	b.n	80048ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2bff      	cmp	r3, #255	; 0xff
 800485a:	d90e      	bls.n	800487a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	b2da      	uxtb	r2, r3
 8004868:	8979      	ldrh	r1, [r7, #10]
 800486a:	2300      	movs	r3, #0
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fbe6 	bl	8005044 <I2C_TransferConfig>
 8004878:	e00f      	b.n	800489a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	b2da      	uxtb	r2, r3
 800488a:	8979      	ldrh	r1, [r7, #10]
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fbd5 	bl	8005044 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d19d      	bne.n	80047e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	6a39      	ldr	r1, [r7, #32]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fa35 	bl	8004d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e01a      	b.n	80048ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2220      	movs	r2, #32
 80048be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <HAL_I2C_Master_Receive+0x1e8>)
 80048cc:	400b      	ands	r3, r1
 80048ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	80002400 	.word	0x80002400
 80048fc:	fe00e800 	.word	0xfe00e800

08004900 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	4608      	mov	r0, r1
 800490a:	4611      	mov	r1, r2
 800490c:	461a      	mov	r2, r3
 800490e:	4603      	mov	r3, r0
 8004910:	817b      	strh	r3, [r7, #10]
 8004912:	460b      	mov	r3, r1
 8004914:	813b      	strh	r3, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b20      	cmp	r3, #32
 8004924:	f040 80f9 	bne.w	8004b1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_I2C_Mem_Write+0x34>
 800492e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0ed      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_I2C_Mem_Write+0x4e>
 800494a:	2302      	movs	r3, #2
 800494c:	e0e6      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004956:	f7fc fedf 	bl	8001718 <HAL_GetTick>
 800495a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2319      	movs	r3, #25
 8004962:	2201      	movs	r2, #1
 8004964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f955 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0d1      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a3a      	ldr	r2, [r7, #32]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049a0:	88f8      	ldrh	r0, [r7, #6]
 80049a2:	893a      	ldrh	r2, [r7, #8]
 80049a4:	8979      	ldrh	r1, [r7, #10]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4603      	mov	r3, r0
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f8b9 	bl	8004b28 <I2C_RequestMemoryWrite>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0a9      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2bff      	cmp	r3, #255	; 0xff
 80049d0:	d90e      	bls.n	80049f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	8979      	ldrh	r1, [r7, #10]
 80049e0:	2300      	movs	r3, #0
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fb2b 	bl	8005044 <I2C_TransferConfig>
 80049ee:	e00f      	b.n	8004a10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	8979      	ldrh	r1, [r7, #10]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fb1a 	bl	8005044 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f93f 	bl	8004c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e07b      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d034      	beq.n	8004ac8 <HAL_I2C_Mem_Write+0x1c8>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d130      	bne.n	8004ac8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f8d1 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e04d      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d90e      	bls.n	8004aa8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	8979      	ldrh	r1, [r7, #10]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 facf 	bl	8005044 <I2C_TransferConfig>
 8004aa6:	e00f      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	8979      	ldrh	r1, [r7, #10]
 8004aba:	2300      	movs	r3, #0
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fabe 	bl	8005044 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d19e      	bne.n	8004a10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f91e 	bl	8004d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e01a      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2220      	movs	r2, #32
 8004aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_I2C_Mem_Write+0x224>)
 8004afa:	400b      	ands	r3, r1
 8004afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	fe00e800 	.word	0xfe00e800

08004b28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	817b      	strh	r3, [r7, #10]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	813b      	strh	r3, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <I2C_RequestMemoryWrite+0xa4>)
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa77 	bl	8005044 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f89c 	bl	8004c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02c      	b.n	8004bc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
 8004b7a:	e015      	b.n	8004ba8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b7c:	893b      	ldrh	r3, [r7, #8]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f882 	bl	8004c98 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e012      	b.n	8004bc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9e:	893b      	ldrh	r3, [r7, #8]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f830 	bl	8004c18 <I2C_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	80002000 	.word	0x80002000

08004bd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d103      	bne.n	8004bee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d007      	beq.n	8004c0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	619a      	str	r2, [r3, #24]
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c28:	e022      	b.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d01e      	beq.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fc fd71 	bl	8001718 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d113      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e00f      	b.n	8004c90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d0cd      	beq.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ca4:	e02c      	b.n	8004d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f8ea 	bl	8004e84 <I2C_IsErrorOccurred>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e02a      	b.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d01e      	beq.n	8004d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fc fd29 	bl	8001718 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d113      	bne.n	8004d00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e007      	b.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d1cb      	bne.n	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d24:	e028      	b.n	8004d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f8aa 	bl	8004e84 <I2C_IsErrorOccurred>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e026      	b.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fc fced 	bl	8001718 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d113      	bne.n	8004d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d1cf      	bne.n	8004d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d9c:	e064      	b.n	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f86e 	bl	8004e84 <I2C_IsErrorOccurred>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e062      	b.n	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d138      	bne.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d105      	bne.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e04e      	b.n	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d107      	bne.n	8004df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2210      	movs	r2, #16
 8004dee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2204      	movs	r2, #4
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
 8004df6:	e002      	b.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2220      	movs	r2, #32
 8004e04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004e12:	400b      	ands	r3, r1
 8004e14:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e022      	b.n	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fc fc71 	bl	8001718 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10f      	bne.n	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e007      	b.n	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d193      	bne.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	fe00e800 	.word	0xfe00e800

08004e84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d068      	beq.n	8004f82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2210      	movs	r2, #16
 8004eb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004eb8:	e049      	b.n	8004f4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d045      	beq.n	8004f4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fc fc29 	bl	8001718 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_IsErrorOccurred+0x54>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d13a      	bne.n	8004f4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efa:	d121      	bne.n	8004f40 <I2C_IsErrorOccurred+0xbc>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f02:	d01d      	beq.n	8004f40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d01a      	beq.n	8004f40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f1a:	f7fc fbfd 	bl	8001718 <HAL_GetTick>
 8004f1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f20:	e00e      	b.n	8004f40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f22:	f7fc fbf9 	bl	8001718 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b19      	cmp	r3, #25
 8004f2e:	d907      	bls.n	8004f40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f043 0320 	orr.w	r3, r3, #32
 8004f36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f3e:	e006      	b.n	8004f4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d1e9      	bne.n	8004f22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d003      	beq.n	8004f64 <I2C_IsErrorOccurred+0xe0>
 8004f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0aa      	beq.n	8004eba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2220      	movs	r2, #32
 8004f72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f043 0304 	orr.w	r3, r3, #4
 8004f7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f043 0308 	orr.w	r3, r3, #8
 8004fbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01c      	beq.n	8005032 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff fde9 	bl	8004bd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <I2C_IsErrorOccurred+0x1bc>)
 800500a:	400b      	ands	r3, r1
 800500c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	fe00e800 	.word	0xfe00e800

08005044 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	817b      	strh	r3, [r7, #10]
 8005052:	4613      	mov	r3, r2
 8005054:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800505c:	7a7b      	ldrb	r3, [r7, #9]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005064:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	4313      	orrs	r3, r2
 800506e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005072:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	0d5b      	lsrs	r3, r3, #21
 800507e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <I2C_TransferConfig+0x60>)
 8005084:	430b      	orrs	r3, r1
 8005086:	43db      	mvns	r3, r3
 8005088:	ea02 0103 	and.w	r1, r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	03ff63ff 	.word	0x03ff63ff

080050a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d138      	bne.n	8005130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e032      	b.n	8005132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	; 0x24
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6819      	ldr	r1, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d139      	bne.n	80051c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800515e:	2302      	movs	r3, #2
 8005160:	e033      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	; 0x24
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d8:	b08f      	sub	sp, #60	; 0x3c
 80051da:	af0a      	add	r7, sp, #40	; 0x28
 80051dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e116      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc f804 	bl	8001210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f002 fd0c 	bl	8007c44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	687e      	ldr	r6, [r7, #4]
 8005234:	466d      	mov	r5, sp
 8005236:	f106 0410 	add.w	r4, r6, #16
 800523a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005246:	e885 0003 	stmia.w	r5, {r0, r1}
 800524a:	1d33      	adds	r3, r6, #4
 800524c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800524e:	6838      	ldr	r0, [r7, #0]
 8005250:	f002 fca0 	bl	8007b94 <USB_CoreInit>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0d7      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f002 fcfa 	bl	8007c66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e04a      	b.n	800530e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	333d      	adds	r3, #61	; 0x3d
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	333c      	adds	r3, #60	; 0x3c
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	b298      	uxth	r0, r3
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3344      	adds	r3, #68	; 0x44
 80052b4:	4602      	mov	r2, r0
 80052b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3340      	adds	r3, #64	; 0x40
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3348      	adds	r3, #72	; 0x48
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	; 0x4c
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	3301      	adds	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d3af      	bcc.n	8005278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e044      	b.n	80053a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	3301      	adds	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3b5      	bcc.n	800531e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	687e      	ldr	r6, [r7, #4]
 80053ba:	466d      	mov	r5, sp
 80053bc:	f106 0410 	add.w	r4, r6, #16
 80053c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80053d0:	1d33      	adds	r3, r6, #4
 80053d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f002 fc93 	bl	8007d00 <USB_DevInit>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e014      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d102      	bne.n	800540a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f80b 	bl	8005420 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f002 fe51 	bl	80080b6 <USB_DevDisconnect>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_PCDEx_ActivateLPM+0x44>)
 8005450:	4313      	orrs	r3, r2
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	10000003 	.word	0x10000003

08005468 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40007000 	.word	0x40007000

08005488 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <HAL_PWREx_EnableOverDrive+0x98>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_PWREx_EnableOverDrive+0x98>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	; 0x40
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_PWREx_EnableOverDrive+0x98>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054aa:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054b6:	f7fc f92f 	bl	8001718 <HAL_GetTick>
 80054ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054bc:	e009      	b.n	80054d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054be:	f7fc f92b 	bl	8001718 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054cc:	d901      	bls.n	80054d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e022      	b.n	8005518 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d1ee      	bne.n	80054be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054ec:	f7fc f914 	bl	8001718 <HAL_GetTick>
 80054f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054f2:	e009      	b.n	8005508 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054f4:	f7fc f910 	bl	8001718 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005502:	d901      	bls.n	8005508 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e007      	b.n	8005518 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <HAL_PWREx_EnableOverDrive+0x9c>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005514:	d1ee      	bne.n	80054f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40023800 	.word	0x40023800
 8005524:	40007000 	.word	0x40007000

08005528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005530:	2300      	movs	r3, #0
 8005532:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e29b      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8087 	beq.w	800565a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800554c:	4b96      	ldr	r3, [pc, #600]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b04      	cmp	r3, #4
 8005556:	d00c      	beq.n	8005572 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005558:	4b93      	ldr	r3, [pc, #588]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b08      	cmp	r3, #8
 8005562:	d112      	bne.n	800558a <HAL_RCC_OscConfig+0x62>
 8005564:	4b90      	ldr	r3, [pc, #576]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005570:	d10b      	bne.n	800558a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005572:	4b8d      	ldr	r3, [pc, #564]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d06c      	beq.n	8005658 <HAL_RCC_OscConfig+0x130>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d168      	bne.n	8005658 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e275      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005592:	d106      	bne.n	80055a2 <HAL_RCC_OscConfig+0x7a>
 8005594:	4b84      	ldr	r3, [pc, #528]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a83      	ldr	r2, [pc, #524]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800559a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e02e      	b.n	8005600 <HAL_RCC_OscConfig+0xd8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x9c>
 80055aa:	4b7f      	ldr	r3, [pc, #508]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a7e      	ldr	r2, [pc, #504]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	4b7c      	ldr	r3, [pc, #496]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7b      	ldr	r2, [pc, #492]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e01d      	b.n	8005600 <HAL_RCC_OscConfig+0xd8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0xc0>
 80055ce:	4b76      	ldr	r3, [pc, #472]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a75      	ldr	r2, [pc, #468]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	4b73      	ldr	r3, [pc, #460]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a72      	ldr	r2, [pc, #456]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	e00b      	b.n	8005600 <HAL_RCC_OscConfig+0xd8>
 80055e8:	4b6f      	ldr	r3, [pc, #444]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a6e      	ldr	r2, [pc, #440]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a6b      	ldr	r2, [pc, #428]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80055fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d013      	beq.n	8005630 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005608:	f7fc f886 	bl	8001718 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005610:	f7fc f882 	bl	8001718 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	; 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e229      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0xe8>
 800562e:	e014      	b.n	800565a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fc f872 	bl	8001718 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005638:	f7fc f86e 	bl	8001718 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	; 0x64
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e215      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564a:	4b57      	ldr	r3, [pc, #348]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x110>
 8005656:	e000      	b.n	800565a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d069      	beq.n	800573a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005666:	4b50      	ldr	r3, [pc, #320]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005672:	4b4d      	ldr	r3, [pc, #308]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	2b08      	cmp	r3, #8
 800567c:	d11c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x190>
 800567e:	4b4a      	ldr	r3, [pc, #296]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d116      	bne.n	80056b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_RCC_OscConfig+0x17a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d001      	beq.n	80056a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e1e9      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	493d      	ldr	r1, [pc, #244]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056b6:	e040      	b.n	800573a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d023      	beq.n	8005708 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c0:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a38      	ldr	r2, [pc, #224]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc f824 	bl	8001718 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d4:	f7fc f820 	bl	8001718 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e1c7      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f2:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4929      	ldr	r1, [pc, #164]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005702:	4313      	orrs	r3, r2
 8005704:	600b      	str	r3, [r1, #0]
 8005706:	e018      	b.n	800573a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005708:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fc f800 	bl	8001718 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571c:	f7fb fffc 	bl	8001718 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e1a3      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572e:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d038      	beq.n	80057b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d019      	beq.n	8005782 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800574e:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fb ffdd 	bl	8001718 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005762:	f7fb ffd9 	bl	8001718 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e180      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x23a>
 8005780:	e01a      	b.n	80057b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_RCC_OscConfig+0x280>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578e:	f7fb ffc3 	bl	8001718 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005796:	f7fb ffbf 	bl	8001718 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d903      	bls.n	80057ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e166      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
 80057a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ac:	4b92      	ldr	r3, [pc, #584]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80057ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ee      	bne.n	8005796 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80a4 	beq.w	800590e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b8c      	ldr	r3, [pc, #560]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b89      	ldr	r3, [pc, #548]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	4a88      	ldr	r2, [pc, #544]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6413      	str	r3, [r2, #64]	; 0x40
 80057de:	4b86      	ldr	r3, [pc, #536]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ee:	4b83      	ldr	r3, [pc, #524]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d118      	bne.n	800582c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057fa:	4b80      	ldr	r3, [pc, #512]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a7f      	ldr	r2, [pc, #508]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
 8005800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005806:	f7fb ff87 	bl	8001718 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580e:	f7fb ff83 	bl	8001718 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b64      	cmp	r3, #100	; 0x64
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e12a      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005820:	4b76      	ldr	r3, [pc, #472]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d106      	bne.n	8005842 <HAL_RCC_OscConfig+0x31a>
 8005834:	4b70      	ldr	r3, [pc, #448]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a6f      	ldr	r2, [pc, #444]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	e02d      	b.n	800589e <HAL_RCC_OscConfig+0x376>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x33c>
 800584a:	4b6b      	ldr	r3, [pc, #428]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a6a      	ldr	r2, [pc, #424]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
 8005856:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a67      	ldr	r2, [pc, #412]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
 8005862:	e01c      	b.n	800589e <HAL_RCC_OscConfig+0x376>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b05      	cmp	r3, #5
 800586a:	d10c      	bne.n	8005886 <HAL_RCC_OscConfig+0x35e>
 800586c:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005870:	4a61      	ldr	r2, [pc, #388]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005872:	f043 0304 	orr.w	r3, r3, #4
 8005876:	6713      	str	r3, [r2, #112]	; 0x70
 8005878:	4b5f      	ldr	r3, [pc, #380]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6713      	str	r3, [r2, #112]	; 0x70
 8005884:	e00b      	b.n	800589e <HAL_RCC_OscConfig+0x376>
 8005886:	4b5c      	ldr	r3, [pc, #368]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	4a5b      	ldr	r2, [pc, #364]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	6713      	str	r3, [r2, #112]	; 0x70
 8005892:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a58      	ldr	r2, [pc, #352]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005898:	f023 0304 	bic.w	r3, r3, #4
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d015      	beq.n	80058d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a6:	f7fb ff37 	bl	8001718 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fb ff33 	bl	8001718 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0d8      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c4:	4b4c      	ldr	r3, [pc, #304]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ee      	beq.n	80058ae <HAL_RCC_OscConfig+0x386>
 80058d0:	e014      	b.n	80058fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fb ff21 	bl	8001718 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fb ff1d 	bl	8001718 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e0c2      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ee      	bne.n	80058da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005902:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	4a3c      	ldr	r2, [pc, #240]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80ae 	beq.w	8005a74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005918:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	2b08      	cmp	r3, #8
 8005922:	d06d      	beq.n	8005a00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d14b      	bne.n	80059c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a31      	ldr	r2, [pc, #196]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fb feee 	bl	8001718 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005940:	f7fb feea 	bl	8001718 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e091      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005952:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	019b      	lsls	r3, r3, #6
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	3b01      	subs	r3, #1
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	061b      	lsls	r3, r3, #24
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	071b      	lsls	r3, r3, #28
 800598a:	491b      	ldr	r1, [pc, #108]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 800598c:	4313      	orrs	r3, r2
 800598e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 8005996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fb febc 	bl	8001718 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fb feb8 	bl	8001718 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e05f      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b6:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x47c>
 80059c2:	e057      	b.n	8005a74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a0b      	ldr	r2, [pc, #44]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fb fea2 	bl	8001718 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fb fe9e 	bl	8001718 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e045      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ea:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <HAL_RCC_OscConfig+0x4d0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x4b0>
 80059f6:	e03d      	b.n	8005a74 <HAL_RCC_OscConfig+0x54c>
 80059f8:	40023800 	.word	0x40023800
 80059fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a00:	4b1f      	ldr	r3, [pc, #124]	; (8005a80 <HAL_RCC_OscConfig+0x558>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d030      	beq.n	8005a70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d129      	bne.n	8005a70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d122      	bne.n	8005a70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d119      	bne.n	8005a70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d10f      	bne.n	8005a70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800

08005a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0d0      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d910      	bls.n	8005acc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b67      	ldr	r3, [pc, #412]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 020f 	bic.w	r2, r3, #15
 8005ab2:	4965      	ldr	r1, [pc, #404]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b63      	ldr	r3, [pc, #396]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0b8      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ae4:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005afc:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a52      	ldr	r2, [pc, #328]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b08:	4b50      	ldr	r3, [pc, #320]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	494d      	ldr	r1, [pc, #308]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d040      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2e:	4b47      	ldr	r3, [pc, #284]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e07f      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b46:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e073      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b56:	4b3d      	ldr	r3, [pc, #244]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e06b      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4936      	ldr	r1, [pc, #216]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b78:	f7fb fdce 	bl	8001718 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fb fdca 	bl	8001718 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e053      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d210      	bcs.n	8005bd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f023 020f 	bic.w	r2, r3, #15
 8005bbe:	4922      	ldr	r1, [pc, #136]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e032      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4916      	ldr	r1, [pc, #88]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	490e      	ldr	r1, [pc, #56]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c16:	f000 f821 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_RCC_ClockConfig+0x1c8>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <HAL_RCC_ClockConfig+0x1cc>)
 8005c28:	5ccb      	ldrb	r3, [r1, r3]
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <HAL_RCC_ClockConfig+0x1d0>)
 8005c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCC_ClockConfig+0x1d4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fb fd2a 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40023c00 	.word	0x40023c00
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	080081ec 	.word	0x080081ec
 8005c54:	20000000 	.word	0x20000000
 8005c58:	200000fc 	.word	0x200000fc

08005c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c60:	b094      	sub	sp, #80	; 0x50
 8005c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	647b      	str	r3, [r7, #68]	; 0x44
 8005c68:	2300      	movs	r3, #0
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c74:	4b79      	ldr	r3, [pc, #484]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d00d      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x40>
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	f200 80e1 	bhi.w	8005e48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x34>
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d003      	beq.n	8005c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c8e:	e0db      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c90:	4b73      	ldr	r3, [pc, #460]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c94:	e0db      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c96:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c9a:	e0d8      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c9c:	4b6f      	ldr	r3, [pc, #444]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ca6:	4b6d      	ldr	r3, [pc, #436]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d063      	beq.n	8005d7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cb2:	4b6a      	ldr	r3, [pc, #424]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	099b      	lsrs	r3, r3, #6
 8005cb8:	2200      	movs	r2, #0
 8005cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005cce:	4622      	mov	r2, r4
 8005cd0:	462b      	mov	r3, r5
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f04f 0100 	mov.w	r1, #0
 8005cda:	0159      	lsls	r1, r3, #5
 8005cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ce0:	0150      	lsls	r0, r2, #5
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	1a51      	subs	r1, r2, r1
 8005cea:	6139      	str	r1, [r7, #16]
 8005cec:	4629      	mov	r1, r5
 8005cee:	eb63 0301 	sbc.w	r3, r3, r1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d00:	4659      	mov	r1, fp
 8005d02:	018b      	lsls	r3, r1, #6
 8005d04:	4651      	mov	r1, sl
 8005d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	018a      	lsls	r2, r1, #6
 8005d0e:	4651      	mov	r1, sl
 8005d10:	ebb2 0801 	subs.w	r8, r2, r1
 8005d14:	4659      	mov	r1, fp
 8005d16:	eb63 0901 	sbc.w	r9, r3, r1
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2e:	4690      	mov	r8, r2
 8005d30:	4699      	mov	r9, r3
 8005d32:	4623      	mov	r3, r4
 8005d34:	eb18 0303 	adds.w	r3, r8, r3
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	eb49 0303 	adc.w	r3, r9, r3
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d4e:	4629      	mov	r1, r5
 8005d50:	024b      	lsls	r3, r1, #9
 8005d52:	4621      	mov	r1, r4
 8005d54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d58:	4621      	mov	r1, r4
 8005d5a:	024a      	lsls	r2, r1, #9
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d62:	2200      	movs	r2, #0
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d6c:	f7fa fa64 	bl	8000238 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4613      	mov	r3, r2
 8005d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d78:	e058      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d7a:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	099b      	lsrs	r3, r3, #6
 8005d80:	2200      	movs	r2, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	4611      	mov	r1, r2
 8005d86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	f04f 0000 	mov.w	r0, #0
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	0159      	lsls	r1, r3, #5
 8005da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da6:	0150      	lsls	r0, r2, #5
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4641      	mov	r1, r8
 8005dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8005db2:	4649      	mov	r1, r9
 8005db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8005dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	00eb      	lsls	r3, r5, #3
 8005dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005de2:	00e2      	lsls	r2, r4, #3
 8005de4:	4614      	mov	r4, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	4643      	mov	r3, r8
 8005dea:	18e3      	adds	r3, r4, r3
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	464b      	mov	r3, r9
 8005df0:	eb45 0303 	adc.w	r3, r5, r3
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e02:	4629      	mov	r1, r5
 8005e04:	028b      	lsls	r3, r1, #10
 8005e06:	4621      	mov	r1, r4
 8005e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	028a      	lsls	r2, r1, #10
 8005e10:	4610      	mov	r0, r2
 8005e12:	4619      	mov	r1, r3
 8005e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e16:	2200      	movs	r2, #0
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	61fa      	str	r2, [r7, #28]
 8005e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e20:	f7fa fa0a 	bl	8000238 <__aeabi_uldivmod>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4613      	mov	r3, r2
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	3301      	adds	r3, #1
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e46:	e002      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3750      	adds	r7, #80	; 0x50
 8005e54:	46bd      	mov	sp, r7
 8005e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	00f42400 	.word	0x00f42400
 8005e64:	007a1200 	.word	0x007a1200

08005e68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e6c:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000000 	.word	0x20000000

08005e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e84:	f7ff fff0 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	0a9b      	lsrs	r3, r3, #10
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	4903      	ldr	r1, [pc, #12]	; (8005ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	080081fc 	.word	0x080081fc

08005ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eac:	f7ff ffdc 	bl	8005e68 <HAL_RCC_GetHCLKFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	0b5b      	lsrs	r3, r3, #13
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	4903      	ldr	r1, [pc, #12]	; (8005ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	080081fc 	.word	0x080081fc

08005ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ef8:	4b69      	ldr	r3, [pc, #420]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a68      	ldr	r2, [pc, #416]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f02:	6093      	str	r3, [r2, #8]
 8005f04:	4b66      	ldr	r3, [pc, #408]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	4964      	ldr	r1, [pc, #400]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f2a:	4b5d      	ldr	r3, [pc, #372]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	4959      	ldr	r1, [pc, #356]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f48:	d101      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d017      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f66:	4b4e      	ldr	r3, [pc, #312]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	494a      	ldr	r1, [pc, #296]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f84:	d101      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f86:	2301      	movs	r3, #1
 8005f88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 808b 	beq.w	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fb4:	4b3a      	ldr	r3, [pc, #232]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	4a39      	ldr	r2, [pc, #228]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc0:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fcc:	4b35      	ldr	r3, [pc, #212]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a34      	ldr	r2, [pc, #208]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd8:	f7fb fb9e 	bl	8001718 <HAL_GetTick>
 8005fdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe0:	f7fb fb9a 	bl	8001718 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	; 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e38f      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ffe:	4b28      	ldr	r3, [pc, #160]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d035      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	429a      	cmp	r2, r3
 800601a:	d02e      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800601c:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006026:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a1a      	ldr	r2, [pc, #104]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800603e:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d114      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fb fb62 	bl	8001718 <HAL_GetTick>
 8006054:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006056:	e00a      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fb fb5e 	bl	8001718 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e351      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ee      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006086:	d111      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006096:	400b      	ands	r3, r1
 8006098:	4901      	ldr	r1, [pc, #4]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
 800609e:	e00b      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40007000 	.word	0x40007000
 80060a8:	0ffffcff 	.word	0x0ffffcff
 80060ac:	4bac      	ldr	r3, [pc, #688]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4aab      	ldr	r2, [pc, #684]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060b6:	6093      	str	r3, [r2, #8]
 80060b8:	4ba9      	ldr	r3, [pc, #676]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c4:	49a6      	ldr	r1, [pc, #664]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d010      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060d6:	4ba2      	ldr	r3, [pc, #648]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060dc:	4aa0      	ldr	r2, [pc, #640]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060e6:	4b9e      	ldr	r3, [pc, #632]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	499b      	ldr	r1, [pc, #620]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006104:	4b96      	ldr	r3, [pc, #600]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006112:	4993      	ldr	r1, [pc, #588]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006126:	4b8e      	ldr	r3, [pc, #568]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006134:	498a      	ldr	r1, [pc, #552]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006148:	4b85      	ldr	r3, [pc, #532]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006156:	4982      	ldr	r1, [pc, #520]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800616a:	4b7d      	ldr	r3, [pc, #500]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006170:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	4979      	ldr	r1, [pc, #484]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800618c:	4b74      	ldr	r3, [pc, #464]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f023 0203 	bic.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	4971      	ldr	r1, [pc, #452]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061ae:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b4:	f023 020c 	bic.w	r2, r3, #12
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061bc:	4968      	ldr	r1, [pc, #416]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061d0:	4b63      	ldr	r3, [pc, #396]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061de:	4960      	ldr	r1, [pc, #384]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061f2:	4b5b      	ldr	r3, [pc, #364]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	4957      	ldr	r1, [pc, #348]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006214:	4b52      	ldr	r3, [pc, #328]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	494f      	ldr	r1, [pc, #316]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006236:	4b4a      	ldr	r3, [pc, #296]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	4946      	ldr	r1, [pc, #280]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006258:	4b41      	ldr	r3, [pc, #260]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006266:	493e      	ldr	r1, [pc, #248]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800627a:	4b39      	ldr	r3, [pc, #228]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006288:	4935      	ldr	r1, [pc, #212]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800629c:	4b30      	ldr	r3, [pc, #192]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062aa:	492d      	ldr	r1, [pc, #180]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d011      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062be:	4b28      	ldr	r3, [pc, #160]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062cc:	4924      	ldr	r1, [pc, #144]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062dc:	d101      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062fe:	4b18      	ldr	r3, [pc, #96]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630c:	4914      	ldr	r1, [pc, #80]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006330:	490b      	ldr	r1, [pc, #44]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006354:	4902      	ldr	r1, [pc, #8]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800635c:	e002      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800635e:	bf00      	nop
 8006360:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006370:	4b8a      	ldr	r3, [pc, #552]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006376:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	4986      	ldr	r1, [pc, #536]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006394:	4b81      	ldr	r3, [pc, #516]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a4:	497d      	ldr	r1, [pc, #500]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d006      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80d6 	beq.w	800656c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063c0:	4b76      	ldr	r3, [pc, #472]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a75      	ldr	r2, [pc, #468]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063cc:	f7fb f9a4 	bl	8001718 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063d4:	f7fb f9a0 	bl	8001718 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b64      	cmp	r3, #100	; 0x64
 80063e0:	d901      	bls.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e195      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063e6:	4b6d      	ldr	r3, [pc, #436]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d021      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	2b00      	cmp	r3, #0
 8006404:	d11d      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006406:	4b65      	ldr	r3, [pc, #404]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006414:	4b61      	ldr	r3, [pc, #388]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641a:	0e1b      	lsrs	r3, r3, #24
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	019a      	lsls	r2, r3, #6
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	041b      	lsls	r3, r3, #16
 800642c:	431a      	orrs	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	4958      	ldr	r1, [pc, #352]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006460:	2b00      	cmp	r3, #0
 8006462:	d02e      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800646c:	d129      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800646e:	4b4b      	ldr	r3, [pc, #300]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800647c:	4b47      	ldr	r3, [pc, #284]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800647e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006482:	0f1b      	lsrs	r3, r3, #28
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	019a      	lsls	r2, r3, #6
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	071b      	lsls	r3, r3, #28
 80064a2:	493e      	ldr	r1, [pc, #248]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064aa:	4b3c      	ldr	r3, [pc, #240]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064b0:	f023 021f 	bic.w	r2, r3, #31
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	3b01      	subs	r3, #1
 80064ba:	4938      	ldr	r1, [pc, #224]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01d      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064ce:	4b33      	ldr	r3, [pc, #204]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d4:	0e1b      	lsrs	r3, r3, #24
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064dc:	4b2f      	ldr	r3, [pc, #188]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e2:	0f1b      	lsrs	r3, r3, #28
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	019a      	lsls	r2, r3, #6
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	431a      	orrs	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	061b      	lsls	r3, r3, #24
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	071b      	lsls	r3, r3, #28
 8006502:	4926      	ldr	r1, [pc, #152]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d011      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	019a      	lsls	r2, r3, #6
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	071b      	lsls	r3, r3, #28
 8006532:	491a      	ldr	r1, [pc, #104]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a17      	ldr	r2, [pc, #92]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006546:	f7fb f8e7 	bl	8001718 <HAL_GetTick>
 800654a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800654c:	e008      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800654e:	f7fb f8e3 	bl	8001718 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b64      	cmp	r3, #100	; 0x64
 800655a:	d901      	bls.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e0d8      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b01      	cmp	r3, #1
 8006570:	f040 80ce 	bne.w	8006710 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a08      	ldr	r2, [pc, #32]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800657a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800657e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006580:	f7fb f8ca 	bl	8001718 <HAL_GetTick>
 8006584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006586:	e00b      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006588:	f7fb f8c6 	bl	8001718 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b64      	cmp	r3, #100	; 0x64
 8006594:	d904      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e0bb      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065a0:	4b5e      	ldr	r3, [pc, #376]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ac:	d0ec      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02e      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d12a      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065d6:	4b51      	ldr	r3, [pc, #324]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065e4:	4b4d      	ldr	r3, [pc, #308]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	0f1b      	lsrs	r3, r3, #28
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	019a      	lsls	r2, r3, #6
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	041b      	lsls	r3, r3, #16
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	431a      	orrs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	071b      	lsls	r3, r3, #28
 800660a:	4944      	ldr	r1, [pc, #272]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006612:	4b42      	ldr	r3, [pc, #264]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	493d      	ldr	r1, [pc, #244]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d022      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006640:	d11d      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006642:	4b36      	ldr	r3, [pc, #216]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006648:	0e1b      	lsrs	r3, r3, #24
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006650:	4b32      	ldr	r3, [pc, #200]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006656:	0f1b      	lsrs	r3, r3, #28
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	019a      	lsls	r2, r3, #6
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	041b      	lsls	r3, r3, #16
 800666a:	431a      	orrs	r2, r3
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	431a      	orrs	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	071b      	lsls	r3, r3, #28
 8006676:	4929      	ldr	r1, [pc, #164]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d028      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800668a:	4b24      	ldr	r3, [pc, #144]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006690:	0e1b      	lsrs	r3, r3, #24
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006698:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	019a      	lsls	r2, r3, #6
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	431a      	orrs	r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	061b      	lsls	r3, r3, #24
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	071b      	lsls	r3, r3, #28
 80066be:	4917      	ldr	r1, [pc, #92]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	4911      	ldr	r1, [pc, #68]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0e      	ldr	r2, [pc, #56]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e8:	f7fb f816 	bl	8001718 <HAL_GetTick>
 80066ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066f0:	f7fb f812 	bl	8001718 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b64      	cmp	r3, #100	; 0x64
 80066fc:	d901      	bls.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e007      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670e:	d1ef      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800

08006720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e049      	b.n	80067c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fa fc4c 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f000 fa0a 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e049      	b.n	8006874 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f841 	bl	800687c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3304      	adds	r3, #4
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f000 f9b3 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <HAL_TIM_OC_Start+0x24>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e03c      	b.n	800692e <HAL_TIM_OC_Start+0x9e>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d109      	bne.n	80068ce <HAL_TIM_OC_Start+0x3e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	e02f      	b.n	800692e <HAL_TIM_OC_Start+0x9e>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d109      	bne.n	80068e8 <HAL_TIM_OC_Start+0x58>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e022      	b.n	800692e <HAL_TIM_OC_Start+0x9e>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b0c      	cmp	r3, #12
 80068ec:	d109      	bne.n	8006902 <HAL_TIM_OC_Start+0x72>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	e015      	b.n	800692e <HAL_TIM_OC_Start+0x9e>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b10      	cmp	r3, #16
 8006906:	d109      	bne.n	800691c <HAL_TIM_OC_Start+0x8c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	bf14      	ite	ne
 8006914:	2301      	movne	r3, #1
 8006916:	2300      	moveq	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e008      	b.n	800692e <HAL_TIM_OC_Start+0x9e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e092      	b.n	8006a5c <HAL_TIM_OC_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_TIM_OC_Start+0xb6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006944:	e023      	b.n	800698e <HAL_TIM_OC_Start+0xfe>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b04      	cmp	r3, #4
 800694a:	d104      	bne.n	8006956 <HAL_TIM_OC_Start+0xc6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006954:	e01b      	b.n	800698e <HAL_TIM_OC_Start+0xfe>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b08      	cmp	r3, #8
 800695a:	d104      	bne.n	8006966 <HAL_TIM_OC_Start+0xd6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006964:	e013      	b.n	800698e <HAL_TIM_OC_Start+0xfe>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	d104      	bne.n	8006976 <HAL_TIM_OC_Start+0xe6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006974:	e00b      	b.n	800698e <HAL_TIM_OC_Start+0xfe>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b10      	cmp	r3, #16
 800697a:	d104      	bne.n	8006986 <HAL_TIM_OC_Start+0xf6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006984:	e003      	b.n	800698e <HAL_TIM_OC_Start+0xfe>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2201      	movs	r2, #1
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fbec 	bl	8007174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a30      	ldr	r2, [pc, #192]	; (8006a64 <HAL_TIM_OC_Start+0x1d4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIM_OC_Start+0x120>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a2f      	ldr	r2, [pc, #188]	; (8006a68 <HAL_TIM_OC_Start+0x1d8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d101      	bne.n	80069b4 <HAL_TIM_OC_Start+0x124>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_TIM_OC_Start+0x126>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <HAL_TIM_OC_Start+0x1d4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d022      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069dc:	d01d      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a22      	ldr	r2, [pc, #136]	; (8006a6c <HAL_TIM_OC_Start+0x1dc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <HAL_TIM_OC_Start+0x1e0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <HAL_TIM_OC_Start+0x1e4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <HAL_TIM_OC_Start+0x1d8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <HAL_TIM_OC_Start+0x1e8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIM_OC_Start+0x18a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a19      	ldr	r2, [pc, #100]	; (8006a7c <HAL_TIM_OC_Start+0x1ec>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d115      	bne.n	8006a46 <HAL_TIM_OC_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <HAL_TIM_OC_Start+0x1f0>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b06      	cmp	r3, #6
 8006a2a:	d015      	beq.n	8006a58 <HAL_TIM_OC_Start+0x1c8>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a32:	d011      	beq.n	8006a58 <HAL_TIM_OC_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a44:	e008      	b.n	8006a58 <HAL_TIM_OC_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e000      	b.n	8006a5a <HAL_TIM_OC_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400
 8006a6c:	40000400 	.word	0x40000400
 8006a70:	40000800 	.word	0x40000800
 8006a74:	40000c00 	.word	0x40000c00
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40001800 	.word	0x40001800
 8006a80:	00010007 	.word	0x00010007

08006a84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e066      	b.n	8006b70 <HAL_TIM_OC_ConfigChannel+0xec>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b14      	cmp	r3, #20
 8006aae:	d857      	bhi.n	8006b60 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006b61 	.word	0x08006b61
 8006ac0:	08006b61 	.word	0x08006b61
 8006ac4:	08006b61 	.word	0x08006b61
 8006ac8:	08006b1b 	.word	0x08006b1b
 8006acc:	08006b61 	.word	0x08006b61
 8006ad0:	08006b61 	.word	0x08006b61
 8006ad4:	08006b61 	.word	0x08006b61
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	08006b61 	.word	0x08006b61
 8006ae0:	08006b61 	.word	0x08006b61
 8006ae4:	08006b61 	.word	0x08006b61
 8006ae8:	08006b37 	.word	0x08006b37
 8006aec:	08006b61 	.word	0x08006b61
 8006af0:	08006b61 	.word	0x08006b61
 8006af4:	08006b61 	.word	0x08006b61
 8006af8:	08006b45 	.word	0x08006b45
 8006afc:	08006b61 	.word	0x08006b61
 8006b00:	08006b61 	.word	0x08006b61
 8006b04:	08006b61 	.word	0x08006b61
 8006b08:	08006b53 	.word	0x08006b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f8d0 	bl	8006cb8 <TIM_OC1_SetConfig>
      break;
 8006b18:	e025      	b.n	8006b66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 f93b 	bl	8006d9c <TIM_OC2_SetConfig>
      break;
 8006b26:	e01e      	b.n	8006b66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f9ac 	bl	8006e8c <TIM_OC3_SetConfig>
      break;
 8006b34:	e017      	b.n	8006b66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fa1b 	bl	8006f78 <TIM_OC4_SetConfig>
      break;
 8006b42:	e010      	b.n	8006b66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fa6c 	bl	8007028 <TIM_OC5_SetConfig>
      break;
 8006b50:	e009      	b.n	8006b66 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fab7 	bl	80070cc <TIM_OC6_SetConfig>
      break;
 8006b5e:	e002      	b.n	8006b66 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
      break;
 8006b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a40      	ldr	r2, [pc, #256]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b96:	d00f      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <TIM_Base_SetConfig+0x118>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3c      	ldr	r2, [pc, #240]	; (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3b      	ldr	r2, [pc, #236]	; (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a3a      	ldr	r2, [pc, #232]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2f      	ldr	r2, [pc, #188]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d027      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2c      	ldr	r2, [pc, #176]	; (8006c90 <TIM_Base_SetConfig+0x118>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d023      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2b      	ldr	r2, [pc, #172]	; (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <TIM_Base_SetConfig+0x128>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a27      	ldr	r2, [pc, #156]	; (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <TIM_Base_SetConfig+0x130>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a25      	ldr	r2, [pc, #148]	; (8006cac <TIM_Base_SetConfig+0x134>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a24      	ldr	r2, [pc, #144]	; (8006cb0 <TIM_Base_SetConfig+0x138>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <TIM_Base_SetConfig+0x13c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40010400 	.word	0x40010400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	40001800 	.word	0x40001800
 8006cb0:	40001c00 	.word	0x40001c00
 8006cb4:	40002000 	.word	0x40002000

08006cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <TIM_OC1_SetConfig+0xd8>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 0302 	bic.w	r3, r3, #2
 8006d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <TIM_OC1_SetConfig+0xdc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC1_SetConfig+0x64>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <TIM_OC1_SetConfig+0xe0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d10c      	bne.n	8006d36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0308 	bic.w	r3, r3, #8
 8006d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <TIM_OC1_SetConfig+0xdc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC1_SetConfig+0x8e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <TIM_OC1_SetConfig+0xe0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d111      	bne.n	8006d6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	621a      	str	r2, [r3, #32]
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	fffeff8f 	.word	0xfffeff8f
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400

08006d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f023 0210 	bic.w	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <TIM_OC2_SetConfig+0xe4>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0320 	bic.w	r3, r3, #32
 8006de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x68>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a22      	ldr	r2, [pc, #136]	; (8006e88 <TIM_OC2_SetConfig+0xec>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d10d      	bne.n	8006e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <TIM_OC2_SetConfig+0xe8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC2_SetConfig+0x94>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <TIM_OC2_SetConfig+0xec>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d113      	bne.n	8006e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	feff8fff 	.word	0xfeff8fff
 8006e84:	40010000 	.word	0x40010000
 8006e88:	40010400 	.word	0x40010400

08006e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <TIM_OC3_SetConfig+0xe0>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a22      	ldr	r2, [pc, #136]	; (8006f70 <TIM_OC3_SetConfig+0xe4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC3_SetConfig+0x66>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <TIM_OC3_SetConfig+0xe8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d10d      	bne.n	8006f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <TIM_OC3_SetConfig+0xe4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC3_SetConfig+0x92>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a16      	ldr	r2, [pc, #88]	; (8006f74 <TIM_OC3_SetConfig+0xe8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d113      	bne.n	8006f46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	fffeff8f 	.word	0xfffeff8f
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400

08006f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4b1e      	ldr	r3, [pc, #120]	; (800701c <TIM_OC4_SetConfig+0xa4>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <TIM_OC4_SetConfig+0xa8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x68>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a12      	ldr	r2, [pc, #72]	; (8007024 <TIM_OC4_SetConfig+0xac>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d109      	bne.n	8006ff4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	019b      	lsls	r3, r3, #6
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	feff8fff 	.word	0xfeff8fff
 8007020:	40010000 	.word	0x40010000
 8007024:	40010400 	.word	0x40010400

08007028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4b1b      	ldr	r3, [pc, #108]	; (80070c0 <TIM_OC5_SetConfig+0x98>)
 8007054:	4013      	ands	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <TIM_OC5_SetConfig+0x9c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC5_SetConfig+0x5e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a11      	ldr	r2, [pc, #68]	; (80070c8 <TIM_OC5_SetConfig+0xa0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d109      	bne.n	800709a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	fffeff8f 	.word	0xfffeff8f
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40010400 	.word	0x40010400

080070cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <TIM_OC6_SetConfig+0x9c>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800710e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	051b      	lsls	r3, r3, #20
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a13      	ldr	r2, [pc, #76]	; (800716c <TIM_OC6_SetConfig+0xa0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_OC6_SetConfig+0x60>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <TIM_OC6_SetConfig+0xa4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d109      	bne.n	8007140 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	029b      	lsls	r3, r3, #10
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	feff8fff 	.word	0xfeff8fff
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400

08007174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2201      	movs	r2, #1
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a1a      	ldr	r2, [r3, #32]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	43db      	mvns	r3, r3
 8007196:	401a      	ands	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1a      	ldr	r2, [r3, #32]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e040      	b.n	8007252 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7f9 ff87 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2224      	movs	r2, #36	; 0x24
 80071ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8af 	bl	8007360 <UART_SetConfig>
 8007202:	4603      	mov	r3, r0
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e022      	b.n	8007252 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb07 	bl	8007828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007228:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007238:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fb8e 	bl	800796c <UART_CheckIdleState>
 8007250:	4603      	mov	r3, r0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b08a      	sub	sp, #40	; 0x28
 800725e:	af02      	add	r7, sp, #8
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800726e:	2b20      	cmp	r3, #32
 8007270:	d171      	bne.n	8007356 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_UART_Transmit+0x24>
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e06a      	b.n	8007358 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2221      	movs	r2, #33	; 0x21
 800728e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007290:	f7fa fa42 	bl	8001718 <HAL_GetTick>
 8007294:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ae:	d108      	bne.n	80072c2 <HAL_UART_Transmit+0x68>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e003      	b.n	80072ca <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072ca:	e02c      	b.n	8007326 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2200      	movs	r2, #0
 80072d4:	2180      	movs	r1, #128	; 0x80
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb95 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e038      	b.n	8007358 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	3302      	adds	r3, #2
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	e007      	b.n	8007314 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	3301      	adds	r3, #1
 8007312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1cc      	bne.n	80072cc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2200      	movs	r2, #0
 800733a:	2140      	movs	r1, #64	; 0x40
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fb62 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e005      	b.n	8007358 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	e000      	b.n	8007358 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007356:	2302      	movs	r3, #2
  }
}
 8007358:	4618      	mov	r0, r3
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4ba6      	ldr	r3, [pc, #664]	; (8007624 <UART_SetConfig+0x2c4>)
 800738c:	4013      	ands	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	430b      	orrs	r3, r1
 8007396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a94      	ldr	r2, [pc, #592]	; (8007628 <UART_SetConfig+0x2c8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d120      	bne.n	800741e <UART_SetConfig+0xbe>
 80073dc:	4b93      	ldr	r3, [pc, #588]	; (800762c <UART_SetConfig+0x2cc>)
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d816      	bhi.n	8007418 <UART_SetConfig+0xb8>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <UART_SetConfig+0x90>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007401 	.word	0x08007401
 80073f4:	0800740d 	.word	0x0800740d
 80073f8:	08007407 	.word	0x08007407
 80073fc:	08007413 	.word	0x08007413
 8007400:	2301      	movs	r3, #1
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e150      	b.n	80076a8 <UART_SetConfig+0x348>
 8007406:	2302      	movs	r3, #2
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e14d      	b.n	80076a8 <UART_SetConfig+0x348>
 800740c:	2304      	movs	r3, #4
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e14a      	b.n	80076a8 <UART_SetConfig+0x348>
 8007412:	2308      	movs	r3, #8
 8007414:	77fb      	strb	r3, [r7, #31]
 8007416:	e147      	b.n	80076a8 <UART_SetConfig+0x348>
 8007418:	2310      	movs	r3, #16
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e144      	b.n	80076a8 <UART_SetConfig+0x348>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a83      	ldr	r2, [pc, #524]	; (8007630 <UART_SetConfig+0x2d0>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d132      	bne.n	800748e <UART_SetConfig+0x12e>
 8007428:	4b80      	ldr	r3, [pc, #512]	; (800762c <UART_SetConfig+0x2cc>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	f003 030c 	and.w	r3, r3, #12
 8007432:	2b0c      	cmp	r3, #12
 8007434:	d828      	bhi.n	8007488 <UART_SetConfig+0x128>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0xdc>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007471 	.word	0x08007471
 8007440:	08007489 	.word	0x08007489
 8007444:	08007489 	.word	0x08007489
 8007448:	08007489 	.word	0x08007489
 800744c:	0800747d 	.word	0x0800747d
 8007450:	08007489 	.word	0x08007489
 8007454:	08007489 	.word	0x08007489
 8007458:	08007489 	.word	0x08007489
 800745c:	08007477 	.word	0x08007477
 8007460:	08007489 	.word	0x08007489
 8007464:	08007489 	.word	0x08007489
 8007468:	08007489 	.word	0x08007489
 800746c:	08007483 	.word	0x08007483
 8007470:	2300      	movs	r3, #0
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e118      	b.n	80076a8 <UART_SetConfig+0x348>
 8007476:	2302      	movs	r3, #2
 8007478:	77fb      	strb	r3, [r7, #31]
 800747a:	e115      	b.n	80076a8 <UART_SetConfig+0x348>
 800747c:	2304      	movs	r3, #4
 800747e:	77fb      	strb	r3, [r7, #31]
 8007480:	e112      	b.n	80076a8 <UART_SetConfig+0x348>
 8007482:	2308      	movs	r3, #8
 8007484:	77fb      	strb	r3, [r7, #31]
 8007486:	e10f      	b.n	80076a8 <UART_SetConfig+0x348>
 8007488:	2310      	movs	r3, #16
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e10c      	b.n	80076a8 <UART_SetConfig+0x348>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a68      	ldr	r2, [pc, #416]	; (8007634 <UART_SetConfig+0x2d4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d120      	bne.n	80074da <UART_SetConfig+0x17a>
 8007498:	4b64      	ldr	r3, [pc, #400]	; (800762c <UART_SetConfig+0x2cc>)
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074a2:	2b30      	cmp	r3, #48	; 0x30
 80074a4:	d013      	beq.n	80074ce <UART_SetConfig+0x16e>
 80074a6:	2b30      	cmp	r3, #48	; 0x30
 80074a8:	d814      	bhi.n	80074d4 <UART_SetConfig+0x174>
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d009      	beq.n	80074c2 <UART_SetConfig+0x162>
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d810      	bhi.n	80074d4 <UART_SetConfig+0x174>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <UART_SetConfig+0x15c>
 80074b6:	2b10      	cmp	r3, #16
 80074b8:	d006      	beq.n	80074c8 <UART_SetConfig+0x168>
 80074ba:	e00b      	b.n	80074d4 <UART_SetConfig+0x174>
 80074bc:	2300      	movs	r3, #0
 80074be:	77fb      	strb	r3, [r7, #31]
 80074c0:	e0f2      	b.n	80076a8 <UART_SetConfig+0x348>
 80074c2:	2302      	movs	r3, #2
 80074c4:	77fb      	strb	r3, [r7, #31]
 80074c6:	e0ef      	b.n	80076a8 <UART_SetConfig+0x348>
 80074c8:	2304      	movs	r3, #4
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e0ec      	b.n	80076a8 <UART_SetConfig+0x348>
 80074ce:	2308      	movs	r3, #8
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e0e9      	b.n	80076a8 <UART_SetConfig+0x348>
 80074d4:	2310      	movs	r3, #16
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e0e6      	b.n	80076a8 <UART_SetConfig+0x348>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a56      	ldr	r2, [pc, #344]	; (8007638 <UART_SetConfig+0x2d8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d120      	bne.n	8007526 <UART_SetConfig+0x1c6>
 80074e4:	4b51      	ldr	r3, [pc, #324]	; (800762c <UART_SetConfig+0x2cc>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074ee:	2bc0      	cmp	r3, #192	; 0xc0
 80074f0:	d013      	beq.n	800751a <UART_SetConfig+0x1ba>
 80074f2:	2bc0      	cmp	r3, #192	; 0xc0
 80074f4:	d814      	bhi.n	8007520 <UART_SetConfig+0x1c0>
 80074f6:	2b80      	cmp	r3, #128	; 0x80
 80074f8:	d009      	beq.n	800750e <UART_SetConfig+0x1ae>
 80074fa:	2b80      	cmp	r3, #128	; 0x80
 80074fc:	d810      	bhi.n	8007520 <UART_SetConfig+0x1c0>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <UART_SetConfig+0x1a8>
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d006      	beq.n	8007514 <UART_SetConfig+0x1b4>
 8007506:	e00b      	b.n	8007520 <UART_SetConfig+0x1c0>
 8007508:	2300      	movs	r3, #0
 800750a:	77fb      	strb	r3, [r7, #31]
 800750c:	e0cc      	b.n	80076a8 <UART_SetConfig+0x348>
 800750e:	2302      	movs	r3, #2
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e0c9      	b.n	80076a8 <UART_SetConfig+0x348>
 8007514:	2304      	movs	r3, #4
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	e0c6      	b.n	80076a8 <UART_SetConfig+0x348>
 800751a:	2308      	movs	r3, #8
 800751c:	77fb      	strb	r3, [r7, #31]
 800751e:	e0c3      	b.n	80076a8 <UART_SetConfig+0x348>
 8007520:	2310      	movs	r3, #16
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e0c0      	b.n	80076a8 <UART_SetConfig+0x348>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a44      	ldr	r2, [pc, #272]	; (800763c <UART_SetConfig+0x2dc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d125      	bne.n	800757c <UART_SetConfig+0x21c>
 8007530:	4b3e      	ldr	r3, [pc, #248]	; (800762c <UART_SetConfig+0x2cc>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753e:	d017      	beq.n	8007570 <UART_SetConfig+0x210>
 8007540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007544:	d817      	bhi.n	8007576 <UART_SetConfig+0x216>
 8007546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754a:	d00b      	beq.n	8007564 <UART_SetConfig+0x204>
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d811      	bhi.n	8007576 <UART_SetConfig+0x216>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <UART_SetConfig+0x1fe>
 8007556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755a:	d006      	beq.n	800756a <UART_SetConfig+0x20a>
 800755c:	e00b      	b.n	8007576 <UART_SetConfig+0x216>
 800755e:	2300      	movs	r3, #0
 8007560:	77fb      	strb	r3, [r7, #31]
 8007562:	e0a1      	b.n	80076a8 <UART_SetConfig+0x348>
 8007564:	2302      	movs	r3, #2
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e09e      	b.n	80076a8 <UART_SetConfig+0x348>
 800756a:	2304      	movs	r3, #4
 800756c:	77fb      	strb	r3, [r7, #31]
 800756e:	e09b      	b.n	80076a8 <UART_SetConfig+0x348>
 8007570:	2308      	movs	r3, #8
 8007572:	77fb      	strb	r3, [r7, #31]
 8007574:	e098      	b.n	80076a8 <UART_SetConfig+0x348>
 8007576:	2310      	movs	r3, #16
 8007578:	77fb      	strb	r3, [r7, #31]
 800757a:	e095      	b.n	80076a8 <UART_SetConfig+0x348>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <UART_SetConfig+0x2e0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d125      	bne.n	80075d2 <UART_SetConfig+0x272>
 8007586:	4b29      	ldr	r3, [pc, #164]	; (800762c <UART_SetConfig+0x2cc>)
 8007588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007594:	d017      	beq.n	80075c6 <UART_SetConfig+0x266>
 8007596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800759a:	d817      	bhi.n	80075cc <UART_SetConfig+0x26c>
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a0:	d00b      	beq.n	80075ba <UART_SetConfig+0x25a>
 80075a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a6:	d811      	bhi.n	80075cc <UART_SetConfig+0x26c>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <UART_SetConfig+0x254>
 80075ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b0:	d006      	beq.n	80075c0 <UART_SetConfig+0x260>
 80075b2:	e00b      	b.n	80075cc <UART_SetConfig+0x26c>
 80075b4:	2301      	movs	r3, #1
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e076      	b.n	80076a8 <UART_SetConfig+0x348>
 80075ba:	2302      	movs	r3, #2
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e073      	b.n	80076a8 <UART_SetConfig+0x348>
 80075c0:	2304      	movs	r3, #4
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e070      	b.n	80076a8 <UART_SetConfig+0x348>
 80075c6:	2308      	movs	r3, #8
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e06d      	b.n	80076a8 <UART_SetConfig+0x348>
 80075cc:	2310      	movs	r3, #16
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e06a      	b.n	80076a8 <UART_SetConfig+0x348>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1b      	ldr	r2, [pc, #108]	; (8007644 <UART_SetConfig+0x2e4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d138      	bne.n	800764e <UART_SetConfig+0x2ee>
 80075dc:	4b13      	ldr	r3, [pc, #76]	; (800762c <UART_SetConfig+0x2cc>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80075e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075ea:	d017      	beq.n	800761c <UART_SetConfig+0x2bc>
 80075ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075f0:	d82a      	bhi.n	8007648 <UART_SetConfig+0x2e8>
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f6:	d00b      	beq.n	8007610 <UART_SetConfig+0x2b0>
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fc:	d824      	bhi.n	8007648 <UART_SetConfig+0x2e8>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <UART_SetConfig+0x2aa>
 8007602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007606:	d006      	beq.n	8007616 <UART_SetConfig+0x2b6>
 8007608:	e01e      	b.n	8007648 <UART_SetConfig+0x2e8>
 800760a:	2300      	movs	r3, #0
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e04b      	b.n	80076a8 <UART_SetConfig+0x348>
 8007610:	2302      	movs	r3, #2
 8007612:	77fb      	strb	r3, [r7, #31]
 8007614:	e048      	b.n	80076a8 <UART_SetConfig+0x348>
 8007616:	2304      	movs	r3, #4
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e045      	b.n	80076a8 <UART_SetConfig+0x348>
 800761c:	2308      	movs	r3, #8
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e042      	b.n	80076a8 <UART_SetConfig+0x348>
 8007622:	bf00      	nop
 8007624:	efff69f3 	.word	0xefff69f3
 8007628:	40011000 	.word	0x40011000
 800762c:	40023800 	.word	0x40023800
 8007630:	40004400 	.word	0x40004400
 8007634:	40004800 	.word	0x40004800
 8007638:	40004c00 	.word	0x40004c00
 800763c:	40005000 	.word	0x40005000
 8007640:	40011400 	.word	0x40011400
 8007644:	40007800 	.word	0x40007800
 8007648:	2310      	movs	r3, #16
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	e02c      	b.n	80076a8 <UART_SetConfig+0x348>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a72      	ldr	r2, [pc, #456]	; (800781c <UART_SetConfig+0x4bc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d125      	bne.n	80076a4 <UART_SetConfig+0x344>
 8007658:	4b71      	ldr	r3, [pc, #452]	; (8007820 <UART_SetConfig+0x4c0>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007662:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007666:	d017      	beq.n	8007698 <UART_SetConfig+0x338>
 8007668:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800766c:	d817      	bhi.n	800769e <UART_SetConfig+0x33e>
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007672:	d00b      	beq.n	800768c <UART_SetConfig+0x32c>
 8007674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007678:	d811      	bhi.n	800769e <UART_SetConfig+0x33e>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <UART_SetConfig+0x326>
 800767e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007682:	d006      	beq.n	8007692 <UART_SetConfig+0x332>
 8007684:	e00b      	b.n	800769e <UART_SetConfig+0x33e>
 8007686:	2300      	movs	r3, #0
 8007688:	77fb      	strb	r3, [r7, #31]
 800768a:	e00d      	b.n	80076a8 <UART_SetConfig+0x348>
 800768c:	2302      	movs	r3, #2
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	e00a      	b.n	80076a8 <UART_SetConfig+0x348>
 8007692:	2304      	movs	r3, #4
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e007      	b.n	80076a8 <UART_SetConfig+0x348>
 8007698:	2308      	movs	r3, #8
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e004      	b.n	80076a8 <UART_SetConfig+0x348>
 800769e:	2310      	movs	r3, #16
 80076a0:	77fb      	strb	r3, [r7, #31]
 80076a2:	e001      	b.n	80076a8 <UART_SetConfig+0x348>
 80076a4:	2310      	movs	r3, #16
 80076a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b0:	d15b      	bne.n	800776a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80076b2:	7ffb      	ldrb	r3, [r7, #31]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d828      	bhi.n	800770a <UART_SetConfig+0x3aa>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x360>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076f5 	.word	0x080076f5
 80076cc:	0800770b 	.word	0x0800770b
 80076d0:	080076fb 	.word	0x080076fb
 80076d4:	0800770b 	.word	0x0800770b
 80076d8:	0800770b 	.word	0x0800770b
 80076dc:	0800770b 	.word	0x0800770b
 80076e0:	08007703 	.word	0x08007703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e4:	f7fe fbcc 	bl	8005e80 <HAL_RCC_GetPCLK1Freq>
 80076e8:	61b8      	str	r0, [r7, #24]
        break;
 80076ea:	e013      	b.n	8007714 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ec:	f7fe fbdc 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 80076f0:	61b8      	str	r0, [r7, #24]
        break;
 80076f2:	e00f      	b.n	8007714 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076f4:	4b4b      	ldr	r3, [pc, #300]	; (8007824 <UART_SetConfig+0x4c4>)
 80076f6:	61bb      	str	r3, [r7, #24]
        break;
 80076f8:	e00c      	b.n	8007714 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076fa:	f7fe faaf 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 80076fe:	61b8      	str	r0, [r7, #24]
        break;
 8007700:	e008      	b.n	8007714 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007706:	61bb      	str	r3, [r7, #24]
        break;
 8007708:	e004      	b.n	8007714 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	77bb      	strb	r3, [r7, #30]
        break;
 8007712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d074      	beq.n	8007804 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	005a      	lsls	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	085b      	lsrs	r3, r3, #1
 8007724:	441a      	add	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	fbb2 f3f3 	udiv	r3, r2, r3
 800772e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b0f      	cmp	r3, #15
 8007734:	d916      	bls.n	8007764 <UART_SetConfig+0x404>
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800773c:	d212      	bcs.n	8007764 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f023 030f 	bic.w	r3, r3, #15
 8007746:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	b29b      	uxth	r3, r3
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	b29a      	uxth	r2, r3
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	4313      	orrs	r3, r2
 8007758:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	89fa      	ldrh	r2, [r7, #14]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	e04f      	b.n	8007804 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	77bb      	strb	r3, [r7, #30]
 8007768:	e04c      	b.n	8007804 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800776a:	7ffb      	ldrb	r3, [r7, #31]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d828      	bhi.n	80077c2 <UART_SetConfig+0x462>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0x418>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077ad 	.word	0x080077ad
 8007784:	080077c3 	.word	0x080077c3
 8007788:	080077b3 	.word	0x080077b3
 800778c:	080077c3 	.word	0x080077c3
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077c3 	.word	0x080077c3
 8007798:	080077bb 	.word	0x080077bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800779c:	f7fe fb70 	bl	8005e80 <HAL_RCC_GetPCLK1Freq>
 80077a0:	61b8      	str	r0, [r7, #24]
        break;
 80077a2:	e013      	b.n	80077cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fe fb80 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 80077a8:	61b8      	str	r0, [r7, #24]
        break;
 80077aa:	e00f      	b.n	80077cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ac:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <UART_SetConfig+0x4c4>)
 80077ae:	61bb      	str	r3, [r7, #24]
        break;
 80077b0:	e00c      	b.n	80077cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b2:	f7fe fa53 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 80077b6:	61b8      	str	r0, [r7, #24]
        break;
 80077b8:	e008      	b.n	80077cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077be:	61bb      	str	r3, [r7, #24]
        break;
 80077c0:	e004      	b.n	80077cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	77bb      	strb	r3, [r7, #30]
        break;
 80077ca:	bf00      	nop
    }

    if (pclk != 0U)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d018      	beq.n	8007804 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	085a      	lsrs	r2, r3, #1
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d909      	bls.n	8007800 <UART_SetConfig+0x4a0>
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f2:	d205      	bcs.n	8007800 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60da      	str	r2, [r3, #12]
 80077fe:	e001      	b.n	8007804 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007810:	7fbb      	ldrb	r3, [r7, #30]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	40007c00 	.word	0x40007c00
 8007820:	40023800 	.word	0x40023800
 8007824:	00f42400 	.word	0x00f42400

08007828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01a      	beq.n	800793e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007926:	d10a      	bne.n	800793e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
  }
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800797c:	f7f9 fecc 	bl	8001718 <HAL_GetTick>
 8007980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b08      	cmp	r3, #8
 800798e:	d10e      	bne.n	80079ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f831 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e027      	b.n	80079fe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d10e      	bne.n	80079da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f81b 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e011      	b.n	80079fe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b09c      	sub	sp, #112	; 0x70
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a16:	e0a7      	b.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	f000 80a3 	beq.w	8007b68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a22:	f7f9 fe79 	bl	8001718 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d13f      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e6      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	663b      	str	r3, [r7, #96]	; 0x60
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e068      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d050      	beq.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad4:	d148      	bne.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ade:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
 8007b00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e6      	bne.n	8007ae0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3308      	adds	r3, #8
 8007b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	613b      	str	r3, [r7, #16]
   return(result);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b32:	623a      	str	r2, [r7, #32]
 8007b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	69f9      	ldr	r1, [r7, #28]
 8007b38:	6a3a      	ldr	r2, [r7, #32]
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e5      	bne.n	8007b12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e010      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69da      	ldr	r2, [r3, #28]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4013      	ands	r3, r2
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	bf0c      	ite	eq
 8007b78:	2301      	moveq	r3, #1
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	f43f af48 	beq.w	8007a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3770      	adds	r7, #112	; 0x70
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b94:	b084      	sub	sp, #16
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	f107 001c 	add.w	r0, r7, #28
 8007ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d120      	bne.n	8007bee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <USB_CoreInit+0xac>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d105      	bne.n	8007be2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa96 	bl	8008114 <USB_CoreReset>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
 8007bec:	e010      	b.n	8007c10 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa8a 	bl	8008114 <USB_CoreReset>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d10b      	bne.n	8007c2e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f043 0206 	orr.w	r2, r3, #6
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f043 0220 	orr.w	r2, r3, #32
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c3a:	b004      	add	sp, #16
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	ffbdffbf 	.word	0xffbdffbf

08007c44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f023 0201 	bic.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d115      	bne.n	8007cb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c94:	2001      	movs	r0, #1
 8007c96:	f7f9 fd4b 	bl	8001730 <HAL_Delay>
      ms++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa29 	bl	80080f8 <USB_GetMode>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d01e      	beq.n	8007cea <USB_SetCurrentMode+0x84>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b31      	cmp	r3, #49	; 0x31
 8007cb0:	d9f0      	bls.n	8007c94 <USB_SetCurrentMode+0x2e>
 8007cb2:	e01a      	b.n	8007cea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d115      	bne.n	8007ce6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	f7f9 fd32 	bl	8001730 <HAL_Delay>
      ms++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa10 	bl	80080f8 <USB_GetMode>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <USB_SetCurrentMode+0x84>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b31      	cmp	r3, #49	; 0x31
 8007ce2:	d9f0      	bls.n	8007cc6 <USB_SetCurrentMode+0x60>
 8007ce4:	e001      	b.n	8007cea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e005      	b.n	8007cf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b32      	cmp	r3, #50	; 0x32
 8007cee:	d101      	bne.n	8007cf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d00:	b084      	sub	sp, #16
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	e009      	b.n	8007d34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3340      	adds	r3, #64	; 0x40
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3301      	adds	r3, #1
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b0e      	cmp	r3, #14
 8007d38:	d9f2      	bls.n	8007d20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11c      	bne.n	8007d7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4e:	f043 0302 	orr.w	r3, r3, #2
 8007d52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e005      	b.n	8007d86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d98:	4619      	mov	r1, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da0:	461a      	mov	r2, r3
 8007da2:	680b      	ldr	r3, [r1, #0]
 8007da4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d10c      	bne.n	8007dc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f965 	bl	8008084 <USB_SetDevSpeed>
 8007dba:	e008      	b.n	8007dce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f960 	bl	8008084 <USB_SetDevSpeed>
 8007dc4:	e003      	b.n	8007dce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dc6:	2103      	movs	r1, #3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f95b 	bl	8008084 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dce:	2110      	movs	r1, #16
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8f3 	bl	8007fbc <USB_FlushTxFifo>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f91f 	bl	8008024 <USB_FlushRxFifo>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df6:	461a      	mov	r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	461a      	mov	r2, r3
 8007e04:	2300      	movs	r3, #0
 8007e06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2300      	movs	r3, #0
 8007e12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e14:	2300      	movs	r3, #0
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	e043      	b.n	8007ea2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e30:	d118      	bne.n	8007e64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e44:	461a      	mov	r2, r3
 8007e46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	e013      	b.n	8007e76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	e008      	b.n	8007e76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	461a      	mov	r2, r3
 8007e72:	2300      	movs	r3, #0
 8007e74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e82:	461a      	mov	r2, r3
 8007e84:	2300      	movs	r3, #0
 8007e86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	461a      	mov	r2, r3
 8007e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d3b7      	bcc.n	8007e1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	e043      	b.n	8007f38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec6:	d118      	bne.n	8007efa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eda:	461a      	mov	r2, r3
 8007edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	e013      	b.n	8007f0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e008      	b.n	8007f0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	3301      	adds	r3, #1
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d3b7      	bcc.n	8007eb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f043 0210 	orr.w	r2, r3, #16
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	699a      	ldr	r2, [r3, #24]
 8007f78:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <USB_DevInit+0x2b4>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	f043 0208 	orr.w	r2, r3, #8
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d105      	bne.n	8007fa4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699a      	ldr	r2, [r3, #24]
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <USB_DevInit+0x2b8>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fb0:	b004      	add	sp, #16
 8007fb2:	4770      	bx	lr
 8007fb4:	803c3800 	.word	0x803c3800
 8007fb8:	40000004 	.word	0x40000004

08007fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a13      	ldr	r2, [pc, #76]	; (8008020 <USB_FlushTxFifo+0x64>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d901      	bls.n	8007fdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e01b      	b.n	8008014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	daf2      	bge.n	8007fca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	019b      	lsls	r3, r3, #6
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <USB_FlushTxFifo+0x64>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d901      	bls.n	8008006 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e006      	b.n	8008014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b20      	cmp	r3, #32
 8008010:	d0f0      	beq.n	8007ff4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	00030d40 	.word	0x00030d40

08008024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4a11      	ldr	r2, [pc, #68]	; (8008080 <USB_FlushRxFifo+0x5c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d901      	bls.n	8008042 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e018      	b.n	8008074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	daf2      	bge.n	8008030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2210      	movs	r2, #16
 8008052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a08      	ldr	r2, [pc, #32]	; (8008080 <USB_FlushRxFifo+0x5c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d901      	bls.n	8008066 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e006      	b.n	8008074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b10      	cmp	r3, #16
 8008070:	d0f0      	beq.n	8008054 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	00030d40 	.word	0x00030d40

08008084 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080a4:	4313      	orrs	r3, r2
 80080a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080d0:	f023 0303 	bic.w	r3, r3, #3
 80080d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e4:	f043 0302 	orr.w	r3, r3, #2
 80080e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	f003 0301 	and.w	r3, r3, #1
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4a13      	ldr	r2, [pc, #76]	; (8008178 <USB_CoreReset+0x64>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d901      	bls.n	8008132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e01b      	b.n	800816a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	daf2      	bge.n	8008120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f043 0201 	orr.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4a09      	ldr	r2, [pc, #36]	; (8008178 <USB_CoreReset+0x64>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d901      	bls.n	800815c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e006      	b.n	800816a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b01      	cmp	r3, #1
 8008166:	d0f0      	beq.n	800814a <USB_CoreReset+0x36>

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	00030d40 	.word	0x00030d40

0800817c <__libc_init_array>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	4d0d      	ldr	r5, [pc, #52]	; (80081b4 <__libc_init_array+0x38>)
 8008180:	4c0d      	ldr	r4, [pc, #52]	; (80081b8 <__libc_init_array+0x3c>)
 8008182:	1b64      	subs	r4, r4, r5
 8008184:	10a4      	asrs	r4, r4, #2
 8008186:	2600      	movs	r6, #0
 8008188:	42a6      	cmp	r6, r4
 800818a:	d109      	bne.n	80081a0 <__libc_init_array+0x24>
 800818c:	4d0b      	ldr	r5, [pc, #44]	; (80081bc <__libc_init_array+0x40>)
 800818e:	4c0c      	ldr	r4, [pc, #48]	; (80081c0 <__libc_init_array+0x44>)
 8008190:	f000 f820 	bl	80081d4 <_init>
 8008194:	1b64      	subs	r4, r4, r5
 8008196:	10a4      	asrs	r4, r4, #2
 8008198:	2600      	movs	r6, #0
 800819a:	42a6      	cmp	r6, r4
 800819c:	d105      	bne.n	80081aa <__libc_init_array+0x2e>
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a4:	4798      	blx	r3
 80081a6:	3601      	adds	r6, #1
 80081a8:	e7ee      	b.n	8008188 <__libc_init_array+0xc>
 80081aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ae:	4798      	blx	r3
 80081b0:	3601      	adds	r6, #1
 80081b2:	e7f2      	b.n	800819a <__libc_init_array+0x1e>
 80081b4:	0800830c 	.word	0x0800830c
 80081b8:	0800830c 	.word	0x0800830c
 80081bc:	0800830c 	.word	0x0800830c
 80081c0:	08008310 	.word	0x08008310

080081c4 <memset>:
 80081c4:	4402      	add	r2, r0
 80081c6:	4603      	mov	r3, r0
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d100      	bne.n	80081ce <memset+0xa>
 80081cc:	4770      	bx	lr
 80081ce:	f803 1b01 	strb.w	r1, [r3], #1
 80081d2:	e7f9      	b.n	80081c8 <memset+0x4>

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr
