
Ov7670_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008214  08008214  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800821c  0800821c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  0800828c  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  0800832c  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00038c0c  200001a8  080083cc  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20038db4  080083cc  00028db4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e548  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003eff  00000000  00000000  0003e71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016d8  00000000  00000000  00042620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001510  00000000  00000000  00043cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b978  00000000  00000000  00045208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f865  00000000  00000000  00070b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001071c3  00000000  00000000  000903e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001975a8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f30  00000000  00000000  001975f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001a8 	.word	0x200001a8
 8000214:	00000000 	.word	0x00000000
 8000218:	08008180 	.word	0x08008180

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001ac 	.word	0x200001ac
 8000234:	08008180 	.word	0x08008180

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_DCMI_Init+0x60>)
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_DCMI_Init+0x64>)
 8000544:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_DCMI_Init+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_DCMI_Init+0x60>)
 800054e:	2220      	movs	r2, #32
 8000550:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_DCMI_Init+0x60>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_DCMI_Init+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_DCMI_Init+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_DCMI_Init+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_DCMI_Init+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_DCMI_Init+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_DCMI_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_DCMI_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_DCMI_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_DCMI_Init+0x60>)
 800058a:	f001 f9d3 	bl	8001934 <HAL_DCMI_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fc5e 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001c4 	.word	0x200001c4
 80005a0:	50050000 	.word	0x50050000

080005a4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08e      	sub	sp, #56	; 0x38
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a6d      	ldr	r2, [pc, #436]	; (8000778 <HAL_DCMI_MspInit+0x1d4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	f040 80d3 	bne.w	800076e <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80005c8:	4b6c      	ldr	r3, [pc, #432]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005cc:	4a6b      	ldr	r2, [pc, #428]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6353      	str	r3, [r2, #52]	; 0x34
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
 80005de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a65      	ldr	r2, [pc, #404]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
 80005ec:	4b63      	ldr	r3, [pc, #396]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a5f      	ldr	r2, [pc, #380]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
 8000604:	4b5d      	ldr	r3, [pc, #372]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a59      	ldr	r2, [pc, #356]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
 800061c:	4b57      	ldr	r3, [pc, #348]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a53      	ldr	r2, [pc, #332]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a4d      	ldr	r2, [pc, #308]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000658:	2370      	movs	r3, #112	; 0x70
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000668:	230d      	movs	r3, #13
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4843      	ldr	r0, [pc, #268]	; (8000780 <HAL_DCMI_MspInit+0x1dc>)
 8000674:	f003 fcda 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000678:	2350      	movs	r3, #80	; 0x50
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000688:	230d      	movs	r3, #13
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	483c      	ldr	r0, [pc, #240]	; (8000784 <HAL_DCMI_MspInit+0x1e0>)
 8000694:	f003 fcca 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000698:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006aa:	230d      	movs	r3, #13
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <HAL_DCMI_MspInit+0x1e4>)
 80006b6:	f003 fcb9 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ba:	2308      	movs	r3, #8
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ca:	230d      	movs	r3, #13
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	4619      	mov	r1, r3
 80006d4:	482d      	ldr	r0, [pc, #180]	; (800078c <HAL_DCMI_MspInit+0x1e8>)
 80006d6:	f003 fca9 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ec:	230d      	movs	r3, #13
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	4826      	ldr	r0, [pc, #152]	; (8000790 <HAL_DCMI_MspInit+0x1ec>)
 80006f8:	f003 fc98 	bl	800402c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <HAL_DCMI_MspInit+0x1f4>)
 8000700:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000708:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000724:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000744:	f001 fbcc 	bl	8001ee0 <HAL_DMA_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_DCMI_MspInit+0x1ae>
    {
      Error_Handler();
 800074e:	f000 fb81 	bl	8000e54 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000756:	649a      	str	r2, [r3, #72]	; 0x48
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	204e      	movs	r0, #78	; 0x4e
 8000764:	f001 f8af 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000768:	204e      	movs	r0, #78	; 0x4e
 800076a:	f001 f8c8 	bl	80018fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3738      	adds	r7, #56	; 0x38
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	50050000 	.word	0x50050000
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020000 	.word	0x40020000
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40021800 	.word	0x40021800
 8000794:	20000214 	.word	0x20000214
 8000798:	40026428 	.word	0x40026428

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x38>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2039      	movs	r0, #57	; 0x39
 80007c0:	f001 f881 	bl	80018c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007c4:	2039      	movs	r0, #57	; 0x39
 80007c6:	f001 f89a 	bl	80018fe <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <MX_ETH_Init+0x88>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ETH_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ETH_Init+0x8c>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ETH_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ETH_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ETH_Init+0x84>)
 8000808:	4a16      	ldr	r2, [pc, #88]	; (8000864 <MX_ETH_Init+0x8c>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ETH_Init+0x84>)
 800080e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000812:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ETH_Init+0x84>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_ETH_Init+0x90>)
 8000818:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_ETH_Init+0x84>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x94>)
 800081e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ETH_Init+0x84>)
 8000822:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000826:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x84>)
 800082a:	f003 f8d9 	bl	80039e0 <HAL_ETH_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 fb0e 	bl	8000e54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000838:	2238      	movs	r2, #56	; 0x38
 800083a:	2100      	movs	r1, #0
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x98>)
 800083e:	f007 fc97 	bl	8008170 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ETH_Init+0x98>)
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_ETH_Init+0x98>)
 800084a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800084e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_ETH_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002ac 	.word	0x200002ac
 8000860:	40028000 	.word	0x40028000
 8000864:	2000035c 	.word	0x2000035c
 8000868:	20000108 	.word	0x20000108
 800086c:	20000068 	.word	0x20000068
 8000870:	20000274 	.word	0x20000274

08000874 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a4e      	ldr	r2, [pc, #312]	; (80009cc <HAL_ETH_MspInit+0x158>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f040 8096 	bne.w	80009c4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000898:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a40      	ldr	r2, [pc, #256]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800092e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000940:	2332      	movs	r3, #50	; 0x32
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000950:	230b      	movs	r3, #11
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <HAL_ETH_MspInit+0x160>)
 800095c:	f003 fb66 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000960:	2386      	movs	r3, #134	; 0x86
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4817      	ldr	r0, [pc, #92]	; (80009d8 <HAL_ETH_MspInit+0x164>)
 800097c:	f003 fb56 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000992:	230b      	movs	r3, #11
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <HAL_ETH_MspInit+0x168>)
 800099e:	f003 fb45 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_ETH_MspInit+0x16c>)
 80009c0:	f003 fb34 	bl	800402c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40028000 	.word	0x40028000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800

080009e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x180>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a59      	ldr	r2, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b54      	ldr	r3, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a53      	ldr	r2, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a4d      	ldr	r2, [pc, #308]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a41      	ldr	r2, [pc, #260]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a35      	ldr	r2, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CAMERA_RESET_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f644 0181 	movw	r1, #18561	; 0x4881
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000ac2:	f003 fc5f 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4828      	ldr	r0, [pc, #160]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000acc:	f003 fc5a 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <MX_GPIO_Init+0x18c>)
 8000ae8:	f003 faa0 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000b06:	f003 fa91 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000b24:	f003 fa82 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000b40:	f003 fa74 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000b58:	f003 fa68 	bl	800402c <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C2_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C2_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bb0:	f003 fc02 	bl	80043b8 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 f94b 	bl	8000e54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bc2:	f004 fa47 	bl	8005054 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 f942 	bl	8000e54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bd4:	f004 fa89 	bl	80050ea <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 f939 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000364 	.word	0x20000364
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	20404768 	.word	0x20404768

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	; 0xb8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2290      	movs	r2, #144	; 0x90
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 faab 	bl	8008170 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_I2C_MspInit+0xb0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d13b      	bne.n	8000c9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f005 f922 	bl	8005e7c <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f000 f909 	bl	8000e54 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_I2C_MspInit+0xb8>)
 8000c80:	f003 f9d4 	bl	800402c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	37b8      	adds	r7, #184	; 0xb8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40021400 	.word	0x40021400

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fcaa 	bl	800160e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f85b 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f7ff fe91 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc2:	f7ff fd6b 	bl	800079c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cc6:	f000 f9e3 	bl	8001090 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cca:	f000 fa71 	bl	80011b0 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000cce:	f7ff fc35 	bl	800053c <MX_DCMI_Init>
  MX_I2C2_Init();
 8000cd2:	f7ff ff4f 	bl	8000b74 <MX_I2C2_Init>
  MX_ETH_Init();
 8000cd6:	f7ff fd7f 	bl	80007d8 <MX_ETH_Init>
  MX_TIM10_Init();
 8000cda:	f000 f935 	bl	8000f48 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start(&htim10, TIM_CHANNEL_1);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	481c      	ldr	r0, [pc, #112]	; (8000d54 <main+0xa4>)
 8000ce2:	f005 fdab 	bl	800683c <HAL_TIM_OC_Start>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <main+0xa8>)
 8000ce8:	491c      	ldr	r1, [pc, #112]	; (8000d5c <main+0xac>)
 8000cea:	481d      	ldr	r0, [pc, #116]	; (8000d60 <main+0xb0>)
 8000cec:	f000 fb08 	bl	8001300 <ov7670_init>
  ov7670_config(0u);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fb4d 	bl	8001390 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS, (uint32_t)imagebuf);
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <main+0xb4>)
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 fba2 	bl	8001444 <ov7670_startCap>
  HAL_Delay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f000 fce0 	bl	80016c8 <HAL_Delay>
  ov7670_stopCap();
 8000d08:	f000 fbca 	bl	80014a0 <ov7670_stopCap>
  uint32_t i;
  for (i = 1; i<= (OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT *2); i+=2){
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	e00a      	b.n	8000d28 <main+0x78>
	  tempbuf[i/2]=imagebuf[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	085b      	lsrs	r3, r3, #1
 8000d16:	4913      	ldr	r1, [pc, #76]	; (8000d64 <main+0xb4>)
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	440a      	add	r2, r1
 8000d1c:	7811      	ldrb	r1, [r2, #0]
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <main+0xb8>)
 8000d20:	54d1      	strb	r1, [r2, r3]
  for (i = 1; i<= (OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT *2); i+=2){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3302      	adds	r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000d2e:	d9f0      	bls.n	8000d12 <main+0x62>
  }
  HAL_UART_Transmit(&huart3, tempbuf, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2, 1000);
 8000d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d34:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d38:	490b      	ldr	r1, [pc, #44]	; (8000d68 <main+0xb8>)
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <main+0xbc>)
 8000d3c:	f006 fa63 	bl	8007206 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, &tempbuf[OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2], OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2, 1000);
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d48:	4909      	ldr	r1, [pc, #36]	; (8000d70 <main+0xc0>)
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <main+0xbc>)
 8000d4c:	f006 fa5b 	bl	8007206 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart3, "hola", sizeof("hola"), 1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <main+0xa0>
 8000d52:	bf00      	nop
 8000d54:	200387b8 	.word	0x200387b8
 8000d58:	20000364 	.word	0x20000364
 8000d5c:	20000214 	.word	0x20000214
 8000d60:	200001c4 	.word	0x200001c4
 8000d64:	200003b8 	.word	0x200003b8
 8000d68:	20025bb8 	.word	0x20025bb8
 8000d6c:	20038804 	.word	0x20038804
 8000d70:	2002f1b8 	.word	0x2002f1b8

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	; 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2234      	movs	r2, #52	; 0x34
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f007 f9f4 	bl	8008170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d98:	f004 fb3c 	bl	8005414 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <SystemClock_Config+0xd8>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a2a      	ldr	r2, [pc, #168]	; (8000e4c <SystemClock_Config+0xd8>)
 8000da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <SystemClock_Config+0xd8>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <SystemClock_Config+0xdc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <SystemClock_Config+0xdc>)
 8000dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <SystemClock_Config+0xdc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000de4:	23d8      	movs	r3, #216	; 0xd8
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dec:	2309      	movs	r3, #9
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fb6b 	bl	80054d4 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e04:	f000 f826 	bl	8000e54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e08:	f004 fb14 	bl	8005434 <HAL_PWREx_EnableOverDrive>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e12:	f000 f81f 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2107      	movs	r1, #7
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fdfb 	bl	8005a30 <HAL_RCC_ClockConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e40:	f000 f808 	bl	8000e54 <Error_Handler>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3750      	adds	r7, #80	; 0x50
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_MspInit+0x44>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 fbc8 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <DMA2_Stream1_IRQHandler+0x10>)
 8000f02:	f001 f98d 	bl	8002220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000214 	.word	0x20000214

08000f10 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <DCMI_IRQHandler+0x10>)
 8000f16:	f000 fe93 	bl	8001c40 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001c4 	.word	0x200001c4

08000f24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MX_TIM10_Init+0x94>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9-1;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f74:	2208      	movs	r2, #8
 8000f76:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f84:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f86:	f005 fba1 	bl	80066cc <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f7ff ff60 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000f96:	f005 fbf0 	bl	800677a <HAL_TIM_OC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8000fa0:	f7ff ff58 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fa4:	2330      	movs	r3, #48	; 0x30
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000fbc:	f005 fd38 	bl	8006a30 <HAL_TIM_OC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8000fc6:	f7ff ff45 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_TIM10_Init+0x90>)
 8000fcc:	f000 f828 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200387b8 	.word	0x200387b8
 8000fdc:	40014400 	.word	0x40014400

08000fe0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_TIM_Base_MspInit+0x38>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d10b      	bne.n	800100a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x3c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_TIM_Base_MspInit+0x3c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40014400 	.word	0x40014400
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a11      	ldr	r2, [pc, #68]	; (8001084 <HAL_TIM_MspPostInit+0x64>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11c      	bne.n	800107c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800106c:	2303      	movs	r3, #3
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001078:	f002 ffd8 	bl	800402c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40014400 	.word	0x40014400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400

08001090 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 8001096:	4a15      	ldr	r2, [pc, #84]	; (80010ec <MX_USART3_UART_Init+0x5c>)
 8001098:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 800109c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80010a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_USART3_UART_Init+0x58>)
 80010d6:	f006 f848 	bl	800716a <HAL_UART_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80010e0:	f7ff feb8 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20038804 	.word	0x20038804
 80010ec:	40004800 	.word	0x40004800

080010f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ae      	sub	sp, #184	; 0xb8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2290      	movs	r2, #144	; 0x90
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f007 f82d 	bl	8008170 <memset>
  if(uartHandle->Instance==USART3)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_UART_MspInit+0xb4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d13c      	bne.n	800119a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001124:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001126:	2300      	movs	r3, #0
 8001128:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fea4 	bl	8005e7c <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800113a:	f7ff fe8b 	bl	8000e54 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_UART_MspInit+0xb8>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_UART_MspInit+0xb8>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_UART_MspInit+0xb8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0xb8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <HAL_UART_MspInit+0xb8>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_UART_MspInit+0xb8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800116e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001188:	2307      	movs	r3, #7
 800118a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_UART_MspInit+0xbc>)
 8001196:	f002 ff49 	bl	800402c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	37b8      	adds	r7, #184	; 0xb8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004800 	.word	0x40004800
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011be:	2206      	movs	r2, #6
 80011c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f4:	f003 ffc5 	bl	8005182 <HAL_PCD_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011fe:	f7ff fe29 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2003888c 	.word	0x2003888c

0800120c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ae      	sub	sp, #184	; 0xb8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2290      	movs	r2, #144	; 0x90
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 ff9f 	bl	8008170 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123a:	d159      	bne.n	80012f0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800123c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001240:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fe15 	bl	8005e7c <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f7ff fdfc 	bl	8000e54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001274:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800128e:	230a      	movs	r3, #10
 8001290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001298:	4619      	mov	r1, r3
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <HAL_PCD_MspInit+0xf0>)
 800129c:	f002 fec6 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4810      	ldr	r0, [pc, #64]	; (80012fc <HAL_PCD_MspInit+0xf0>)
 80012bc:	f002 feb6 	bl	800402c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 80012c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ca:	6353      	str	r3, [r2, #52]	; 0x34
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e2:	6453      	str	r3, [r2, #68]	; 0x44
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_PCD_MspInit+0xec>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	37b8      	adds	r7, #184	; 0xb8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000

08001300 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <ov7670_init+0x7c>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <ov7670_init+0x80>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <ov7670_init+0x84>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <ov7670_init+0x88>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132a:	4818      	ldr	r0, [pc, #96]	; (800138c <ov7670_init+0x8c>)
 800132c:	f003 f82a 	bl	8004384 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f000 f9c9 	bl	80016c8 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <ov7670_init+0x8c>)
 800133e:	f003 f821 	bl	8004384 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f000 f9c0 	bl	80016c8 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	2012      	movs	r0, #18
 800134c:	f000 f8f0 	bl	8001530 <ov7670_write>
  HAL_Delay(30);
 8001350:	201e      	movs	r0, #30
 8001352:	f000 f9b9 	bl	80016c8 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	200b      	movs	r0, #11
 800135e:	f000 f907 	bl	8001570 <ov7670_read>
  ov7670_read(0x01, &buffer[1]);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	3301      	adds	r3, #1
 8001368:	4619      	mov	r1, r3
 800136a:	2001      	movs	r0, #1
 800136c:	f000 f900 	bl	8001570 <ov7670_read>
 // printf("[OV7670] dev id = %02X\n", buffer[0]);


  return RET_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20038d94 	.word	0x20038d94
 8001380:	20038d98 	.word	0x20038d98
 8001384:	20038d9c 	.word	0x20038d9c
 8001388:	20038da0 	.word	0x20038da0
 800138c:	40020400 	.word	0x40020400

08001390 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint8_t ret_value;
  ov7670_stopCap();
 8001398:	f000 f882 	bl	80014a0 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	2012      	movs	r0, #18
 80013a0:	f000 f8c6 	bl	8001530 <ov7670_write>
  HAL_Delay(30);
 80013a4:	201e      	movs	r0, #30
 80013a6:	f000 f98f 	bl	80016c8 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e012      	b.n	80013d6 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <ov7670_config+0xac>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013b8:	4920      	ldr	r1, [pc, #128]	; (800143c <ov7670_config+0xac>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	440b      	add	r3, r1
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f000 f8b3 	bl	8001530 <ov7670_write>
    HAL_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 f97c 	bl	80016c8 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	4a19      	ldr	r2, [pc, #100]	; (800143c <ov7670_config+0xac>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d1e6      	bne.n	80013b0 <ov7670_config+0x20>
  }
  for(int i = 0; OV7670_reg_read[i][0] != REG_BATT; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	e01d      	b.n	8001424 <ov7670_config+0x94>
	ret_value = ov7670_read(OV7670_reg_read[i][0], &OV7670_reg_read[i][1]);
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <ov7670_config+0xb0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	3301      	adds	r3, #1
 80013f6:	4912      	ldr	r1, [pc, #72]	; (8001440 <ov7670_config+0xb0>)
 80013f8:	440b      	add	r3, r1
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f000 f8b7 	bl	8001570 <ov7670_read>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
    if (ret_value != HAL_OK){
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <ov7670_config+0x88>
    	OV7670_reg_read[i][1]=0xFF;
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <ov7670_config+0xb0>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	705a      	strb	r2, [r3, #1]
    }
    HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 f955 	bl	80016c8 <HAL_Delay>
  for(int i = 0; OV7670_reg_read[i][0] != REG_BATT; i++) {
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	3301      	adds	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <ov7670_config+0xb0>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800142c:	2bff      	cmp	r3, #255	; 0xff
 800142e:	d1db      	bne.n	80013e8 <ov7670_config+0x58>
  }
  return RET_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	080081b0 	.word	0x080081b0
 8001440:	20000004 	.word	0x20000004

08001444 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 800144e:	f000 f827 	bl	80014a0 <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10b      	bne.n	8001470 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <ov7670_startCap+0x54>)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <ov7670_startCap+0x58>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	2100      	movs	r1, #0
 800146a:	f000 fadd 	bl	8001a28 <HAL_DCMI_Start_DMA>
 800146e:	e00d      	b.n	800148c <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10a      	bne.n	800148c <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <ov7670_startCap+0x54>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <ov7670_startCap+0x58>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	2102      	movs	r1, #2
 8001488:	f000 face 	bl	8001a28 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20038da0 	.word	0x20038da0
 800149c:	20038d94 	.word	0x20038d94

080014a0 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <ov7670_stopCap+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fb6b 	bl	8001b84 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20038d94 	.word	0x20038d94

080014b8 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_DCMI_FrameEventCallback+0x54>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_DCMI_FrameEventCallback+0x1c>
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_DCMI_FrameEventCallback+0x54>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_DCMI_FrameEventCallback+0x58>)
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	4610      	mov	r0, r2
 80014d2:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_DCMI_FrameEventCallback+0x5c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3328      	adds	r3, #40	; 0x28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_DCMI_FrameEventCallback+0x5c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014f0:	f000 fda4 	bl	800203c <HAL_DMA_Start_IT>
  }
  s_currentV++;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_DCMI_FrameEventCallback+0x58>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_DCMI_FrameEventCallback+0x58>)
 80014fc:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_DCMI_FrameEventCallback+0x60>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20038da4 	.word	0x20038da4
 8001510:	20038dac 	.word	0x20038dac
 8001514:	20038da0 	.word	0x20038da0
 8001518:	20038da8 	.word	0x20038da8

0800151c <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af04      	add	r7, sp, #16
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <ov7670_write+0x3c>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	b29a      	uxth	r2, r3
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	2142      	movs	r1, #66	; 0x42
 8001558:	f003 f9a8 	bl	80048ac <HAL_I2C_Mem_Write>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20038d9c 	.word	0x20038d9c

08001570 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af02      	add	r7, sp, #8
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <ov7670_read+0x48>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	1dfa      	adds	r2, r7, #7
 8001582:	2364      	movs	r3, #100	; 0x64
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	2142      	movs	r1, #66	; 0x42
 800158a:	f002 ffa5 	bl	80044d8 <HAL_I2C_Master_Transmit>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <ov7670_read+0x48>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	2142      	movs	r1, #66	; 0x42
 80015a0:	f003 f88e 	bl	80046c0 <HAL_I2C_Master_Receive>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20038d9c 	.word	0x20038d9c

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e6:	f7ff fc9d 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f006 fd9d 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fb5f 	bl	8000cb0 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001600:	08008224 	.word	0x08008224
  ldr r2, =_sbss
 8001604:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001608:	20038db4 	.word	0x20038db4

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>

0800160e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001612:	2003      	movs	r0, #3
 8001614:	f000 f94c 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f000 f805 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161e:	f7ff fc1f 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f967 	bl	800191a <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001664:	f000 f92f 	bl	80018c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000064 	.word	0x20000064
 8001684:	20000060 	.word	0x20000060

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000064 	.word	0x20000064
 80016ac:	20038db0 	.word	0x20038db0

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20038db0 	.word	0x20038db0

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000064 	.word	0x20000064

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <__NVIC_SetPriorityGrouping+0x40>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	4313      	orrs	r3, r2
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x40>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	05fa0000 	.word	0x05fa0000

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <__NVIC_EnableIRQ+0x38>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001890:	f7ff ff8e 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff29 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff3e 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff8e 	bl	8001804 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5d 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff31 	bl	8001774 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffa2 	bl	800186c <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e069      	b.n	8001a1a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fe26 	bl	80005a4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_DCMI_Init+0xf0>)
 800197a:	400b      	ands	r3, r1
 800197c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001992:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800199e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80019aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80019b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80019c2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d112      	bne.n	80019fa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f1b      	ldrb	r3, [r3, #28]
 80019d8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7f5b      	ldrb	r3, [r3, #29]
 80019de:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80019e0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7f9b      	ldrb	r3, [r3, #30]
 80019e6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80019e8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7fdb      	ldrb	r3, [r3, #31]
 80019f0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80019f6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80019f8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 021e 	orr.w	r2, r2, #30
 8001a08:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	ffe0f007 	.word	0xffe0f007

08001a28 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_DCMI_Start_DMA+0x20>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e095      	b.n	8001b74 <HAL_DCMI_Start_DMA+0x14c>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a66:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0202 	bic.w	r2, r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8c:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_DCMI_Start_DMA+0x154>)
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a94:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <HAL_DCMI_Start_DMA+0x158>)
 8001a96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d20e      	bcs.n	8001ade <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3328      	adds	r3, #40	; 0x28
 8001aca:	4619      	mov	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	f000 fab4 	bl	800203c <HAL_DMA_Start_IT>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03f      	beq.n	8001b5a <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e04a      	b.n	8001b74 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_DCMI_Start_DMA+0x154>)
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001af8:	e009      	b.n	8001b0e <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	085a      	lsrs	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	005a      	lsls	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d2f0      	bcs.n	8001afa <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	1e9a      	subs	r2, r3, #2
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3328      	adds	r3, #40	; 0x28
 8001b40:	4619      	mov	r1, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	f000 fdd2 	bl	80026f4 <HAL_DMAEx_MultiBufferStart_IT>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00c      	b.n	8001b74 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08001d7d 	.word	0x08001d7d
 8001b80:	08001ea7 	.word	0x08001ea7

08001b84 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_DCMI_Stop+0xb4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <HAL_DCMI_Stop+0xb8>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b9c:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_DCMI_Stop+0x2e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e03d      	b.n	8001c2e <HAL_DCMI_Stop+0xaa>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	1e5c      	subs	r4, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f043 0220 	orr.w	r2, r3, #32
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bea:	e006      	b.n	8001bfa <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1eb      	bne.n	8001bd2 <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c08:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fa74 	bl	80020fc <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	4a35      	ldr	r2, [pc, #212]	; (8001d50 <HAL_DCMI_IRQHandler+0x110>)
 8001c7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 faaa 	bl	80021dc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01e      	beq.n	8001cd0 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_DCMI_IRQHandler+0x110>)
 8001cb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fa8e 	bl	80021dc <HAL_DMA_Abort_IT>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f8eb 	bl	8001ea6 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2210      	movs	r2, #16
 8001ce0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f840 	bl	8001d68 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fc0e 	bl	800151c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01d      	beq.n	8001d46 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d107      	bne.n	8001d28 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 021e 	bic.w	r2, r2, #30
 8001d26:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fbb9 	bl	80014b8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	08001ea7 	.word	0x08001ea7

08001d54 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d043      	beq.n	8001e1e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da2:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d118      	bne.n	8001de2 <DCMI_DMAXferCplt+0x66>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	00da      	lsls	r2, r3, #3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f001 fdc5 	bl	8003960 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	639a      	str	r2, [r3, #56]	; 0x38
 8001de0:	e044      	b.n	8001e6c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d13c      	bne.n	8001e6c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f001 fda7 	bl	8003960 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1c:	e026      	b.n	8001e6c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e017      	b.n	8001e6c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10f      	bne.n	8001e6c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	440a      	add	r2, r1
 8001e62:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d112      	bne.n	8001e9e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d103      	bne.n	8001e9e <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d009      	beq.n	8001ed2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff ff3e 	bl	8001d54 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fbe0 	bl	80016b0 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e099      	b.n	8002030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1c:	e00f      	b.n	8001f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1e:	f7ff fbc7 	bl	80016b0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d908      	bls.n	8001f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e078      	b.n	8002030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e8      	bne.n	8001f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4b38      	ldr	r3, [pc, #224]	; (8002038 <HAL_DMA_Init+0x158>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d107      	bne.n	8001fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0307 	bic.w	r3, r3, #7
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d117      	bne.n	8002002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fb09 	bl	80025fc <DMA_CheckFifoParam>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ffe:	2301      	movs	r3, #1
 8002000:	e016      	b.n	8002030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fac0 	bl	8002590 <DMA_CalcBaseAndBitshift>
 8002010:	4603      	mov	r3, r0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	e010803f 	.word	0xe010803f

0800203c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Start_IT+0x26>
 800205e:	2302      	movs	r3, #2
 8002060:	e048      	b.n	80020f4 <HAL_DMA_Start_IT+0xb8>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d137      	bne.n	80020e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2202      	movs	r2, #2
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fa52 	bl	8002534 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	223f      	movs	r2, #63	; 0x3f
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0216 	orr.w	r2, r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e005      	b.n	80020f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff fad1 	bl	80016b0 <HAL_GetTick>
 800210e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d008      	beq.n	800212e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e052      	b.n	80021d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0216 	bic.w	r2, r2, #22
 800213c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800214c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <HAL_DMA_Abort+0x62>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0208 	bic.w	r2, r2, #8
 800216c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217e:	e013      	b.n	80021a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002180:	f7ff fa96 	bl	80016b0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b05      	cmp	r3, #5
 800218c:	d90c      	bls.n	80021a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e015      	b.n	80021d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e4      	bne.n	8002180 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	223f      	movs	r2, #63	; 0x3f
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d004      	beq.n	80021fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00c      	b.n	8002214 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2205      	movs	r2, #5
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800222c:	4b8e      	ldr	r3, [pc, #568]	; (8002468 <HAL_DMA_IRQHandler+0x248>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a8e      	ldr	r2, [pc, #568]	; (800246c <HAL_DMA_IRQHandler+0x24c>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0a9b      	lsrs	r3, r3, #10
 8002238:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2208      	movs	r2, #8
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01a      	beq.n	800228c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	2208      	movs	r2, #8
 800227a:	409a      	lsls	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2201      	movs	r2, #1
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d012      	beq.n	80022c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2201      	movs	r2, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f043 0202 	orr.w	r2, r3, #2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2204      	movs	r2, #4
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	2204      	movs	r2, #4
 80022e6:	409a      	lsls	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0204 	orr.w	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2210      	movs	r2, #16
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d043      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03c      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	2210      	movs	r2, #16
 800231c:	409a      	lsls	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d018      	beq.n	8002362 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d024      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
 800234e:	e01f      	b.n	8002390 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e016      	b.n	8002390 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0208 	bic.w	r2, r2, #8
 800237e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	2220      	movs	r2, #32
 8002396:	409a      	lsls	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 808f 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8087 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2220      	movs	r2, #32
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d136      	bne.n	8002438 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0216 	bic.w	r2, r2, #22
 80023d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_DMA_IRQHandler+0x1da>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0208 	bic.w	r2, r2, #8
 8002408:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	223f      	movs	r2, #63	; 0x3f
 8002410:	409a      	lsls	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242a:	2b00      	cmp	r3, #0
 800242c:	d07e      	beq.n	800252c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3
        }
        return;
 8002436:	e079      	b.n	800252c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	2b00      	cmp	r3, #0
 800245a:	d031      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
 8002464:	e02c      	b.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
 8002466:	bf00      	nop
 8002468:	20000000 	.word	0x20000000
 800246c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e01e      	b.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0210 	bic.w	r2, r2, #16
 800249e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d032      	beq.n	800252e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d022      	beq.n	800251a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d307      	bcc.n	8002508 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f2      	bne.n	80024ec <HAL_DMA_IRQHandler+0x2cc>
 8002506:	e000      	b.n	800250a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002508:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e000      	b.n	800252e <HAL_DMA_IRQHandler+0x30e>
        return;
 800252c:	bf00      	nop
    }
  }
}
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002550:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b40      	cmp	r3, #64	; 0x40
 8002560:	d108      	bne.n	8002574 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002572:	e007      	b.n	8002584 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	60da      	str	r2, [r3, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3b10      	subs	r3, #16
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <DMA_CalcBaseAndBitshift+0x60>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <DMA_CalcBaseAndBitshift+0x64>)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d908      	bls.n	80025d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <DMA_CalcBaseAndBitshift+0x68>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	1d1a      	adds	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	; 0x58
 80025ce:	e006      	b.n	80025de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <DMA_CalcBaseAndBitshift+0x68>)
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	aaaaaaab 	.word	0xaaaaaaab
 80025f4:	0800820c 	.word	0x0800820c
 80025f8:	fffffc00 	.word	0xfffffc00

080025fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11f      	bne.n	8002656 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d856      	bhi.n	80026ca <DMA_CheckFifoParam+0xce>
 800261c:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <DMA_CheckFifoParam+0x28>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002635 	.word	0x08002635
 8002628:	08002647 	.word	0x08002647
 800262c:	08002635 	.word	0x08002635
 8002630:	080026cb 	.word	0x080026cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d046      	beq.n	80026ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e043      	b.n	80026ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800264e:	d140      	bne.n	80026d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002654:	e03d      	b.n	80026d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	d121      	bne.n	80026a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d837      	bhi.n	80026d6 <DMA_CheckFifoParam+0xda>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <DMA_CheckFifoParam+0x70>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	08002683 	.word	0x08002683
 8002674:	0800267d 	.word	0x0800267d
 8002678:	08002695 	.word	0x08002695
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e030      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d025      	beq.n	80026da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002692:	e022      	b.n	80026da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026a2:	e01c      	b.n	80026de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d903      	bls.n	80026b2 <DMA_CheckFifoParam+0xb6>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d003      	beq.n	80026b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b0:	e018      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
      break;
 80026b6:	e015      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      break;
 80026c8:	e00b      	b.n	80026e2 <DMA_CheckFifoParam+0xe6>
      break;
 80026ca:	bf00      	nop
 80026cc:	e00a      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ce:	bf00      	nop
 80026d0:	e008      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e006      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e004      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e002      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
    }
  } 
  
  return status; 
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d106      	bne.n	800271c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f001 b8ff 	b.w	800391a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8002726:	2302      	movs	r3, #2
 8002728:	f001 b8f7 	b.w	800391a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	f041 80e5 	bne.w	800390c <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2202      	movs	r2, #2
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800275e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f001 f910 	bl	8003994 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b8d      	ldr	r3, [pc, #564]	; (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800277c:	429a      	cmp	r2, r3
 800277e:	d960      	bls.n	8002842 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a8b      	ldr	r2, [pc, #556]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d057      	beq.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a8a      	ldr	r2, [pc, #552]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d050      	beq.n	8002836 <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a88      	ldr	r2, [pc, #544]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d049      	beq.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a87      	ldr	r2, [pc, #540]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d042      	beq.n	800282e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a85      	ldr	r2, [pc, #532]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d03a      	beq.n	8002828 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a84      	ldr	r2, [pc, #528]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d032      	beq.n	8002822 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a82      	ldr	r2, [pc, #520]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02a      	beq.n	800281c <HAL_DMAEx_MultiBufferStart_IT+0x128>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a81      	ldr	r2, [pc, #516]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_DMAEx_MultiBufferStart_IT+0x122>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7f      	ldr	r2, [pc, #508]	; (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01a      	beq.n	8002810 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7e      	ldr	r2, [pc, #504]	; (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d012      	beq.n	800280a <HAL_DMAEx_MultiBufferStart_IT+0x116>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a7c      	ldr	r2, [pc, #496]	; (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00a      	beq.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7b      	ldr	r2, [pc, #492]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d102      	bne.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 80027f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027fc:	e01e      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80027fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002802:	e01b      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002804:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002808:	e018      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800280a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800280e:	e015      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002810:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002814:	e012      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800281a:	e00f      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800281c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002820:	e00c      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002826:	e009      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800282c:	e006      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800282e:	2320      	movs	r3, #32
 8002830:	e004      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002832:	2320      	movs	r3, #32
 8002834:	e002      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002836:	2320      	movs	r3, #32
 8002838:	e000      	b.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800283a:	2320      	movs	r3, #32
 800283c:	4a69      	ldr	r2, [pc, #420]	; (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	e14f      	b.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800284a:	429a      	cmp	r2, r3
 800284c:	d960      	bls.n	8002910 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d057      	beq.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d050      	beq.n	8002904 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a55      	ldr	r2, [pc, #340]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d049      	beq.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d042      	beq.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d03a      	beq.n	80028f6 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d032      	beq.n	80028f0 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02a      	beq.n	80028ea <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01a      	beq.n	80028de <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4a      	ldr	r2, [pc, #296]	; (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d012      	beq.n	80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a49      	ldr	r2, [pc, #292]	; (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00a      	beq.n	80028d2 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d102      	bne.n	80028cc <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 80028c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028ca:	e01e      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028d0:	e01b      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d6:	e018      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028dc:	e015      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e2:	e012      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028e8:	e00f      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ee:	e00c      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028f4:	e009      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028fa:	e006      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80028fc:	2320      	movs	r3, #32
 80028fe:	e004      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002900:	2320      	movs	r3, #32
 8002902:	e002      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002904:	2320      	movs	r3, #32
 8002906:	e000      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002908:	2320      	movs	r3, #32
 800290a:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e0e8      	b.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b35      	ldr	r3, [pc, #212]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002918:	429a      	cmp	r2, r3
 800291a:	f240 8082 	bls.w	8002a22 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d078      	beq.n	8002a1a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d071      	beq.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x322>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d06a      	beq.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d063      	beq.n	8002a0e <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d05b      	beq.n	8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x314>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d053      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04b      	beq.n	80029fc <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d043      	beq.n	80029f6 <HAL_DMAEx_MultiBufferStart_IT+0x302>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03b      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d012      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a15      	ldr	r2, [pc, #84]	; (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00a      	beq.n	80029a2 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d102      	bne.n	800299c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 8002996:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800299a:	e03f      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800299c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029a0:	e03c      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a6:	e039      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ac:	e036      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029ae:	bf00      	nop
 80029b0:	40026458 	.word	0x40026458
 80029b4:	40026010 	.word	0x40026010
 80029b8:	40026410 	.word	0x40026410
 80029bc:	40026070 	.word	0x40026070
 80029c0:	40026470 	.word	0x40026470
 80029c4:	40026028 	.word	0x40026028
 80029c8:	40026428 	.word	0x40026428
 80029cc:	40026088 	.word	0x40026088
 80029d0:	40026488 	.word	0x40026488
 80029d4:	40026040 	.word	0x40026040
 80029d8:	40026440 	.word	0x40026440
 80029dc:	400260a0 	.word	0x400260a0
 80029e0:	400264a0 	.word	0x400264a0
 80029e4:	40026400 	.word	0x40026400
 80029e8:	400260b8 	.word	0x400260b8
 80029ec:	40026058 	.word	0x40026058
 80029f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029f4:	e012      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fa:	e00f      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80029fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a00:	e00c      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a06:	e009      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a0c:	e006      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e004      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a12:	2320      	movs	r3, #32
 8002a14:	e002      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a16:	2320      	movs	r3, #32
 8002a18:	e000      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	4a8c      	ldr	r2, [pc, #560]	; (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8002a1e:	60d3      	str	r3, [r2, #12]
 8002a20:	e05f      	b.n	8002ae2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8b      	ldr	r2, [pc, #556]	; (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d057      	beq.n	8002adc <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a89      	ldr	r2, [pc, #548]	; (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d050      	beq.n	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a88      	ldr	r2, [pc, #544]	; (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d049      	beq.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a86      	ldr	r2, [pc, #536]	; (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d042      	beq.n	8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a85      	ldr	r2, [pc, #532]	; (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d03a      	beq.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a83      	ldr	r2, [pc, #524]	; (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d032      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a82      	ldr	r2, [pc, #520]	; (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02a      	beq.n	8002abe <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a80      	ldr	r2, [pc, #512]	; (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7f      	ldr	r2, [pc, #508]	; (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d01a      	beq.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7d      	ldr	r2, [pc, #500]	; (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d012      	beq.n	8002aac <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	; (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d102      	bne.n	8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 8002a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a9e:	e01e      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aa4:	e01b      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002aa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aaa:	e018      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002aac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ab0:	e015      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ab6:	e012      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002abc:	e00f      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ac2:	e00c      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ac8:	e009      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ace:	e006      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e004      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e002      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e000      	b.n	8002ade <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002adc:	2320      	movs	r3, #32
 8002ade:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8002ae0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d960      	bls.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d057      	beq.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a56      	ldr	r2, [pc, #344]	; (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d050      	beq.n	8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d049      	beq.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a53      	ldr	r2, [pc, #332]	; (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d042      	beq.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d03a      	beq.n	8002b96 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d032      	beq.n	8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d02a      	beq.n	8002b8a <HAL_DMAEx_MultiBufferStart_IT+0x496>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x490>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01a      	beq.n	8002b7e <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d012      	beq.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x484>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a49      	ldr	r2, [pc, #292]	; (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00a      	beq.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a47      	ldr	r2, [pc, #284]	; (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d102      	bne.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8002b66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b6a:	e01e      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b70:	e01b      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b76:	e018      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b7c:	e015      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b82:	e012      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b88:	e00f      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	e00c      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b94:	e009      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9a:	e006      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	e004      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	e002      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	e000      	b.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002ba8:	2310      	movs	r3, #16
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002bac:	60d3      	str	r3, [r2, #12]
 8002bae:	e14f      	b.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f240 8082 	bls.w	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d078      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d071      	beq.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d06a      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d063      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d05b      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d053      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04b      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d043      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d03b      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d012      	beq.n	8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00a      	beq.n	8002c42 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d102      	bne.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x548>
 8002c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c3a:	e03f      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c40:	e03c      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c46:	e039      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c4c:	e036      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c4e:	bf00      	nop
 8002c50:	40026000 	.word	0x40026000
 8002c54:	40026010 	.word	0x40026010
 8002c58:	40026410 	.word	0x40026410
 8002c5c:	40026070 	.word	0x40026070
 8002c60:	40026470 	.word	0x40026470
 8002c64:	40026028 	.word	0x40026028
 8002c68:	40026428 	.word	0x40026428
 8002c6c:	40026088 	.word	0x40026088
 8002c70:	40026488 	.word	0x40026488
 8002c74:	40026040 	.word	0x40026040
 8002c78:	40026440 	.word	0x40026440
 8002c7c:	400260a0 	.word	0x400260a0
 8002c80:	400264a0 	.word	0x400264a0
 8002c84:	40026458 	.word	0x40026458
 8002c88:	40026400 	.word	0x40026400
 8002c8c:	400260b8 	.word	0x400260b8
 8002c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c94:	e012      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9a:	e00f      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca0:	e00c      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca6:	e009      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cac:	e006      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cae:	2310      	movs	r3, #16
 8002cb0:	e004      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	e002      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	e000      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cba:	2310      	movs	r3, #16
 8002cbc:	4a8c      	ldr	r2, [pc, #560]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 8002cbe:	6093      	str	r3, [r2, #8]
 8002cc0:	e0c6      	b.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b8a      	ldr	r3, [pc, #552]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d960      	bls.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a89      	ldr	r2, [pc, #548]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d057      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a87      	ldr	r2, [pc, #540]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d050      	beq.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a86      	ldr	r2, [pc, #536]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d049      	beq.n	8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a84      	ldr	r2, [pc, #528]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d042      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d03a      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a81      	ldr	r2, [pc, #516]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d032      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a80      	ldr	r2, [pc, #512]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d02a      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7e      	ldr	r2, [pc, #504]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7d      	ldr	r2, [pc, #500]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01a      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7b      	ldr	r2, [pc, #492]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d012      	beq.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00a      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a78      	ldr	r2, [pc, #480]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d102      	bne.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8002d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d4a:	e01e      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d50:	e01b      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d56:	e018      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d5c:	e015      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d62:	e012      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d68:	e00f      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6e:	e00c      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	e009      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7a:	e006      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	e004      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d80:	2310      	movs	r3, #16
 8002d82:	e002      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d84:	2310      	movs	r3, #16
 8002d86:	e000      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002d8c:	60d3      	str	r3, [r2, #12]
 8002d8e:	e05f      	b.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d057      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a57      	ldr	r2, [pc, #348]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d050      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a55      	ldr	r2, [pc, #340]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d049      	beq.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a54      	ldr	r2, [pc, #336]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d042      	beq.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03a      	beq.n	8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d032      	beq.n	8002e32 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4f      	ldr	r2, [pc, #316]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02a      	beq.n	8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4e      	ldr	r2, [pc, #312]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4c      	ldr	r2, [pc, #304]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01a      	beq.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d012      	beq.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x726>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a49      	ldr	r2, [pc, #292]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00a      	beq.n	8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x720>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a48      	ldr	r2, [pc, #288]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 8002e08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e0c:	e01e      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e12:	e01b      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e18:	e018      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e1e:	e015      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e24:	e012      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2a:	e00f      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e30:	e00c      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e36:	e009      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3c:	e006      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e3e:	2310      	movs	r3, #16
 8002e40:	e004      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e42:	2310      	movs	r3, #16
 8002e44:	e002      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e46:	2310      	movs	r3, #16
 8002e48:	e000      	b.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	4a36      	ldr	r2, [pc, #216]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002e4e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f240 8082 	bls.w	8002f62 <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d078      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d071      	beq.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x862>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d06a      	beq.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d063      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d05b      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d053      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04b      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x848>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d043      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d03b      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d012      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00a      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d102      	bne.n	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 8002ed6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eda:	e03f      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee0:	e03c      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002ee2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ee6:	e039      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002ee8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eec:	e036      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002eee:	bf00      	nop
 8002ef0:	40026400 	.word	0x40026400
 8002ef4:	40026058 	.word	0x40026058
 8002ef8:	40026010 	.word	0x40026010
 8002efc:	40026410 	.word	0x40026410
 8002f00:	40026070 	.word	0x40026070
 8002f04:	40026470 	.word	0x40026470
 8002f08:	40026028 	.word	0x40026028
 8002f0c:	40026428 	.word	0x40026428
 8002f10:	40026088 	.word	0x40026088
 8002f14:	40026488 	.word	0x40026488
 8002f18:	40026040 	.word	0x40026040
 8002f1c:	40026440 	.word	0x40026440
 8002f20:	400260a0 	.word	0x400260a0
 8002f24:	400264a0 	.word	0x400264a0
 8002f28:	40026000 	.word	0x40026000
 8002f2c:	40026458 	.word	0x40026458
 8002f30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f34:	e012      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3a:	e00f      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f40:	e00c      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f46:	e009      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f4c:	e006      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	e004      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f52:	2308      	movs	r3, #8
 8002f54:	e002      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e000      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	4a8c      	ldr	r2, [pc, #560]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8002f5e:	60d3      	str	r3, [r2, #12]
 8002f60:	e14e      	b.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d960      	bls.n	8003030 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a89      	ldr	r2, [pc, #548]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d057      	beq.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a87      	ldr	r2, [pc, #540]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d050      	beq.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a86      	ldr	r2, [pc, #536]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d049      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a84      	ldr	r2, [pc, #528]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d042      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03a      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a81      	ldr	r2, [pc, #516]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d032      	beq.n	8003010 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a80      	ldr	r2, [pc, #512]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d02a      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0x916>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a7e      	ldr	r2, [pc, #504]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d022      	beq.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7d      	ldr	r2, [pc, #500]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d01a      	beq.n	8002ffe <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a7b      	ldr	r2, [pc, #492]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d012      	beq.n	8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0x904>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7a      	ldr	r2, [pc, #488]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00a      	beq.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a78      	ldr	r2, [pc, #480]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d102      	bne.n	8002fec <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8002fe6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fea:	e01e      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff0:	e01b      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002ff2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ff6:	e018      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002ff8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ffc:	e015      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8002ffe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003002:	e012      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003008:	e00f      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800300a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800300e:	e00c      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003014:	e009      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800301a:	e006      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800301c:	2308      	movs	r3, #8
 800301e:	e004      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003020:	2308      	movs	r3, #8
 8003022:	e002      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003024:	2308      	movs	r3, #8
 8003026:	e000      	b.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003028:	2308      	movs	r3, #8
 800302a:	4a59      	ldr	r2, [pc, #356]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e0e7      	b.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d960      	bls.n	80030fe <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d057      	beq.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d050      	beq.n	80030f2 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d049      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d042      	beq.n	80030ea <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4f      	ldr	r2, [pc, #316]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d03a      	beq.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d032      	beq.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02a      	beq.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a49      	ldr	r2, [pc, #292]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01a      	beq.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a48      	ldr	r2, [pc, #288]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d012      	beq.n	80030c6 <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00a      	beq.n	80030c0 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d102      	bne.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 80030b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030b8:	e01e      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	e01b      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030c4:	e018      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030ca:	e015      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030d0:	e012      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d6:	e00f      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030dc:	e00c      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e2:	e009      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e8:	e006      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030ea:	2308      	movs	r3, #8
 80030ec:	e004      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030ee:	2308      	movs	r3, #8
 80030f0:	e002      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030f2:	2308      	movs	r3, #8
 80030f4:	e000      	b.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80030f6:	2308      	movs	r3, #8
 80030f8:	4a34      	ldr	r2, [pc, #208]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80030fa:	60d3      	str	r3, [r2, #12]
 80030fc:	e080      	b.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d078      	beq.n	80031fa <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d071      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d06a      	beq.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d063      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d05b      	beq.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d053      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04b      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d043      	beq.n	80031d6 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d03b      	beq.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d012      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00a      	beq.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d102      	bne.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 8003176:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800317a:	e03f      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800317c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003180:	e03c      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003182:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003186:	e039      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003188:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800318c:	e036      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800318e:	bf00      	nop
 8003190:	40026400 	.word	0x40026400
 8003194:	400260b8 	.word	0x400260b8
 8003198:	40026010 	.word	0x40026010
 800319c:	40026410 	.word	0x40026410
 80031a0:	40026070 	.word	0x40026070
 80031a4:	40026470 	.word	0x40026470
 80031a8:	40026028 	.word	0x40026028
 80031ac:	40026428 	.word	0x40026428
 80031b0:	40026088 	.word	0x40026088
 80031b4:	40026488 	.word	0x40026488
 80031b8:	40026040 	.word	0x40026040
 80031bc:	40026440 	.word	0x40026440
 80031c0:	400260a0 	.word	0x400260a0
 80031c4:	400264a0 	.word	0x400264a0
 80031c8:	40026058 	.word	0x40026058
 80031cc:	40026000 	.word	0x40026000
 80031d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031d4:	e012      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031da:	e00f      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e0:	e00c      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e6:	e009      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ec:	e006      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031ee:	2308      	movs	r3, #8
 80031f0:	e004      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031f2:	2308      	movs	r3, #8
 80031f4:	e002      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031f6:	2308      	movs	r3, #8
 80031f8:	e000      	b.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031fa:	2308      	movs	r3, #8
 80031fc:	4a8a      	ldr	r2, [pc, #552]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 80031fe:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d960      	bls.n	80032ce <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a87      	ldr	r2, [pc, #540]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d057      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a86      	ldr	r2, [pc, #536]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d050      	beq.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a84      	ldr	r2, [pc, #528]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d049      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a83      	ldr	r2, [pc, #524]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d042      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a81      	ldr	r2, [pc, #516]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03a      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a80      	ldr	r2, [pc, #512]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d032      	beq.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7e      	ldr	r2, [pc, #504]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02a      	beq.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7d      	ldr	r2, [pc, #500]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7b      	ldr	r2, [pc, #492]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01a      	beq.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d012      	beq.n	8003296 <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00a      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a77      	ldr	r2, [pc, #476]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d102      	bne.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 8003284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003288:	e01e      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800328a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800328e:	e01b      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003294:	e018      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003296:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800329a:	e015      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800329c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032a0:	e012      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a6:	e00f      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ac:	e00c      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032b2:	e009      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032b8:	e006      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e004      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032be:	2304      	movs	r3, #4
 80032c0:	e002      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e000      	b.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80032c6:	2304      	movs	r3, #4
 80032c8:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80032ca:	60d3      	str	r3, [r2, #12]
 80032cc:	e150      	b.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d960      	bls.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a54      	ldr	r2, [pc, #336]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d057      	beq.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d050      	beq.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a51      	ldr	r2, [pc, #324]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d049      	beq.n	800338c <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d042      	beq.n	8003388 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4e      	ldr	r2, [pc, #312]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03a      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4c      	ldr	r2, [pc, #304]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d032      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a4b      	ldr	r2, [pc, #300]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d02a      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a49      	ldr	r2, [pc, #292]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a48      	ldr	r2, [pc, #288]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01a      	beq.n	800336a <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a46      	ldr	r2, [pc, #280]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d012      	beq.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a45      	ldr	r2, [pc, #276]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00a      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a43      	ldr	r2, [pc, #268]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d102      	bne.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8003352:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003356:	e01e      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335c:	e01b      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800335e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003362:	e018      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003364:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003368:	e015      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800336a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800336e:	e012      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003374:	e00f      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800337a:	e00c      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800337c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003380:	e009      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003386:	e006      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003388:	2304      	movs	r3, #4
 800338a:	e004      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800338c:	2304      	movs	r3, #4
 800338e:	e002      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003390:	2304      	movs	r3, #4
 8003392:	e000      	b.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003394:	2304      	movs	r3, #4
 8003396:	4a32      	ldr	r2, [pc, #200]	; (8003460 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003398:	6093      	str	r3, [r2, #8]
 800339a:	e0e9      	b.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f240 8083 	bls.w	80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a20      	ldr	r2, [pc, #128]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d079      	beq.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d072      	beq.n	80034a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d06b      	beq.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d064      	beq.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d05c      	beq.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d054      	beq.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04c      	beq.n	800348a <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a15      	ldr	r2, [pc, #84]	; (800344c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d044      	beq.n	8003484 <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03c      	beq.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d034      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d02c      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d124      	bne.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8003422:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003426:	e040      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003428:	40026000 	.word	0x40026000
 800342c:	40026458 	.word	0x40026458
 8003430:	40026010 	.word	0x40026010
 8003434:	40026410 	.word	0x40026410
 8003438:	40026070 	.word	0x40026070
 800343c:	40026470 	.word	0x40026470
 8003440:	40026028 	.word	0x40026028
 8003444:	40026428 	.word	0x40026428
 8003448:	40026088 	.word	0x40026088
 800344c:	40026488 	.word	0x40026488
 8003450:	40026040 	.word	0x40026040
 8003454:	40026440 	.word	0x40026440
 8003458:	400260a0 	.word	0x400260a0
 800345c:	400264a0 	.word	0x400264a0
 8003460:	40026400 	.word	0x40026400
 8003464:	400260b8 	.word	0x400260b8
 8003468:	40026058 	.word	0x40026058
 800346c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003470:	e01b      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003476:	e018      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003478:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800347c:	e015      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800347e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003482:	e012      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003488:	e00f      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800348a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348e:	e00c      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003494:	e009      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349a:	e006      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800349c:	2304      	movs	r3, #4
 800349e:	e004      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e002      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e000      	b.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034a8:	2304      	movs	r3, #4
 80034aa:	4a8b      	ldr	r2, [pc, #556]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 80034ac:	60d3      	str	r3, [r2, #12]
 80034ae:	e05f      	b.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a89      	ldr	r2, [pc, #548]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d057      	beq.n	800356a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a88      	ldr	r2, [pc, #544]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d050      	beq.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a86      	ldr	r2, [pc, #536]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d049      	beq.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a85      	ldr	r2, [pc, #532]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d042      	beq.n	800355e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a83      	ldr	r2, [pc, #524]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d03a      	beq.n	8003558 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a82      	ldr	r2, [pc, #520]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d032      	beq.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a80      	ldr	r2, [pc, #512]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d02a      	beq.n	800354c <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7f      	ldr	r2, [pc, #508]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d022      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a7d      	ldr	r2, [pc, #500]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01a      	beq.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7c      	ldr	r2, [pc, #496]	; (8003700 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d012      	beq.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7a      	ldr	r2, [pc, #488]	; (8003704 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00a      	beq.n	8003534 <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a79      	ldr	r2, [pc, #484]	; (8003708 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d102      	bne.n	800352e <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 8003528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800352c:	e01e      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800352e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003532:	e01b      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003534:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003538:	e018      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800353a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800353e:	e015      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003544:	e012      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354a:	e00f      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800354c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003550:	e00c      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003556:	e009      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800355c:	e006      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800355e:	2304      	movs	r3, #4
 8003560:	e004      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003562:	2304      	movs	r3, #4
 8003564:	e002      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8003566:	2304      	movs	r3, #4
 8003568:	e000      	b.n	800356c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800356a:	2304      	movs	r3, #4
 800356c:	4a5a      	ldr	r2, [pc, #360]	; (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 800356e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003578:	429a      	cmp	r2, r3
 800357a:	d95c      	bls.n	8003636 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a56      	ldr	r2, [pc, #344]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d053      	beq.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a55      	ldr	r2, [pc, #340]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04c      	beq.n	800362a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a53      	ldr	r2, [pc, #332]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a52      	ldr	r2, [pc, #328]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d03e      	beq.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a50      	ldr	r2, [pc, #320]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d037      	beq.n	800361e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a4f      	ldr	r2, [pc, #316]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d030      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a4d      	ldr	r2, [pc, #308]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d029      	beq.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4c      	ldr	r2, [pc, #304]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01a      	beq.n	800360c <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a49      	ldr	r2, [pc, #292]	; (8003700 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d012      	beq.n	8003606 <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a47      	ldr	r2, [pc, #284]	; (8003704 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00a      	beq.n	8003600 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a46      	ldr	r2, [pc, #280]	; (8003708 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d102      	bne.n	80035fa <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 80035f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035f8:	e01a      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80035fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035fe:	e017      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003604:	e014      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800360a:	e011      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800360c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003610:	e00e      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003612:	2340      	movs	r3, #64	; 0x40
 8003614:	e00c      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	e00a      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800361a:	2340      	movs	r3, #64	; 0x40
 800361c:	e008      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800361e:	2340      	movs	r3, #64	; 0x40
 8003620:	e006      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003622:	2301      	movs	r3, #1
 8003624:	e004      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003626:	2301      	movs	r3, #1
 8003628:	e002      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800362e:	2301      	movs	r3, #1
 8003630:	4a37      	ldr	r2, [pc, #220]	; (8003710 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e141      	b.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800363e:	429a      	cmp	r2, r3
 8003640:	d97c      	bls.n	800373c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d073      	beq.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a23      	ldr	r2, [pc, #140]	; (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d06c      	beq.n	8003730 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d065      	beq.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d05e      	beq.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d057      	beq.n	8003724 <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d050      	beq.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d049      	beq.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d042      	beq.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d01a      	beq.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a17      	ldr	r2, [pc, #92]	; (8003700 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d012      	beq.n	80036cc <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	; (8003704 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00a      	beq.n	80036c6 <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d102      	bne.n	80036c0 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 80036ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036be:	e03a      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80036c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036c4:	e037      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80036c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ca:	e034      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80036cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d0:	e031      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80036d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d6:	e02e      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80036d8:	40026000 	.word	0x40026000
 80036dc:	40026010 	.word	0x40026010
 80036e0:	40026410 	.word	0x40026410
 80036e4:	40026070 	.word	0x40026070
 80036e8:	40026470 	.word	0x40026470
 80036ec:	40026028 	.word	0x40026028
 80036f0:	40026428 	.word	0x40026428
 80036f4:	40026088 	.word	0x40026088
 80036f8:	40026488 	.word	0x40026488
 80036fc:	40026040 	.word	0x40026040
 8003700:	40026440 	.word	0x40026440
 8003704:	400260a0 	.word	0x400260a0
 8003708:	400264a0 	.word	0x400264a0
 800370c:	40026458 	.word	0x40026458
 8003710:	40026400 	.word	0x40026400
 8003714:	400260b8 	.word	0x400260b8
 8003718:	2340      	movs	r3, #64	; 0x40
 800371a:	e00c      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800371c:	2340      	movs	r3, #64	; 0x40
 800371e:	e00a      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003720:	2340      	movs	r3, #64	; 0x40
 8003722:	e008      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003724:	2340      	movs	r3, #64	; 0x40
 8003726:	e006      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003728:	2301      	movs	r3, #1
 800372a:	e004      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800372c:	2301      	movs	r3, #1
 800372e:	e002      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003734:	2301      	movs	r3, #1
 8003736:	4a7b      	ldr	r2, [pc, #492]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 8003738:	6093      	str	r3, [r2, #8]
 800373a:	e0be      	b.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b79      	ldr	r3, [pc, #484]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d95c      	bls.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a77      	ldr	r2, [pc, #476]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d053      	beq.n	80037fa <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04c      	beq.n	80037f6 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a74      	ldr	r2, [pc, #464]	; (8003934 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a73      	ldr	r2, [pc, #460]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03e      	beq.n	80037ee <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a71      	ldr	r2, [pc, #452]	; (800393c <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d037      	beq.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a70      	ldr	r2, [pc, #448]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d030      	beq.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6e      	ldr	r2, [pc, #440]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d029      	beq.n	80037e2 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6d      	ldr	r2, [pc, #436]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6b      	ldr	r2, [pc, #428]	; (800394c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01a      	beq.n	80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d012      	beq.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a68      	ldr	r2, [pc, #416]	; (8003954 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00a      	beq.n	80037cc <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a67      	ldr	r2, [pc, #412]	; (8003958 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d102      	bne.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 80037c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c4:	e01a      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037ca:	e017      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037d0:	e014      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037d6:	e011      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037dc:	e00e      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037de:	2340      	movs	r3, #64	; 0x40
 80037e0:	e00c      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037e2:	2340      	movs	r3, #64	; 0x40
 80037e4:	e00a      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037e6:	2340      	movs	r3, #64	; 0x40
 80037e8:	e008      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	e006      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e004      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e002      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4a57      	ldr	r2, [pc, #348]	; (800395c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80037fe:	60d3      	str	r3, [r2, #12]
 8003800:	e05b      	b.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a49      	ldr	r2, [pc, #292]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d053      	beq.n	80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a47      	ldr	r2, [pc, #284]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04c      	beq.n	80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a46      	ldr	r2, [pc, #280]	; (8003934 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a44      	ldr	r2, [pc, #272]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d03e      	beq.n	80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a43      	ldr	r2, [pc, #268]	; (800393c <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d037      	beq.n	80038a4 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a41      	ldr	r2, [pc, #260]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d030      	beq.n	80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d029      	beq.n	800389c <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01a      	beq.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d012      	beq.n	800388c <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3a      	ldr	r2, [pc, #232]	; (8003954 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00a      	beq.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a38      	ldr	r2, [pc, #224]	; (8003958 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d102      	bne.n	8003880 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 800387a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387e:	e01a      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003880:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003884:	e017      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388a:	e014      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800388c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003890:	e011      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003896:	e00e      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003898:	2340      	movs	r3, #64	; 0x40
 800389a:	e00c      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	e00a      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038a0:	2340      	movs	r3, #64	; 0x40
 80038a2:	e008      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038a4:	2340      	movs	r3, #64	; 0x40
 80038a6:	e006      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e004      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e002      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038b4:	2301      	movs	r3, #1
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80038b8:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0216 	orr.w	r2, r2, #22
 80038c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0208 	orr.w	r2, r2, #8
 80038f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e005      	b.n	8003918 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003918:	7dfb      	ldrb	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40026400 	.word	0x40026400
 8003928:	40026058 	.word	0x40026058
 800392c:	40026010 	.word	0x40026010
 8003930:	40026410 	.word	0x40026410
 8003934:	40026070 	.word	0x40026070
 8003938:	40026470 	.word	0x40026470
 800393c:	40026028 	.word	0x40026028
 8003940:	40026428 	.word	0x40026428
 8003944:	40026088 	.word	0x40026088
 8003948:	40026488 	.word	0x40026488
 800394c:	40026040 	.word	0x40026040
 8003950:	40026440 	.word	0x40026440
 8003954:	400260a0 	.word	0x400260a0
 8003958:	400264a0 	.word	0x400264a0
 800395c:	40026000 	.word	0x40026000

08003960 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	e003      	b.n	8003986 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d108      	bne.n	80039c4 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039c2:	e007      	b.n	80039d4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06a      	b.n	8003ac8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2223      	movs	r2, #35	; 0x23
 8003a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fc ff35 	bl	8000874 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_ETH_Init+0xf0>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <HAL_ETH_Init+0xf0>)
 8003a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a14:	6453      	str	r3, [r2, #68]	; 0x44
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <HAL_ETH_Init+0xf0>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_ETH_Init+0xf4>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_ETH_Init+0xf4>)
 8003a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_ETH_Init+0xf4>)
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4927      	ldr	r1, [pc, #156]	; (8003ad4 <HAL_ETH_Init+0xf4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HAL_ETH_Init+0xf4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a58:	f7fd fe2a 	bl	80016b0 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a5e:	e011      	b.n	8003a84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a60:	f7fd fe26 	bl	80016b0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a6e:	d909      	bls.n	8003a84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2204      	movs	r2, #4
 8003a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	22e0      	movs	r2, #224	; 0xe0
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e021      	b.n	8003ac8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e4      	bne.n	8003a60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f958 	bl	8003d4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9ff 	bl	8003ea0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa55 	bl	8003f52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	461a      	mov	r2, r3
 8003aae:	2100      	movs	r1, #0
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9bd 	bl	8003e30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800

08003ad8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <ETH_SetMACConfig+0x15c>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	7c1b      	ldrb	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <ETH_SetMACConfig+0x28>
 8003afa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003afe:	e000      	b.n	8003b02 <ETH_SetMACConfig+0x2a>
 8003b00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	7c5b      	ldrb	r3, [r3, #17]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <ETH_SetMACConfig+0x38>
 8003b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0e:	e000      	b.n	8003b12 <ETH_SetMACConfig+0x3a>
 8003b10:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b12:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	7fdb      	ldrb	r3, [r3, #31]
 8003b1e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b20:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	7f92      	ldrb	r2, [r2, #30]
 8003b2c:	2a00      	cmp	r2, #0
 8003b2e:	d102      	bne.n	8003b36 <ETH_SetMACConfig+0x5e>
 8003b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b34:	e000      	b.n	8003b38 <ETH_SetMACConfig+0x60>
 8003b36:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	7f1b      	ldrb	r3, [r3, #28]
 8003b3e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b40:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	791b      	ldrb	r3, [r3, #4]
 8003b4c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b56:	2a00      	cmp	r2, #0
 8003b58:	d102      	bne.n	8003b60 <ETH_SetMACConfig+0x88>
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	e000      	b.n	8003b62 <ETH_SetMACConfig+0x8a>
 8003b60:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	7bdb      	ldrb	r3, [r3, #15]
 8003b68:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b6a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b78:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f7fd fd98 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d101      	bne.n	8003bc6 <ETH_SetMACConfig+0xee>
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	e000      	b.n	8003bc8 <ETH_SetMACConfig+0xf0>
 8003bc6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bc8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003bd6:	2a01      	cmp	r2, #1
 8003bd8:	d101      	bne.n	8003bde <ETH_SetMACConfig+0x106>
 8003bda:	2208      	movs	r2, #8
 8003bdc:	e000      	b.n	8003be0 <ETH_SetMACConfig+0x108>
 8003bde:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003be0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003be8:	2a01      	cmp	r2, #1
 8003bea:	d101      	bne.n	8003bf0 <ETH_SetMACConfig+0x118>
 8003bec:	2204      	movs	r2, #4
 8003bee:	e000      	b.n	8003bf2 <ETH_SetMACConfig+0x11a>
 8003bf0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003bf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003bfa:	2a01      	cmp	r2, #1
 8003bfc:	d101      	bne.n	8003c02 <ETH_SetMACConfig+0x12a>
 8003bfe:	2202      	movs	r2, #2
 8003c00:	e000      	b.n	8003c04 <ETH_SetMACConfig+0x12c>
 8003c02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c04:	4313      	orrs	r3, r2
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7fd fd53 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	619a      	str	r2, [r3, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	ff20810f 	.word	0xff20810f

08003c38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <ETH_SetDMAConfig+0x110>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	7b1b      	ldrb	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <ETH_SetDMAConfig+0x2c>
 8003c5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c62:	e000      	b.n	8003c66 <ETH_SetDMAConfig+0x2e>
 8003c64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7b5b      	ldrb	r3, [r3, #13]
 8003c6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	7f52      	ldrb	r2, [r2, #29]
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d102      	bne.n	8003c7c <ETH_SetDMAConfig+0x44>
 8003c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c7a:	e000      	b.n	8003c7e <ETH_SetDMAConfig+0x46>
 8003c7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	7b9b      	ldrb	r3, [r3, #14]
 8003c84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	7f1b      	ldrb	r3, [r3, #28]
 8003c92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	7f9b      	ldrb	r3, [r3, #30]
 8003c9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ca2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003caa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cac:	4313      	orrs	r3, r2
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7fd fcfa 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003cf2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003cf8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	f7fd fccb 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	f8de3f23 	.word	0xf8de3f23

08003d4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b0a6      	sub	sp, #152	; 0x98
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d60:	2300      	movs	r3, #0
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003dae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe86 	bl	8003ad8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e1c:	f107 0308 	add.w	r3, r7, #8
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ff08 	bl	8003c38 <ETH_SetDMAConfig>
}
 8003e28:	bf00      	nop
 8003e2a:	3798      	adds	r7, #152	; 0x98
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3305      	adds	r3, #5
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	3204      	adds	r2, #4
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <ETH_MACAddressConfig+0x68>)
 8003e52:	4413      	add	r3, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3303      	adds	r3, #3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	061a      	lsls	r2, r3, #24
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3302      	adds	r3, #2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	4313      	orrs	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <ETH_MACAddressConfig+0x6c>)
 8003e82:	4413      	add	r3, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	6013      	str	r3, [r2, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40028040 	.word	0x40028040
 8003e9c:	40028044 	.word	0x40028044

08003ea0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e03e      	b.n	8003f2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68d9      	ldr	r1, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	440b      	add	r3, r1
 8003ebe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	3206      	adds	r2, #6
 8003ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d80c      	bhi.n	8003f10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	e004      	b.n	8003f1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d9bd      	bls.n	8003eae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f44:	611a      	str	r2, [r3, #16]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e046      	b.n	8003fee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6919      	ldr	r1, [r3, #16]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003fa4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	3212      	adds	r2, #18
 8003fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d80c      	bhi.n	8003fde <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6919      	ldr	r1, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e004      	b.n	8003fe8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d9b5      	bls.n	8003f60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401e:	60da      	str	r2, [r3, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e175      	b.n	8004338 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	f040 8164 	bne.w	8004332 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d005      	beq.n	8004082 <HAL_GPIO_Init+0x56>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d130      	bne.n	80040e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040b8:	2201      	movs	r2, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 0201 	and.w	r2, r3, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d017      	beq.n	8004120 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d123      	bne.n	8004174 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	08da      	lsrs	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3208      	adds	r2, #8
 8004134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	220f      	movs	r2, #15
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	08da      	lsrs	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3208      	adds	r2, #8
 800416e:	69b9      	ldr	r1, [r7, #24]
 8004170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2203      	movs	r2, #3
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0203 	and.w	r2, r3, #3
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80be 	beq.w	8004332 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b6:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_GPIO_Init+0x324>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	4a65      	ldr	r2, [pc, #404]	; (8004350 <HAL_GPIO_Init+0x324>)
 80041bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041c0:	6453      	str	r3, [r2, #68]	; 0x44
 80041c2:	4b63      	ldr	r3, [pc, #396]	; (8004350 <HAL_GPIO_Init+0x324>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041ce:	4a61      	ldr	r2, [pc, #388]	; (8004354 <HAL_GPIO_Init+0x328>)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	3302      	adds	r3, #2
 80041d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a58      	ldr	r2, [pc, #352]	; (8004358 <HAL_GPIO_Init+0x32c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d037      	beq.n	800426a <HAL_GPIO_Init+0x23e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a57      	ldr	r2, [pc, #348]	; (800435c <HAL_GPIO_Init+0x330>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_GPIO_Init+0x23a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a56      	ldr	r2, [pc, #344]	; (8004360 <HAL_GPIO_Init+0x334>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02b      	beq.n	8004262 <HAL_GPIO_Init+0x236>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a55      	ldr	r2, [pc, #340]	; (8004364 <HAL_GPIO_Init+0x338>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d025      	beq.n	800425e <HAL_GPIO_Init+0x232>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a54      	ldr	r2, [pc, #336]	; (8004368 <HAL_GPIO_Init+0x33c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01f      	beq.n	800425a <HAL_GPIO_Init+0x22e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a53      	ldr	r2, [pc, #332]	; (800436c <HAL_GPIO_Init+0x340>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d019      	beq.n	8004256 <HAL_GPIO_Init+0x22a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a52      	ldr	r2, [pc, #328]	; (8004370 <HAL_GPIO_Init+0x344>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <HAL_GPIO_Init+0x226>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a51      	ldr	r2, [pc, #324]	; (8004374 <HAL_GPIO_Init+0x348>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00d      	beq.n	800424e <HAL_GPIO_Init+0x222>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a50      	ldr	r2, [pc, #320]	; (8004378 <HAL_GPIO_Init+0x34c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <HAL_GPIO_Init+0x21e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a4f      	ldr	r2, [pc, #316]	; (800437c <HAL_GPIO_Init+0x350>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_GPIO_Init+0x21a>
 8004242:	2309      	movs	r3, #9
 8004244:	e012      	b.n	800426c <HAL_GPIO_Init+0x240>
 8004246:	230a      	movs	r3, #10
 8004248:	e010      	b.n	800426c <HAL_GPIO_Init+0x240>
 800424a:	2308      	movs	r3, #8
 800424c:	e00e      	b.n	800426c <HAL_GPIO_Init+0x240>
 800424e:	2307      	movs	r3, #7
 8004250:	e00c      	b.n	800426c <HAL_GPIO_Init+0x240>
 8004252:	2306      	movs	r3, #6
 8004254:	e00a      	b.n	800426c <HAL_GPIO_Init+0x240>
 8004256:	2305      	movs	r3, #5
 8004258:	e008      	b.n	800426c <HAL_GPIO_Init+0x240>
 800425a:	2304      	movs	r3, #4
 800425c:	e006      	b.n	800426c <HAL_GPIO_Init+0x240>
 800425e:	2303      	movs	r3, #3
 8004260:	e004      	b.n	800426c <HAL_GPIO_Init+0x240>
 8004262:	2302      	movs	r3, #2
 8004264:	e002      	b.n	800426c <HAL_GPIO_Init+0x240>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_GPIO_Init+0x240>
 800426a:	2300      	movs	r3, #0
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f002 0203 	and.w	r2, r2, #3
 8004272:	0092      	lsls	r2, r2, #2
 8004274:	4093      	lsls	r3, r2
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800427c:	4935      	ldr	r1, [pc, #212]	; (8004354 <HAL_GPIO_Init+0x328>)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	3302      	adds	r3, #2
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <HAL_GPIO_Init+0x354>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ae:	4a34      	ldr	r2, [pc, #208]	; (8004380 <HAL_GPIO_Init+0x354>)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042b4:	4b32      	ldr	r3, [pc, #200]	; (8004380 <HAL_GPIO_Init+0x354>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d8:	4a29      	ldr	r2, [pc, #164]	; (8004380 <HAL_GPIO_Init+0x354>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042de:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_GPIO_Init+0x354>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004302:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_GPIO_Init+0x354>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <HAL_GPIO_Init+0x354>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_GPIO_Init+0x354>)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3301      	adds	r3, #1
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	f67f ae86 	bls.w	800404c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3724      	adds	r7, #36	; 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	40013800 	.word	0x40013800
 8004358:	40020000 	.word	0x40020000
 800435c:	40020400 	.word	0x40020400
 8004360:	40020800 	.word	0x40020800
 8004364:	40020c00 	.word	0x40020c00
 8004368:	40021000 	.word	0x40021000
 800436c:	40021400 	.word	0x40021400
 8004370:	40021800 	.word	0x40021800
 8004374:	40021c00 	.word	0x40021c00
 8004378:	40022000 	.word	0x40022000
 800437c:	40022400 	.word	0x40022400
 8004380:	40013c00 	.word	0x40013c00

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043a0:	e003      	b.n	80043aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	041a      	lsls	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	619a      	str	r2, [r3, #24]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e07f      	b.n	80044ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fc08 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e006      	b.n	8004440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800443e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d104      	bne.n	8004452 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_I2C_Init+0x11c>)
 800445e:	430b      	orrs	r3, r1
 8004460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	02008000 	.word	0x02008000

080044d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
 80044e8:	4613      	mov	r3, r2
 80044ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	f040 80da 	bne.w	80046ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x30>
 8004504:	2302      	movs	r3, #2
 8004506:	e0d3      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1d8>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004510:	f7fd f8ce 	bl	80016b0 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fb4e 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0be      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2221      	movs	r2, #33	; 0x21
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2210      	movs	r2, #16
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	893a      	ldrh	r2, [r7, #8]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2bff      	cmp	r3, #255	; 0xff
 8004562:	d90e      	bls.n	8004582 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	b2da      	uxtb	r2, r3
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	4b51      	ldr	r3, [pc, #324]	; (80046b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fd38 	bl	8004ff0 <I2C_TransferConfig>
 8004580:	e06c      	b.n	800465c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	b2da      	uxtb	r2, r3
 8004592:	8979      	ldrh	r1, [r7, #10]
 8004594:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fd27 	bl	8004ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045a2:	e05b      	b.n	800465c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6a39      	ldr	r1, [r7, #32]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fb4b 	bl	8004c44 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e07b      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d034      	beq.n	800465c <HAL_I2C_Master_Transmit+0x184>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d130      	bne.n	800465c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2200      	movs	r2, #0
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fadd 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e04d      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2bff      	cmp	r3, #255	; 0xff
 800461c:	d90e      	bls.n	800463c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	22ff      	movs	r2, #255	; 0xff
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	b2da      	uxtb	r2, r3
 800462a:	8979      	ldrh	r1, [r7, #10]
 800462c:	2300      	movs	r3, #0
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fcdb 	bl	8004ff0 <I2C_TransferConfig>
 800463a:	e00f      	b.n	800465c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	b2da      	uxtb	r2, r3
 800464c:	8979      	ldrh	r1, [r7, #10]
 800464e:	2300      	movs	r3, #0
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fcca 	bl	8004ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d19e      	bne.n	80045a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	6a39      	ldr	r1, [r7, #32]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fb2a 	bl	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e01a      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2220      	movs	r2, #32
 8004680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_I2C_Master_Transmit+0x1e4>)
 800468e:	400b      	ands	r3, r1
 8004690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	80002000 	.word	0x80002000
 80046bc:	fe00e800 	.word	0xfe00e800

080046c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	461a      	mov	r2, r3
 80046cc:	460b      	mov	r3, r1
 80046ce:	817b      	strh	r3, [r7, #10]
 80046d0:	4613      	mov	r3, r2
 80046d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b20      	cmp	r3, #32
 80046de:	f040 80db 	bne.w	8004898 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_I2C_Master_Receive+0x30>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0d4      	b.n	800489a <HAL_I2C_Master_Receive+0x1da>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046f8:	f7fc ffda 	bl	80016b0 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fa5a 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0bf      	b.n	800489a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2222      	movs	r2, #34	; 0x22
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2210      	movs	r2, #16
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	893a      	ldrh	r2, [r7, #8]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	2bff      	cmp	r3, #255	; 0xff
 800474a:	d90e      	bls.n	800476a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	22ff      	movs	r2, #255	; 0xff
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <HAL_I2C_Master_Receive+0x1e4>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fc44 	bl	8004ff0 <I2C_TransferConfig>
 8004768:	e06d      	b.n	8004846 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	b2da      	uxtb	r2, r3
 800477a:	8979      	ldrh	r1, [r7, #10]
 800477c:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <HAL_I2C_Master_Receive+0x1e4>)
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fc33 	bl	8004ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800478a:	e05c      	b.n	8004846 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	6a39      	ldr	r1, [r7, #32]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fad3 	bl	8004d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e07c      	b.n	800489a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d034      	beq.n	8004846 <HAL_I2C_Master_Receive+0x186>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d130      	bne.n	8004846 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2200      	movs	r2, #0
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f9e8 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e04d      	b.n	800489a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2bff      	cmp	r3, #255	; 0xff
 8004806:	d90e      	bls.n	8004826 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	b2da      	uxtb	r2, r3
 8004814:	8979      	ldrh	r1, [r7, #10]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fbe6 	bl	8004ff0 <I2C_TransferConfig>
 8004824:	e00f      	b.n	8004846 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	b2da      	uxtb	r2, r3
 8004836:	8979      	ldrh	r1, [r7, #10]
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fbd5 	bl	8004ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d19d      	bne.n	800478c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6a39      	ldr	r1, [r7, #32]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fa35 	bl	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e01a      	b.n	800489a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2220      	movs	r2, #32
 800486a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_I2C_Master_Receive+0x1e8>)
 8004878:	400b      	ands	r3, r1
 800487a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e000      	b.n	800489a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004898:	2302      	movs	r3, #2
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	80002400 	.word	0x80002400
 80048a8:	fe00e800 	.word	0xfe00e800

080048ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	460b      	mov	r3, r1
 80048c0:	813b      	strh	r3, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	f040 80f9 	bne.w	8004ac6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_I2C_Mem_Write+0x34>
 80048da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0ed      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Mem_Write+0x4e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0e6      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004902:	f7fc fed5 	bl	80016b0 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2319      	movs	r3, #25
 800490e:	2201      	movs	r2, #1
 8004910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f955 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0d1      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800494c:	88f8      	ldrh	r0, [r7, #6]
 800494e:	893a      	ldrh	r2, [r7, #8]
 8004950:	8979      	ldrh	r1, [r7, #10]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	4603      	mov	r3, r0
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f8b9 	bl	8004ad4 <I2C_RequestMemoryWrite>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0a9      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2bff      	cmp	r3, #255	; 0xff
 800497c:	d90e      	bls.n	800499c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	b2da      	uxtb	r2, r3
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb2b 	bl	8004ff0 <I2C_TransferConfig>
 800499a:	e00f      	b.n	80049bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	8979      	ldrh	r1, [r7, #10]
 80049ae:	2300      	movs	r3, #0
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fb1a 	bl	8004ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f93f 	bl	8004c44 <I2C_WaitOnTXISFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e07b      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d034      	beq.n	8004a74 <HAL_I2C_Mem_Write+0x1c8>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d130      	bne.n	8004a74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f8d1 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e04d      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2bff      	cmp	r3, #255	; 0xff
 8004a34:	d90e      	bls.n	8004a54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	8979      	ldrh	r1, [r7, #10]
 8004a44:	2300      	movs	r3, #0
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 facf 	bl	8004ff0 <I2C_TransferConfig>
 8004a52:	e00f      	b.n	8004a74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	8979      	ldrh	r1, [r7, #10]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fabe 	bl	8004ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d19e      	bne.n	80049bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f91e 	bl	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e01a      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2220      	movs	r2, #32
 8004a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_I2C_Mem_Write+0x224>)
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	fe00e800 	.word	0xfe00e800

08004ad4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	4608      	mov	r0, r1
 8004ade:	4611      	mov	r1, r2
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	817b      	strh	r3, [r7, #10]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	813b      	strh	r3, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	8979      	ldrh	r1, [r7, #10]
 8004af4:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <I2C_RequestMemoryWrite+0xa4>)
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fa77 	bl	8004ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	69b9      	ldr	r1, [r7, #24]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f89c 	bl	8004c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e02c      	b.n	8004b70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
 8004b26:	e015      	b.n	8004b54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f882 	bl	8004c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e012      	b.n	8004b70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f830 	bl	8004bc4 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	80002000 	.word	0x80002000

08004b7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d007      	beq.n	8004bb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	619a      	str	r2, [r3, #24]
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd4:	e022      	b.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bdc:	d01e      	beq.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fc fd67 	bl	80016b0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d113      	bne.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e00f      	b.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d0cd      	beq.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c50:	e02c      	b.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f8ea 	bl	8004e30 <I2C_IsErrorOccurred>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e02a      	b.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6c:	d01e      	beq.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fc fd1f 	bl	80016b0 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d113      	bne.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e007      	b.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d1cb      	bne.n	8004c52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cd0:	e028      	b.n	8004d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f8aa 	bl	8004e30 <I2C_IsErrorOccurred>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e026      	b.n	8004d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fc fce3 	bl	80016b0 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e007      	b.n	8004d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d1cf      	bne.n	8004cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d48:	e064      	b.n	8004e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f86e 	bl	8004e30 <I2C_IsErrorOccurred>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e062      	b.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d138      	bne.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d105      	bne.n	8004d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e04e      	b.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d107      	bne.n	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2210      	movs	r2, #16
 8004d9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
 8004da2:	e002      	b.n	8004daa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2220      	movs	r2, #32
 8004db0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6859      	ldr	r1, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e022      	b.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fc fc67 	bl	80016b0 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e007      	b.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d193      	bne.n	8004d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	fe00e800 	.word	0xfe00e800

08004e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d068      	beq.n	8004f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e64:	e049      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6c:	d045      	beq.n	8004efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fc fc1f 	bl	80016b0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_IsErrorOccurred+0x54>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13a      	bne.n	8004efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea6:	d121      	bne.n	8004eec <I2C_IsErrorOccurred+0xbc>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eae:	d01d      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d01a      	beq.n	8004eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ec6:	f7fc fbf3 	bl	80016b0 <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ecc:	e00e      	b.n	8004eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ece:	f7fc fbef 	bl	80016b0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b19      	cmp	r3, #25
 8004eda:	d907      	bls.n	8004eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004eea:	e006      	b.n	8004efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d1e9      	bne.n	8004ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d003      	beq.n	8004f10 <I2C_IsErrorOccurred+0xe0>
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0aa      	beq.n	8004e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01c      	beq.n	8004fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fde9 	bl	8004b7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <I2C_IsErrorOccurred+0x1bc>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3728      	adds	r7, #40	; 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	4613      	mov	r3, r2
 8005000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4313      	orrs	r3, r2
 800501a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800501e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	0d5b      	lsrs	r3, r3, #21
 800502a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <I2C_TransferConfig+0x60>)
 8005030:	430b      	orrs	r3, r1
 8005032:	43db      	mvns	r3, r3
 8005034:	ea02 0103 	and.w	r1, r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	03ff63ff 	.word	0x03ff63ff

08005054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	d138      	bne.n	80050dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005074:	2302      	movs	r3, #2
 8005076:	e032      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d139      	bne.n	8005174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800510a:	2302      	movs	r3, #2
 800510c:	e033      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	; 0x24
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800513c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005184:	b08f      	sub	sp, #60	; 0x3c
 8005186:	af0a      	add	r7, sp, #40	; 0x28
 8005188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e116      	b.n	80053c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc f82c 	bl	800120c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2203      	movs	r2, #3
 80051b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f002 fd0c 	bl	8007bf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	687e      	ldr	r6, [r7, #4]
 80051e0:	466d      	mov	r5, sp
 80051e2:	f106 0410 	add.w	r4, r6, #16
 80051e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80051f6:	1d33      	adds	r3, r6, #4
 80051f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051fa:	6838      	ldr	r0, [r7, #0]
 80051fc:	f002 fca0 	bl	8007b40 <USB_CoreInit>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0d7      	b.n	80053c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f002 fcfa 	bl	8007c12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e04a      	b.n	80052ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	333d      	adds	r3, #61	; 0x3d
 8005234:	2201      	movs	r2, #1
 8005236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005238:	7bfa      	ldrb	r2, [r7, #15]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	333c      	adds	r3, #60	; 0x3c
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	b298      	uxth	r0, r3
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	3344      	adds	r3, #68	; 0x44
 8005260:	4602      	mov	r2, r0
 8005262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	3340      	adds	r3, #64	; 0x40
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3348      	adds	r3, #72	; 0x48
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	334c      	adds	r3, #76	; 0x4c
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3354      	adds	r3, #84	; 0x54
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	3301      	adds	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
 80052ba:	7bfa      	ldrb	r2, [r7, #15]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3af      	bcc.n	8005224 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e044      	b.n	8005354 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	3301      	adds	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d3b5      	bcc.n	80052ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	687e      	ldr	r6, [r7, #4]
 8005366:	466d      	mov	r5, sp
 8005368:	f106 0410 	add.w	r4, r6, #16
 800536c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005374:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005378:	e885 0003 	stmia.w	r5, {r0, r1}
 800537c:	1d33      	adds	r3, r6, #4
 800537e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f002 fc93 	bl	8007cac <USB_DevInit>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e014      	b.n	80053c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d102      	bne.n	80053b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f80b 	bl	80053cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 fe51 	bl	8008062 <USB_DevDisconnect>

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080053cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_PCDEx_ActivateLPM+0x44>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	10000003 	.word	0x10000003

08005414 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a04      	ldr	r2, [pc, #16]	; (8005430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800541e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40007000 	.word	0x40007000

08005434 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <HAL_PWREx_EnableOverDrive+0x98>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	4a22      	ldr	r2, [pc, #136]	; (80054cc <HAL_PWREx_EnableOverDrive+0x98>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005448:	6413      	str	r3, [r2, #64]	; 0x40
 800544a:	4b20      	ldr	r3, [pc, #128]	; (80054cc <HAL_PWREx_EnableOverDrive+0x98>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005462:	f7fc f925 	bl	80016b0 <HAL_GetTick>
 8005466:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005468:	e009      	b.n	800547e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800546a:	f7fc f921 	bl	80016b0 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005478:	d901      	bls.n	800547e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e022      	b.n	80054c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548a:	d1ee      	bne.n	800546a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005496:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005498:	f7fc f90a 	bl	80016b0 <HAL_GetTick>
 800549c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800549e:	e009      	b.n	80054b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054a0:	f7fc f906 	bl	80016b0 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ae:	d901      	bls.n	80054b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e007      	b.n	80054c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c0:	d1ee      	bne.n	80054a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40007000 	.word	0x40007000

080054d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e29b      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8087 	beq.w	8005606 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054f8:	4b96      	ldr	r3, [pc, #600]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 030c 	and.w	r3, r3, #12
 8005500:	2b04      	cmp	r3, #4
 8005502:	d00c      	beq.n	800551e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005504:	4b93      	ldr	r3, [pc, #588]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d112      	bne.n	8005536 <HAL_RCC_OscConfig+0x62>
 8005510:	4b90      	ldr	r3, [pc, #576]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800551c:	d10b      	bne.n	8005536 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551e:	4b8d      	ldr	r3, [pc, #564]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d06c      	beq.n	8005604 <HAL_RCC_OscConfig+0x130>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d168      	bne.n	8005604 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e275      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x7a>
 8005540:	4b84      	ldr	r3, [pc, #528]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a83      	ldr	r2, [pc, #524]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e02e      	b.n	80055ac <HAL_RCC_OscConfig+0xd8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x9c>
 8005556:	4b7f      	ldr	r3, [pc, #508]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a7e      	ldr	r2, [pc, #504]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800555c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b7c      	ldr	r3, [pc, #496]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a7b      	ldr	r2, [pc, #492]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e01d      	b.n	80055ac <HAL_RCC_OscConfig+0xd8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0xc0>
 800557a:	4b76      	ldr	r3, [pc, #472]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a75      	ldr	r2, [pc, #468]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b73      	ldr	r3, [pc, #460]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a72      	ldr	r2, [pc, #456]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0xd8>
 8005594:	4b6f      	ldr	r3, [pc, #444]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a6e      	ldr	r2, [pc, #440]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800559a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	4b6c      	ldr	r3, [pc, #432]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a6b      	ldr	r2, [pc, #428]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80055a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d013      	beq.n	80055dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc f87c 	bl	80016b0 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055bc:	f7fc f878 	bl	80016b0 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b64      	cmp	r3, #100	; 0x64
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e229      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	4b61      	ldr	r3, [pc, #388]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0xe8>
 80055da:	e014      	b.n	8005606 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fc f868 	bl	80016b0 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e4:	f7fc f864 	bl	80016b0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	; 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e215      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f6:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x110>
 8005602:	e000      	b.n	8005606 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d069      	beq.n	80056e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005612:	4b50      	ldr	r3, [pc, #320]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800561e:	4b4d      	ldr	r3, [pc, #308]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b08      	cmp	r3, #8
 8005628:	d11c      	bne.n	8005664 <HAL_RCC_OscConfig+0x190>
 800562a:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_RCC_OscConfig+0x17a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e1e9      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564e:	4b41      	ldr	r3, [pc, #260]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	493d      	ldr	r1, [pc, #244]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005662:	e040      	b.n	80056e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d023      	beq.n	80056b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566c:	4b39      	ldr	r3, [pc, #228]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a38      	ldr	r2, [pc, #224]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fc f81a 	bl	80016b0 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005680:	f7fc f816 	bl	80016b0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1c7      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569e:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4929      	ldr	r1, [pc, #164]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]
 80056b2:	e018      	b.n	80056e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a26      	ldr	r2, [pc, #152]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fb fff6 	bl	80016b0 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c8:	f7fb fff2 	bl	80016b0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e1a3      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d038      	beq.n	8005764 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d019      	beq.n	800572e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fb ffd3 	bl	80016b0 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800570e:	f7fb ffcf 	bl	80016b0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e180      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x23a>
 800572c:	e01a      	b.n	8005764 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005732:	4a08      	ldr	r2, [pc, #32]	; (8005754 <HAL_RCC_OscConfig+0x280>)
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fb ffb9 	bl	80016b0 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005740:	e00a      	b.n	8005758 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005742:	f7fb ffb5 	bl	80016b0 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d903      	bls.n	8005758 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e166      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
 8005754:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005758:	4b92      	ldr	r3, [pc, #584]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800575a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ee      	bne.n	8005742 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80a4 	beq.w	80058ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005772:	4b8c      	ldr	r3, [pc, #560]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800577e:	4b89      	ldr	r3, [pc, #548]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	4a88      	ldr	r2, [pc, #544]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005788:	6413      	str	r3, [r2, #64]	; 0x40
 800578a:	4b86      	ldr	r3, [pc, #536]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800579a:	4b83      	ldr	r3, [pc, #524]	; (80059a8 <HAL_RCC_OscConfig+0x4d4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d118      	bne.n	80057d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057a6:	4b80      	ldr	r3, [pc, #512]	; (80059a8 <HAL_RCC_OscConfig+0x4d4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a7f      	ldr	r2, [pc, #508]	; (80059a8 <HAL_RCC_OscConfig+0x4d4>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b2:	f7fb ff7d 	bl	80016b0 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fb ff79 	bl	80016b0 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b64      	cmp	r3, #100	; 0x64
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e12a      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057cc:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <HAL_RCC_OscConfig+0x4d4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d106      	bne.n	80057ee <HAL_RCC_OscConfig+0x31a>
 80057e0:	4b70      	ldr	r3, [pc, #448]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	4a6f      	ldr	r2, [pc, #444]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	; 0x70
 80057ec:	e02d      	b.n	800584a <HAL_RCC_OscConfig+0x376>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x33c>
 80057f6:	4b6b      	ldr	r3, [pc, #428]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a6a      	ldr	r2, [pc, #424]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
 8005802:	4b68      	ldr	r3, [pc, #416]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4a67      	ldr	r2, [pc, #412]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005808:	f023 0304 	bic.w	r3, r3, #4
 800580c:	6713      	str	r3, [r2, #112]	; 0x70
 800580e:	e01c      	b.n	800584a <HAL_RCC_OscConfig+0x376>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b05      	cmp	r3, #5
 8005816:	d10c      	bne.n	8005832 <HAL_RCC_OscConfig+0x35e>
 8005818:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a61      	ldr	r2, [pc, #388]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a5e      	ldr	r2, [pc, #376]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	e00b      	b.n	800584a <HAL_RCC_OscConfig+0x376>
 8005832:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a5b      	ldr	r2, [pc, #364]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
 800583e:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	4a58      	ldr	r2, [pc, #352]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005844:	f023 0304 	bic.w	r3, r3, #4
 8005848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d015      	beq.n	800587e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fb ff2d 	bl	80016b0 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fb ff29 	bl	80016b0 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e0d8      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0ee      	beq.n	800585a <HAL_RCC_OscConfig+0x386>
 800587c:	e014      	b.n	80058a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587e:	f7fb ff17 	bl	80016b0 <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005884:	e00a      	b.n	800589c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005886:	f7fb ff13 	bl	80016b0 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f241 3288 	movw	r2, #5000	; 0x1388
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e0c2      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589c:	4b41      	ldr	r3, [pc, #260]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ee      	bne.n	8005886 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d105      	bne.n	80058ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ae:	4b3d      	ldr	r3, [pc, #244]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	4a3c      	ldr	r2, [pc, #240]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80058b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80ae 	beq.w	8005a20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c4:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d06d      	beq.n	80059ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d14b      	bne.n	8005970 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d8:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 80058de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fb fee4 	bl	80016b0 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fb fee0 	bl	80016b0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e091      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fe:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	3b01      	subs	r3, #1
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	071b      	lsls	r3, r3, #28
 8005936:	491b      	ldr	r1, [pc, #108]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005938:	4313      	orrs	r3, r2
 800593a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fb feb2 	bl	80016b0 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005950:	f7fb feae 	bl	80016b0 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e05f      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x47c>
 800596e:	e057      	b.n	8005a20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a0b      	ldr	r2, [pc, #44]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fb fe98 	bl	80016b0 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005984:	f7fb fe94 	bl	80016b0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e045      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <HAL_RCC_OscConfig+0x4d0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x4b0>
 80059a2:	e03d      	b.n	8005a20 <HAL_RCC_OscConfig+0x54c>
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059ac:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <HAL_RCC_OscConfig+0x558>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d030      	beq.n	8005a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d129      	bne.n	8005a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d122      	bne.n	8005a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059dc:	4013      	ands	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d119      	bne.n	8005a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	3b01      	subs	r3, #1
 80059f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d10f      	bne.n	8005a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800

08005a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0d0      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a48:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d910      	bls.n	8005a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a56:	4b67      	ldr	r3, [pc, #412]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 020f 	bic.w	r2, r3, #15
 8005a5e:	4965      	ldr	r1, [pc, #404]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a66:	4b63      	ldr	r3, [pc, #396]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d001      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0b8      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d020      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a90:	4b59      	ldr	r3, [pc, #356]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4a58      	ldr	r2, [pc, #352]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aa8:	4b53      	ldr	r3, [pc, #332]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4a52      	ldr	r2, [pc, #328]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab4:	4b50      	ldr	r3, [pc, #320]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	494d      	ldr	r1, [pc, #308]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d040      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d107      	bne.n	8005aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ada:	4b47      	ldr	r3, [pc, #284]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d115      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e07f      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d107      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af2:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e073      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b02:	4b3d      	ldr	r3, [pc, #244]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e06b      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b12:	4b39      	ldr	r3, [pc, #228]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 0203 	bic.w	r2, r3, #3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	4936      	ldr	r1, [pc, #216]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b24:	f7fb fdc4 	bl	80016b0 <HAL_GetTick>
 8005b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2c:	f7fb fdc0 	bl	80016b0 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e053      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b42:	4b2d      	ldr	r3, [pc, #180]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 020c 	and.w	r2, r3, #12
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d1eb      	bne.n	8005b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d210      	bcs.n	8005b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 020f 	bic.w	r2, r3, #15
 8005b6a:	4922      	ldr	r1, [pc, #136]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e032      	b.n	8005bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b90:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4916      	ldr	r1, [pc, #88]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	490e      	ldr	r1, [pc, #56]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bc2:	f000 f821 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	490a      	ldr	r1, [pc, #40]	; (8005bfc <HAL_RCC_ClockConfig+0x1cc>)
 8005bd4:	5ccb      	ldrb	r3, [r1, r3]
 8005bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <HAL_RCC_ClockConfig+0x1d0>)
 8005bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <HAL_RCC_ClockConfig+0x1d4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fb fd20 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023c00 	.word	0x40023c00
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	08008198 	.word	0x08008198
 8005c00:	20000000 	.word	0x20000000
 8005c04:	20000060 	.word	0x20000060

08005c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c0c:	b094      	sub	sp, #80	; 0x50
 8005c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	647b      	str	r3, [r7, #68]	; 0x44
 8005c14:	2300      	movs	r3, #0
 8005c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c18:	2300      	movs	r3, #0
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c20:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d00d      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x40>
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	f200 80e1 	bhi.w	8005df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x34>
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d003      	beq.n	8005c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c3a:	e0db      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c3c:	4b73      	ldr	r3, [pc, #460]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c40:	e0db      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c42:	4b73      	ldr	r3, [pc, #460]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c46:	e0d8      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c48:	4b6f      	ldr	r3, [pc, #444]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c52:	4b6d      	ldr	r3, [pc, #436]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d063      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5e:	4b6a      	ldr	r3, [pc, #424]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	099b      	lsrs	r3, r3, #6
 8005c64:	2200      	movs	r2, #0
 8005c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c70:	633b      	str	r3, [r7, #48]	; 0x30
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
 8005c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	f04f 0000 	mov.w	r0, #0
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	0159      	lsls	r1, r3, #5
 8005c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c8c:	0150      	lsls	r0, r2, #5
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4621      	mov	r1, r4
 8005c94:	1a51      	subs	r1, r2, r1
 8005c96:	6139      	str	r1, [r7, #16]
 8005c98:	4629      	mov	r1, r5
 8005c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cac:	4659      	mov	r1, fp
 8005cae:	018b      	lsls	r3, r1, #6
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	018a      	lsls	r2, r1, #6
 8005cba:	4651      	mov	r1, sl
 8005cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cda:	4690      	mov	r8, r2
 8005cdc:	4699      	mov	r9, r3
 8005cde:	4623      	mov	r3, r4
 8005ce0:	eb18 0303 	adds.w	r3, r8, r3
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	eb49 0303 	adc.w	r3, r9, r3
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	024b      	lsls	r3, r1, #9
 8005cfe:	4621      	mov	r1, r4
 8005d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d04:	4621      	mov	r1, r4
 8005d06:	024a      	lsls	r2, r1, #9
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0e:	2200      	movs	r2, #0
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d18:	f7fa fa8e 	bl	8000238 <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4613      	mov	r3, r2
 8005d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d24:	e058      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d26:	4b38      	ldr	r3, [pc, #224]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	4611      	mov	r1, r2
 8005d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d36:	623b      	str	r3, [r7, #32]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	f04f 0000 	mov.w	r0, #0
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	0159      	lsls	r1, r3, #5
 8005d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d52:	0150      	lsls	r0, r2, #5
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4641      	mov	r1, r8
 8005d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d5e:	4649      	mov	r1, r9
 8005d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d78:	ebb2 040a 	subs.w	r4, r2, sl
 8005d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	00eb      	lsls	r3, r5, #3
 8005d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d8e:	00e2      	lsls	r2, r4, #3
 8005d90:	4614      	mov	r4, r2
 8005d92:	461d      	mov	r5, r3
 8005d94:	4643      	mov	r3, r8
 8005d96:	18e3      	adds	r3, r4, r3
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	eb45 0303 	adc.w	r3, r5, r3
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dae:	4629      	mov	r1, r5
 8005db0:	028b      	lsls	r3, r1, #10
 8005db2:	4621      	mov	r1, r4
 8005db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db8:	4621      	mov	r1, r4
 8005dba:	028a      	lsls	r2, r1, #10
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	61fa      	str	r2, [r7, #28]
 8005dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dcc:	f7fa fa34 	bl	8000238 <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	3301      	adds	r3, #1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8005df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3750      	adds	r7, #80	; 0x50
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e06:	bf00      	nop
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	00f42400 	.word	0x00f42400
 8005e10:	007a1200 	.word	0x007a1200

08005e14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000000 	.word	0x20000000

08005e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e30:	f7ff fff0 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	0a9b      	lsrs	r3, r3, #10
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	4903      	ldr	r1, [pc, #12]	; (8005e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e42:	5ccb      	ldrb	r3, [r1, r3]
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	080081a8 	.word	0x080081a8

08005e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e58:	f7ff ffdc 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	0b5b      	lsrs	r3, r3, #13
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40023800 	.word	0x40023800
 8005e78:	080081a8 	.word	0x080081a8

08005e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ea4:	4b69      	ldr	r3, [pc, #420]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	4a68      	ldr	r2, [pc, #416]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005eae:	6093      	str	r3, [r2, #8]
 8005eb0:	4b66      	ldr	r3, [pc, #408]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb8:	4964      	ldr	r1, [pc, #400]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ed6:	4b5d      	ldr	r3, [pc, #372]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	4959      	ldr	r1, [pc, #356]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef4:	d101      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f02:	2301      	movs	r3, #1
 8005f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f12:	4b4e      	ldr	r3, [pc, #312]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	494a      	ldr	r1, [pc, #296]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f30:	d101      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f32:	2301      	movs	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 808b 	beq.w	8006076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f60:	4b3a      	ldr	r3, [pc, #232]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	4a39      	ldr	r2, [pc, #228]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6c:	4b37      	ldr	r3, [pc, #220]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f78:	4b35      	ldr	r3, [pc, #212]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a34      	ldr	r2, [pc, #208]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f84:	f7fb fb94 	bl	80016b0 <HAL_GetTick>
 8005f88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8c:	f7fb fb90 	bl	80016b0 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	; 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e38f      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f9e:	4b2c      	ldr	r3, [pc, #176]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005faa:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d035      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d02e      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fd2:	4b1e      	ldr	r3, [pc, #120]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fde:	4b1b      	ldr	r3, [pc, #108]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005fea:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ff0:	4b16      	ldr	r3, [pc, #88]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d114      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fb fb58 	bl	80016b0 <HAL_GetTick>
 8006000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006002:	e00a      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006004:	f7fb fb54 	bl	80016b0 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e351      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ee      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006032:	d111      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006042:	400b      	ands	r3, r1
 8006044:	4901      	ldr	r1, [pc, #4]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
 800604a:	e00b      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800604c:	40023800 	.word	0x40023800
 8006050:	40007000 	.word	0x40007000
 8006054:	0ffffcff 	.word	0x0ffffcff
 8006058:	4bac      	ldr	r3, [pc, #688]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	4aab      	ldr	r2, [pc, #684]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800605e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006062:	6093      	str	r3, [r2, #8]
 8006064:	4ba9      	ldr	r3, [pc, #676]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006070:	49a6      	ldr	r1, [pc, #664]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006072:	4313      	orrs	r3, r2
 8006074:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	2b00      	cmp	r3, #0
 8006080:	d010      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006082:	4ba2      	ldr	r3, [pc, #648]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006088:	4aa0      	ldr	r2, [pc, #640]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800608a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800608e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006092:	4b9e      	ldr	r3, [pc, #632]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006094:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	499b      	ldr	r1, [pc, #620]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060b0:	4b96      	ldr	r3, [pc, #600]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060be:	4993      	ldr	r1, [pc, #588]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060d2:	4b8e      	ldr	r3, [pc, #568]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e0:	498a      	ldr	r1, [pc, #552]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060f4:	4b85      	ldr	r3, [pc, #532]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	4982      	ldr	r1, [pc, #520]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006116:	4b7d      	ldr	r3, [pc, #500]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	4979      	ldr	r1, [pc, #484]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006138:	4b74      	ldr	r3, [pc, #464]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f023 0203 	bic.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	4971      	ldr	r1, [pc, #452]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800615a:	4b6c      	ldr	r3, [pc, #432]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006160:	f023 020c 	bic.w	r2, r3, #12
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006168:	4968      	ldr	r1, [pc, #416]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800617c:	4b63      	ldr	r3, [pc, #396]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	4960      	ldr	r1, [pc, #384]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800619e:	4b5b      	ldr	r3, [pc, #364]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	4957      	ldr	r1, [pc, #348]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061c0:	4b52      	ldr	r3, [pc, #328]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	494f      	ldr	r1, [pc, #316]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061e2:	4b4a      	ldr	r3, [pc, #296]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	4946      	ldr	r1, [pc, #280]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006204:	4b41      	ldr	r3, [pc, #260]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006212:	493e      	ldr	r1, [pc, #248]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006226:	4b39      	ldr	r3, [pc, #228]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	4935      	ldr	r1, [pc, #212]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006248:	4b30      	ldr	r3, [pc, #192]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006256:	492d      	ldr	r1, [pc, #180]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d011      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800626a:	4b28      	ldr	r3, [pc, #160]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006278:	4924      	ldr	r1, [pc, #144]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006288:	d101      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800628a:	2301      	movs	r3, #1
 800628c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800629a:	2301      	movs	r3, #1
 800629c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b8:	4914      	ldr	r1, [pc, #80]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062dc:	490b      	ldr	r1, [pc, #44]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006300:	4902      	ldr	r1, [pc, #8]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006308:	e002      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800631c:	4b8a      	ldr	r3, [pc, #552]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800631e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	4986      	ldr	r1, [pc, #536]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006340:	4b81      	ldr	r3, [pc, #516]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006346:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006350:	497d      	ldr	r1, [pc, #500]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d006      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80d6 	beq.w	8006518 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800636c:	4b76      	ldr	r3, [pc, #472]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a75      	ldr	r2, [pc, #468]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006378:	f7fb f99a 	bl	80016b0 <HAL_GetTick>
 800637c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006380:	f7fb f996 	bl	80016b0 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e195      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006392:	4b6d      	ldr	r3, [pc, #436]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d021      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d11d      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063b2:	4b65      	ldr	r3, [pc, #404]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063c0:	4b61      	ldr	r3, [pc, #388]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c6:	0e1b      	lsrs	r3, r3, #24
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	019a      	lsls	r2, r3, #6
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	071b      	lsls	r3, r3, #28
 80063e6:	4958      	ldr	r1, [pc, #352]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006402:	d00a      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02e      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006418:	d129      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800641a:	4b4b      	ldr	r3, [pc, #300]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006420:	0c1b      	lsrs	r3, r3, #16
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006428:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800642a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642e:	0f1b      	lsrs	r3, r3, #28
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	019a      	lsls	r2, r3, #6
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	431a      	orrs	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	071b      	lsls	r3, r3, #28
 800644e:	493e      	ldr	r1, [pc, #248]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006456:	4b3c      	ldr	r3, [pc, #240]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645c:	f023 021f 	bic.w	r2, r3, #31
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	3b01      	subs	r3, #1
 8006466:	4938      	ldr	r1, [pc, #224]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01d      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800647a:	4b33      	ldr	r3, [pc, #204]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006480:	0e1b      	lsrs	r3, r3, #24
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006488:	4b2f      	ldr	r3, [pc, #188]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648e:	0f1b      	lsrs	r3, r3, #28
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	019a      	lsls	r2, r3, #6
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	431a      	orrs	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	061b      	lsls	r3, r3, #24
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	071b      	lsls	r3, r3, #28
 80064ae:	4926      	ldr	r1, [pc, #152]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d011      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	019a      	lsls	r2, r3, #6
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	041b      	lsls	r3, r3, #16
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	071b      	lsls	r3, r3, #28
 80064de:	491a      	ldr	r1, [pc, #104]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f2:	f7fb f8dd 	bl	80016b0 <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064fa:	f7fb f8d9 	bl	80016b0 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b64      	cmp	r3, #100	; 0x64
 8006506:	d901      	bls.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e0d8      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b01      	cmp	r3, #1
 800651c:	f040 80ce 	bne.w	80066bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a08      	ldr	r2, [pc, #32]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800652a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652c:	f7fb f8c0 	bl	80016b0 <HAL_GetTick>
 8006530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006532:	e00b      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006534:	f7fb f8bc 	bl	80016b0 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b64      	cmp	r3, #100	; 0x64
 8006540:	d904      	bls.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e0bb      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800654c:	4b5e      	ldr	r3, [pc, #376]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006558:	d0ec      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02e      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d12a      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006582:	4b51      	ldr	r3, [pc, #324]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006590:	4b4d      	ldr	r3, [pc, #308]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	0f1b      	lsrs	r3, r3, #28
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	019a      	lsls	r2, r3, #6
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	071b      	lsls	r3, r3, #28
 80065b6:	4944      	ldr	r1, [pc, #272]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065be:	4b42      	ldr	r3, [pc, #264]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	3b01      	subs	r3, #1
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	493d      	ldr	r1, [pc, #244]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d022      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ec:	d11d      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065ee:	4b36      	ldr	r3, [pc, #216]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	0e1b      	lsrs	r3, r3, #24
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065fc:	4b32      	ldr	r3, [pc, #200]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006602:	0f1b      	lsrs	r3, r3, #28
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	019a      	lsls	r2, r3, #6
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	431a      	orrs	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	071b      	lsls	r3, r3, #28
 8006622:	4929      	ldr	r1, [pc, #164]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d028      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	0e1b      	lsrs	r3, r3, #24
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006644:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	019a      	lsls	r2, r3, #6
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	071b      	lsls	r3, r3, #28
 800666a:	4917      	ldr	r1, [pc, #92]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	4911      	ldr	r1, [pc, #68]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006688:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a0e      	ldr	r2, [pc, #56]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800668e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006694:	f7fb f80c 	bl	80016b0 <HAL_GetTick>
 8006698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800669c:	f7fb f808 	bl	80016b0 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e007      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ba:	d1ef      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800

080066cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e049      	b.n	8006772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fa fc74 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 fa0a 	bl	8006b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e049      	b.n	8006820 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f841 	bl	8006828 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f000 f9b3 	bl	8006b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <HAL_TIM_OC_Start+0x24>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	bf14      	ite	ne
 8006858:	2301      	movne	r3, #1
 800685a:	2300      	moveq	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	e03c      	b.n	80068da <HAL_TIM_OC_Start+0x9e>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b04      	cmp	r3, #4
 8006864:	d109      	bne.n	800687a <HAL_TIM_OC_Start+0x3e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	e02f      	b.n	80068da <HAL_TIM_OC_Start+0x9e>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b08      	cmp	r3, #8
 800687e:	d109      	bne.n	8006894 <HAL_TIM_OC_Start+0x58>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	e022      	b.n	80068da <HAL_TIM_OC_Start+0x9e>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b0c      	cmp	r3, #12
 8006898:	d109      	bne.n	80068ae <HAL_TIM_OC_Start+0x72>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	e015      	b.n	80068da <HAL_TIM_OC_Start+0x9e>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d109      	bne.n	80068c8 <HAL_TIM_OC_Start+0x8c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	bf14      	ite	ne
 80068c0:	2301      	movne	r3, #1
 80068c2:	2300      	moveq	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	e008      	b.n	80068da <HAL_TIM_OC_Start+0x9e>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e092      	b.n	8006a08 <HAL_TIM_OC_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_OC_Start+0xb6>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f0:	e023      	b.n	800693a <HAL_TIM_OC_Start+0xfe>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_OC_Start+0xc6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006900:	e01b      	b.n	800693a <HAL_TIM_OC_Start+0xfe>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d104      	bne.n	8006912 <HAL_TIM_OC_Start+0xd6>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006910:	e013      	b.n	800693a <HAL_TIM_OC_Start+0xfe>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b0c      	cmp	r3, #12
 8006916:	d104      	bne.n	8006922 <HAL_TIM_OC_Start+0xe6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006920:	e00b      	b.n	800693a <HAL_TIM_OC_Start+0xfe>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b10      	cmp	r3, #16
 8006926:	d104      	bne.n	8006932 <HAL_TIM_OC_Start+0xf6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006930:	e003      	b.n	800693a <HAL_TIM_OC_Start+0xfe>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fbec 	bl	8007120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a30      	ldr	r2, [pc, #192]	; (8006a10 <HAL_TIM_OC_Start+0x1d4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_TIM_OC_Start+0x120>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2f      	ldr	r2, [pc, #188]	; (8006a14 <HAL_TIM_OC_Start+0x1d8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_TIM_OC_Start+0x124>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <HAL_TIM_OC_Start+0x126>
 8006960:	2300      	movs	r3, #0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <HAL_TIM_OC_Start+0x1d4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d022      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006988:	d01d      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_TIM_OC_Start+0x1dc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <HAL_TIM_OC_Start+0x1e0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <HAL_TIM_OC_Start+0x1e4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <HAL_TIM_OC_Start+0x1d8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <HAL_TIM_OC_Start+0x1e8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIM_OC_Start+0x18a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_TIM_OC_Start+0x1ec>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d115      	bne.n	80069f2 <HAL_TIM_OC_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <HAL_TIM_OC_Start+0x1f0>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b06      	cmp	r3, #6
 80069d6:	d015      	beq.n	8006a04 <HAL_TIM_OC_Start+0x1c8>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069de:	d011      	beq.n	8006a04 <HAL_TIM_OC_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f0:	e008      	b.n	8006a04 <HAL_TIM_OC_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0201 	orr.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_OC_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010400 	.word	0x40010400
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40001800 	.word	0x40001800
 8006a2c:	00010007 	.word	0x00010007

08006a30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e066      	b.n	8006b1c <HAL_TIM_OC_ConfigChannel+0xec>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b14      	cmp	r3, #20
 8006a5a:	d857      	bhi.n	8006b0c <HAL_TIM_OC_ConfigChannel+0xdc>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006b0d 	.word	0x08006b0d
 8006a6c:	08006b0d 	.word	0x08006b0d
 8006a70:	08006b0d 	.word	0x08006b0d
 8006a74:	08006ac7 	.word	0x08006ac7
 8006a78:	08006b0d 	.word	0x08006b0d
 8006a7c:	08006b0d 	.word	0x08006b0d
 8006a80:	08006b0d 	.word	0x08006b0d
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006b0d 	.word	0x08006b0d
 8006a8c:	08006b0d 	.word	0x08006b0d
 8006a90:	08006b0d 	.word	0x08006b0d
 8006a94:	08006ae3 	.word	0x08006ae3
 8006a98:	08006b0d 	.word	0x08006b0d
 8006a9c:	08006b0d 	.word	0x08006b0d
 8006aa0:	08006b0d 	.word	0x08006b0d
 8006aa4:	08006af1 	.word	0x08006af1
 8006aa8:	08006b0d 	.word	0x08006b0d
 8006aac:	08006b0d 	.word	0x08006b0d
 8006ab0:	08006b0d 	.word	0x08006b0d
 8006ab4:	08006aff 	.word	0x08006aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f8d0 	bl	8006c64 <TIM_OC1_SetConfig>
      break;
 8006ac4:	e025      	b.n	8006b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 f93b 	bl	8006d48 <TIM_OC2_SetConfig>
      break;
 8006ad2:	e01e      	b.n	8006b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f9ac 	bl	8006e38 <TIM_OC3_SetConfig>
      break;
 8006ae0:	e017      	b.n	8006b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fa1b 	bl	8006f24 <TIM_OC4_SetConfig>
      break;
 8006aee:	e010      	b.n	8006b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fa6c 	bl	8006fd4 <TIM_OC5_SetConfig>
      break;
 8006afc:	e009      	b.n	8006b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fab7 	bl	8007078 <TIM_OC6_SetConfig>
      break;
 8006b0a:	e002      	b.n	8006b12 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a40      	ldr	r2, [pc, #256]	; (8006c38 <TIM_Base_SetConfig+0x114>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b42:	d00f      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <TIM_Base_SetConfig+0x118>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a3c      	ldr	r2, [pc, #240]	; (8006c40 <TIM_Base_SetConfig+0x11c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a3b      	ldr	r2, [pc, #236]	; (8006c44 <TIM_Base_SetConfig+0x120>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a3a      	ldr	r2, [pc, #232]	; (8006c48 <TIM_Base_SetConfig+0x124>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d108      	bne.n	8006b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2f      	ldr	r2, [pc, #188]	; (8006c38 <TIM_Base_SetConfig+0x114>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d02b      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b84:	d027      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2c      	ldr	r2, [pc, #176]	; (8006c3c <TIM_Base_SetConfig+0x118>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d023      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2b      	ldr	r2, [pc, #172]	; (8006c40 <TIM_Base_SetConfig+0x11c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01f      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <TIM_Base_SetConfig+0x120>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01b      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <TIM_Base_SetConfig+0x124>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d017      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a28      	ldr	r2, [pc, #160]	; (8006c4c <TIM_Base_SetConfig+0x128>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a27      	ldr	r2, [pc, #156]	; (8006c50 <TIM_Base_SetConfig+0x12c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a26      	ldr	r2, [pc, #152]	; (8006c54 <TIM_Base_SetConfig+0x130>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a25      	ldr	r2, [pc, #148]	; (8006c58 <TIM_Base_SetConfig+0x134>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a24      	ldr	r2, [pc, #144]	; (8006c5c <TIM_Base_SetConfig+0x138>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <TIM_Base_SetConfig+0x13c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d108      	bne.n	8006be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	; (8006c38 <TIM_Base_SetConfig+0x114>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_Base_SetConfig+0xf8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a0c      	ldr	r2, [pc, #48]	; (8006c48 <TIM_Base_SetConfig+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d103      	bne.n	8006c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	615a      	str	r2, [r3, #20]
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	40010400 	.word	0x40010400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800
 8006c58:	40001800 	.word	0x40001800
 8006c5c:	40001c00 	.word	0x40001c00
 8006c60:	40002000 	.word	0x40002000

08006c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0201 	bic.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4b2b      	ldr	r3, [pc, #172]	; (8006d3c <TIM_OC1_SetConfig+0xd8>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f023 0302 	bic.w	r3, r3, #2
 8006cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <TIM_OC1_SetConfig+0xdc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC1_SetConfig+0x64>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a20      	ldr	r2, [pc, #128]	; (8006d44 <TIM_OC1_SetConfig+0xe0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d10c      	bne.n	8006ce2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f023 0308 	bic.w	r3, r3, #8
 8006cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 0304 	bic.w	r3, r3, #4
 8006ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <TIM_OC1_SetConfig+0xdc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_OC1_SetConfig+0x8e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <TIM_OC1_SetConfig+0xe0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d111      	bne.n	8006d16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	621a      	str	r2, [r3, #32]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	fffeff8f 	.word	0xfffeff8f
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40010400 	.word	0x40010400

08006d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0210 	bic.w	r2, r3, #16
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <TIM_OC2_SetConfig+0xe4>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a23      	ldr	r2, [pc, #140]	; (8006e30 <TIM_OC2_SetConfig+0xe8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC2_SetConfig+0x68>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a22      	ldr	r2, [pc, #136]	; (8006e34 <TIM_OC2_SetConfig+0xec>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10d      	bne.n	8006dcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <TIM_OC2_SetConfig+0xe8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_OC2_SetConfig+0x94>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <TIM_OC2_SetConfig+0xec>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d113      	bne.n	8006e04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	feff8fff 	.word	0xfeff8fff
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40010400 	.word	0x40010400

08006e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4b2d      	ldr	r3, [pc, #180]	; (8006f18 <TIM_OC3_SetConfig+0xe0>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <TIM_OC3_SetConfig+0xe4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_OC3_SetConfig+0x66>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <TIM_OC3_SetConfig+0xe8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10d      	bne.n	8006eba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a17      	ldr	r2, [pc, #92]	; (8006f1c <TIM_OC3_SetConfig+0xe4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC3_SetConfig+0x92>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <TIM_OC3_SetConfig+0xe8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d113      	bne.n	8006ef2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	621a      	str	r2, [r3, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	fffeff8f 	.word	0xfffeff8f
 8006f1c:	40010000 	.word	0x40010000
 8006f20:	40010400 	.word	0x40010400

08006f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <TIM_OC4_SetConfig+0xa4>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <TIM_OC4_SetConfig+0xa8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_OC4_SetConfig+0x68>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <TIM_OC4_SetConfig+0xac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d109      	bne.n	8006fa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	019b      	lsls	r3, r3, #6
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	feff8fff 	.word	0xfeff8fff
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4b1b      	ldr	r3, [pc, #108]	; (800706c <TIM_OC5_SetConfig+0x98>)
 8007000:	4013      	ands	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a12      	ldr	r2, [pc, #72]	; (8007070 <TIM_OC5_SetConfig+0x9c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC5_SetConfig+0x5e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a11      	ldr	r2, [pc, #68]	; (8007074 <TIM_OC5_SetConfig+0xa0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d109      	bne.n	8007046 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	621a      	str	r2, [r3, #32]
}
 8007060:	bf00      	nop
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	fffeff8f 	.word	0xfffeff8f
 8007070:	40010000 	.word	0x40010000
 8007074:	40010400 	.word	0x40010400

08007078 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <TIM_OC6_SetConfig+0x9c>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <TIM_OC6_SetConfig+0xa0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_OC6_SetConfig+0x60>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a12      	ldr	r2, [pc, #72]	; (800711c <TIM_OC6_SetConfig+0xa4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d109      	bne.n	80070ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	029b      	lsls	r3, r3, #10
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	621a      	str	r2, [r3, #32]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	feff8fff 	.word	0xfeff8fff
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400

08007120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2201      	movs	r2, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	43db      	mvns	r3, r3
 8007142:	401a      	ands	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	fa01 f303 	lsl.w	r3, r1, r3
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e040      	b.n	80071fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7f9 ffaf 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2224      	movs	r2, #36	; 0x24
 8007196:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8af 	bl	800730c <UART_SetConfig>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e022      	b.n	80071fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fb07 	bl	80077d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0201 	orr.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb8e 	bl	8007918 <UART_CheckIdleState>
 80071fc:	4603      	mov	r3, r0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b08a      	sub	sp, #40	; 0x28
 800720a:	af02      	add	r7, sp, #8
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721a:	2b20      	cmp	r3, #32
 800721c:	d171      	bne.n	8007302 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_UART_Transmit+0x24>
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e06a      	b.n	8007304 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2221      	movs	r2, #33	; 0x21
 800723a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800723c:	f7fa fa38 	bl	80016b0 <HAL_GetTick>
 8007240:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725a:	d108      	bne.n	800726e <HAL_UART_Transmit+0x68>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e003      	b.n	8007276 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007276:	e02c      	b.n	80072d2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	2180      	movs	r1, #128	; 0x80
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fb95 	bl	80079b2 <UART_WaitOnFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e038      	b.n	8007304 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10b      	bne.n	80072b0 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	3302      	adds	r3, #2
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e007      	b.n	80072c0 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	3301      	adds	r3, #1
 80072be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1cc      	bne.n	8007278 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	2140      	movs	r1, #64	; 0x40
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 fb62 	bl	80079b2 <UART_WaitOnFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e005      	b.n	8007304 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4ba6      	ldr	r3, [pc, #664]	; (80075d0 <UART_SetConfig+0x2c4>)
 8007338:	4013      	ands	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	430b      	orrs	r3, r1
 8007342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a94      	ldr	r2, [pc, #592]	; (80075d4 <UART_SetConfig+0x2c8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d120      	bne.n	80073ca <UART_SetConfig+0xbe>
 8007388:	4b93      	ldr	r3, [pc, #588]	; (80075d8 <UART_SetConfig+0x2cc>)
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d816      	bhi.n	80073c4 <UART_SetConfig+0xb8>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x90>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073b9 	.word	0x080073b9
 80073a4:	080073b3 	.word	0x080073b3
 80073a8:	080073bf 	.word	0x080073bf
 80073ac:	2301      	movs	r3, #1
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e150      	b.n	8007654 <UART_SetConfig+0x348>
 80073b2:	2302      	movs	r3, #2
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e14d      	b.n	8007654 <UART_SetConfig+0x348>
 80073b8:	2304      	movs	r3, #4
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e14a      	b.n	8007654 <UART_SetConfig+0x348>
 80073be:	2308      	movs	r3, #8
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e147      	b.n	8007654 <UART_SetConfig+0x348>
 80073c4:	2310      	movs	r3, #16
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e144      	b.n	8007654 <UART_SetConfig+0x348>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a83      	ldr	r2, [pc, #524]	; (80075dc <UART_SetConfig+0x2d0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d132      	bne.n	800743a <UART_SetConfig+0x12e>
 80073d4:	4b80      	ldr	r3, [pc, #512]	; (80075d8 <UART_SetConfig+0x2cc>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f003 030c 	and.w	r3, r3, #12
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d828      	bhi.n	8007434 <UART_SetConfig+0x128>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0xdc>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	08007435 	.word	0x08007435
 80073f0:	08007435 	.word	0x08007435
 80073f4:	08007435 	.word	0x08007435
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007435 	.word	0x08007435
 8007400:	08007435 	.word	0x08007435
 8007404:	08007435 	.word	0x08007435
 8007408:	08007423 	.word	0x08007423
 800740c:	08007435 	.word	0x08007435
 8007410:	08007435 	.word	0x08007435
 8007414:	08007435 	.word	0x08007435
 8007418:	0800742f 	.word	0x0800742f
 800741c:	2300      	movs	r3, #0
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	e118      	b.n	8007654 <UART_SetConfig+0x348>
 8007422:	2302      	movs	r3, #2
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e115      	b.n	8007654 <UART_SetConfig+0x348>
 8007428:	2304      	movs	r3, #4
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e112      	b.n	8007654 <UART_SetConfig+0x348>
 800742e:	2308      	movs	r3, #8
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e10f      	b.n	8007654 <UART_SetConfig+0x348>
 8007434:	2310      	movs	r3, #16
 8007436:	77fb      	strb	r3, [r7, #31]
 8007438:	e10c      	b.n	8007654 <UART_SetConfig+0x348>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a68      	ldr	r2, [pc, #416]	; (80075e0 <UART_SetConfig+0x2d4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d120      	bne.n	8007486 <UART_SetConfig+0x17a>
 8007444:	4b64      	ldr	r3, [pc, #400]	; (80075d8 <UART_SetConfig+0x2cc>)
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800744e:	2b30      	cmp	r3, #48	; 0x30
 8007450:	d013      	beq.n	800747a <UART_SetConfig+0x16e>
 8007452:	2b30      	cmp	r3, #48	; 0x30
 8007454:	d814      	bhi.n	8007480 <UART_SetConfig+0x174>
 8007456:	2b20      	cmp	r3, #32
 8007458:	d009      	beq.n	800746e <UART_SetConfig+0x162>
 800745a:	2b20      	cmp	r3, #32
 800745c:	d810      	bhi.n	8007480 <UART_SetConfig+0x174>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <UART_SetConfig+0x15c>
 8007462:	2b10      	cmp	r3, #16
 8007464:	d006      	beq.n	8007474 <UART_SetConfig+0x168>
 8007466:	e00b      	b.n	8007480 <UART_SetConfig+0x174>
 8007468:	2300      	movs	r3, #0
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e0f2      	b.n	8007654 <UART_SetConfig+0x348>
 800746e:	2302      	movs	r3, #2
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e0ef      	b.n	8007654 <UART_SetConfig+0x348>
 8007474:	2304      	movs	r3, #4
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e0ec      	b.n	8007654 <UART_SetConfig+0x348>
 800747a:	2308      	movs	r3, #8
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e0e9      	b.n	8007654 <UART_SetConfig+0x348>
 8007480:	2310      	movs	r3, #16
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e0e6      	b.n	8007654 <UART_SetConfig+0x348>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a56      	ldr	r2, [pc, #344]	; (80075e4 <UART_SetConfig+0x2d8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d120      	bne.n	80074d2 <UART_SetConfig+0x1c6>
 8007490:	4b51      	ldr	r3, [pc, #324]	; (80075d8 <UART_SetConfig+0x2cc>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800749a:	2bc0      	cmp	r3, #192	; 0xc0
 800749c:	d013      	beq.n	80074c6 <UART_SetConfig+0x1ba>
 800749e:	2bc0      	cmp	r3, #192	; 0xc0
 80074a0:	d814      	bhi.n	80074cc <UART_SetConfig+0x1c0>
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d009      	beq.n	80074ba <UART_SetConfig+0x1ae>
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d810      	bhi.n	80074cc <UART_SetConfig+0x1c0>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <UART_SetConfig+0x1a8>
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d006      	beq.n	80074c0 <UART_SetConfig+0x1b4>
 80074b2:	e00b      	b.n	80074cc <UART_SetConfig+0x1c0>
 80074b4:	2300      	movs	r3, #0
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e0cc      	b.n	8007654 <UART_SetConfig+0x348>
 80074ba:	2302      	movs	r3, #2
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e0c9      	b.n	8007654 <UART_SetConfig+0x348>
 80074c0:	2304      	movs	r3, #4
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e0c6      	b.n	8007654 <UART_SetConfig+0x348>
 80074c6:	2308      	movs	r3, #8
 80074c8:	77fb      	strb	r3, [r7, #31]
 80074ca:	e0c3      	b.n	8007654 <UART_SetConfig+0x348>
 80074cc:	2310      	movs	r3, #16
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e0c0      	b.n	8007654 <UART_SetConfig+0x348>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a44      	ldr	r2, [pc, #272]	; (80075e8 <UART_SetConfig+0x2dc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d125      	bne.n	8007528 <UART_SetConfig+0x21c>
 80074dc:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <UART_SetConfig+0x2cc>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ea:	d017      	beq.n	800751c <UART_SetConfig+0x210>
 80074ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f0:	d817      	bhi.n	8007522 <UART_SetConfig+0x216>
 80074f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f6:	d00b      	beq.n	8007510 <UART_SetConfig+0x204>
 80074f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fc:	d811      	bhi.n	8007522 <UART_SetConfig+0x216>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <UART_SetConfig+0x1fe>
 8007502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007506:	d006      	beq.n	8007516 <UART_SetConfig+0x20a>
 8007508:	e00b      	b.n	8007522 <UART_SetConfig+0x216>
 800750a:	2300      	movs	r3, #0
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e0a1      	b.n	8007654 <UART_SetConfig+0x348>
 8007510:	2302      	movs	r3, #2
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e09e      	b.n	8007654 <UART_SetConfig+0x348>
 8007516:	2304      	movs	r3, #4
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e09b      	b.n	8007654 <UART_SetConfig+0x348>
 800751c:	2308      	movs	r3, #8
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e098      	b.n	8007654 <UART_SetConfig+0x348>
 8007522:	2310      	movs	r3, #16
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e095      	b.n	8007654 <UART_SetConfig+0x348>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <UART_SetConfig+0x2e0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d125      	bne.n	800757e <UART_SetConfig+0x272>
 8007532:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <UART_SetConfig+0x2cc>)
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800753c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007540:	d017      	beq.n	8007572 <UART_SetConfig+0x266>
 8007542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007546:	d817      	bhi.n	8007578 <UART_SetConfig+0x26c>
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754c:	d00b      	beq.n	8007566 <UART_SetConfig+0x25a>
 800754e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007552:	d811      	bhi.n	8007578 <UART_SetConfig+0x26c>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <UART_SetConfig+0x254>
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755c:	d006      	beq.n	800756c <UART_SetConfig+0x260>
 800755e:	e00b      	b.n	8007578 <UART_SetConfig+0x26c>
 8007560:	2301      	movs	r3, #1
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e076      	b.n	8007654 <UART_SetConfig+0x348>
 8007566:	2302      	movs	r3, #2
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	e073      	b.n	8007654 <UART_SetConfig+0x348>
 800756c:	2304      	movs	r3, #4
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e070      	b.n	8007654 <UART_SetConfig+0x348>
 8007572:	2308      	movs	r3, #8
 8007574:	77fb      	strb	r3, [r7, #31]
 8007576:	e06d      	b.n	8007654 <UART_SetConfig+0x348>
 8007578:	2310      	movs	r3, #16
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	e06a      	b.n	8007654 <UART_SetConfig+0x348>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <UART_SetConfig+0x2e4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d138      	bne.n	80075fa <UART_SetConfig+0x2ee>
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <UART_SetConfig+0x2cc>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007592:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007596:	d017      	beq.n	80075c8 <UART_SetConfig+0x2bc>
 8007598:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800759c:	d82a      	bhi.n	80075f4 <UART_SetConfig+0x2e8>
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a2:	d00b      	beq.n	80075bc <UART_SetConfig+0x2b0>
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d824      	bhi.n	80075f4 <UART_SetConfig+0x2e8>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <UART_SetConfig+0x2aa>
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	d006      	beq.n	80075c2 <UART_SetConfig+0x2b6>
 80075b4:	e01e      	b.n	80075f4 <UART_SetConfig+0x2e8>
 80075b6:	2300      	movs	r3, #0
 80075b8:	77fb      	strb	r3, [r7, #31]
 80075ba:	e04b      	b.n	8007654 <UART_SetConfig+0x348>
 80075bc:	2302      	movs	r3, #2
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e048      	b.n	8007654 <UART_SetConfig+0x348>
 80075c2:	2304      	movs	r3, #4
 80075c4:	77fb      	strb	r3, [r7, #31]
 80075c6:	e045      	b.n	8007654 <UART_SetConfig+0x348>
 80075c8:	2308      	movs	r3, #8
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e042      	b.n	8007654 <UART_SetConfig+0x348>
 80075ce:	bf00      	nop
 80075d0:	efff69f3 	.word	0xefff69f3
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40004400 	.word	0x40004400
 80075e0:	40004800 	.word	0x40004800
 80075e4:	40004c00 	.word	0x40004c00
 80075e8:	40005000 	.word	0x40005000
 80075ec:	40011400 	.word	0x40011400
 80075f0:	40007800 	.word	0x40007800
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e02c      	b.n	8007654 <UART_SetConfig+0x348>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a72      	ldr	r2, [pc, #456]	; (80077c8 <UART_SetConfig+0x4bc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d125      	bne.n	8007650 <UART_SetConfig+0x344>
 8007604:	4b71      	ldr	r3, [pc, #452]	; (80077cc <UART_SetConfig+0x4c0>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800760e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007612:	d017      	beq.n	8007644 <UART_SetConfig+0x338>
 8007614:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007618:	d817      	bhi.n	800764a <UART_SetConfig+0x33e>
 800761a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761e:	d00b      	beq.n	8007638 <UART_SetConfig+0x32c>
 8007620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007624:	d811      	bhi.n	800764a <UART_SetConfig+0x33e>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <UART_SetConfig+0x326>
 800762a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762e:	d006      	beq.n	800763e <UART_SetConfig+0x332>
 8007630:	e00b      	b.n	800764a <UART_SetConfig+0x33e>
 8007632:	2300      	movs	r3, #0
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e00d      	b.n	8007654 <UART_SetConfig+0x348>
 8007638:	2302      	movs	r3, #2
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e00a      	b.n	8007654 <UART_SetConfig+0x348>
 800763e:	2304      	movs	r3, #4
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e007      	b.n	8007654 <UART_SetConfig+0x348>
 8007644:	2308      	movs	r3, #8
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e004      	b.n	8007654 <UART_SetConfig+0x348>
 800764a:	2310      	movs	r3, #16
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e001      	b.n	8007654 <UART_SetConfig+0x348>
 8007650:	2310      	movs	r3, #16
 8007652:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800765c:	d15b      	bne.n	8007716 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800765e:	7ffb      	ldrb	r3, [r7, #31]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d828      	bhi.n	80076b6 <UART_SetConfig+0x3aa>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <UART_SetConfig+0x360>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007691 	.word	0x08007691
 8007670:	08007699 	.word	0x08007699
 8007674:	080076a1 	.word	0x080076a1
 8007678:	080076b7 	.word	0x080076b7
 800767c:	080076a7 	.word	0x080076a7
 8007680:	080076b7 	.word	0x080076b7
 8007684:	080076b7 	.word	0x080076b7
 8007688:	080076b7 	.word	0x080076b7
 800768c:	080076af 	.word	0x080076af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007690:	f7fe fbcc 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 8007694:	61b8      	str	r0, [r7, #24]
        break;
 8007696:	e013      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007698:	f7fe fbdc 	bl	8005e54 <HAL_RCC_GetPCLK2Freq>
 800769c:	61b8      	str	r0, [r7, #24]
        break;
 800769e:	e00f      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a0:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <UART_SetConfig+0x4c4>)
 80076a2:	61bb      	str	r3, [r7, #24]
        break;
 80076a4:	e00c      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fe faaf 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 80076aa:	61b8      	str	r0, [r7, #24]
        break;
 80076ac:	e008      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b2:	61bb      	str	r3, [r7, #24]
        break;
 80076b4:	e004      	b.n	80076c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	77bb      	strb	r3, [r7, #30]
        break;
 80076be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d074      	beq.n	80077b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	005a      	lsls	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	441a      	add	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b0f      	cmp	r3, #15
 80076e0:	d916      	bls.n	8007710 <UART_SetConfig+0x404>
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e8:	d212      	bcs.n	8007710 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f023 030f 	bic.w	r3, r3, #15
 80076f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	b29a      	uxth	r2, r3
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	4313      	orrs	r3, r2
 8007704:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	89fa      	ldrh	r2, [r7, #14]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	e04f      	b.n	80077b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	77bb      	strb	r3, [r7, #30]
 8007714:	e04c      	b.n	80077b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d828      	bhi.n	800776e <UART_SetConfig+0x462>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <UART_SetConfig+0x418>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007749 	.word	0x08007749
 8007728:	08007751 	.word	0x08007751
 800772c:	08007759 	.word	0x08007759
 8007730:	0800776f 	.word	0x0800776f
 8007734:	0800775f 	.word	0x0800775f
 8007738:	0800776f 	.word	0x0800776f
 800773c:	0800776f 	.word	0x0800776f
 8007740:	0800776f 	.word	0x0800776f
 8007744:	08007767 	.word	0x08007767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fe fb70 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 800774c:	61b8      	str	r0, [r7, #24]
        break;
 800774e:	e013      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007750:	f7fe fb80 	bl	8005e54 <HAL_RCC_GetPCLK2Freq>
 8007754:	61b8      	str	r0, [r7, #24]
        break;
 8007756:	e00f      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007758:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <UART_SetConfig+0x4c4>)
 800775a:	61bb      	str	r3, [r7, #24]
        break;
 800775c:	e00c      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775e:	f7fe fa53 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8007762:	61b8      	str	r0, [r7, #24]
        break;
 8007764:	e008      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776a:	61bb      	str	r3, [r7, #24]
        break;
 800776c:	e004      	b.n	8007778 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	77bb      	strb	r3, [r7, #30]
        break;
 8007776:	bf00      	nop
    }

    if (pclk != 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d018      	beq.n	80077b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	085a      	lsrs	r2, r3, #1
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	441a      	add	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b0f      	cmp	r3, #15
 8007796:	d909      	bls.n	80077ac <UART_SetConfig+0x4a0>
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779e:	d205      	bcs.n	80077ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	e001      	b.n	80077b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40007c00 	.word	0x40007c00
 80077cc:	40023800 	.word	0x40023800
 80077d0:	00f42400 	.word	0x00f42400

080077d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01a      	beq.n	80078ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d2:	d10a      	bne.n	80078ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af02      	add	r7, sp, #8
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007928:	f7f9 fec2 	bl	80016b0 <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f831 	bl	80079b2 <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e027      	b.n	80079aa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b04      	cmp	r3, #4
 8007966:	d10e      	bne.n	8007986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f81b 	bl	80079b2 <UART_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e011      	b.n	80079aa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b09c      	sub	sp, #112	; 0x70
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	603b      	str	r3, [r7, #0]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c2:	e0a7      	b.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ca:	f000 80a3 	beq.w	8007b14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ce:	f7f9 fe6f 	bl	80016b0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079da:	429a      	cmp	r2, r3
 80079dc:	d302      	bcc.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80079de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d13f      	bne.n	8007a64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079f8:	667b      	str	r3, [r7, #100]	; 0x64
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e6      	bne.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a36:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e068      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d050      	beq.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a80:	d148      	bne.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8007aac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e6      	bne.n	8007a8c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3308      	adds	r3, #8
 8007adc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ade:	623a      	str	r2, [r7, #32]
 8007ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e010      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69da      	ldr	r2, [r3, #28]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	bf0c      	ite	eq
 8007b24:	2301      	moveq	r3, #1
 8007b26:	2300      	movne	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	f43f af48 	beq.w	80079c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3770      	adds	r7, #112	; 0x70
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b40:	b084      	sub	sp, #16
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	f107 001c 	add.w	r0, r7, #28
 8007b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d120      	bne.n	8007b9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	4b20      	ldr	r3, [pc, #128]	; (8007bec <USB_CoreInit+0xac>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d105      	bne.n	8007b8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa96 	bl	80080c0 <USB_CoreReset>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e010      	b.n	8007bbc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa8a 	bl	80080c0 <USB_CoreReset>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d10b      	bne.n	8007bda <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f043 0206 	orr.w	r2, r3, #6
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f043 0220 	orr.w	r2, r3, #32
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007be6:	b004      	add	sp, #16
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	ffbdffbf 	.word	0xffbdffbf

08007bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f023 0201 	bic.w	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d115      	bne.n	8007c60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7f9 fd41 	bl	80016c8 <HAL_Delay>
      ms++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa29 	bl	80080a4 <USB_GetMode>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d01e      	beq.n	8007c96 <USB_SetCurrentMode+0x84>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b31      	cmp	r3, #49	; 0x31
 8007c5c:	d9f0      	bls.n	8007c40 <USB_SetCurrentMode+0x2e>
 8007c5e:	e01a      	b.n	8007c96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d115      	bne.n	8007c92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c72:	2001      	movs	r0, #1
 8007c74:	f7f9 fd28 	bl	80016c8 <HAL_Delay>
      ms++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa10 	bl	80080a4 <USB_GetMode>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <USB_SetCurrentMode+0x84>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b31      	cmp	r3, #49	; 0x31
 8007c8e:	d9f0      	bls.n	8007c72 <USB_SetCurrentMode+0x60>
 8007c90:	e001      	b.n	8007c96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e005      	b.n	8007ca2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b32      	cmp	r3, #50	; 0x32
 8007c9a:	d101      	bne.n	8007ca0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cac:	b084      	sub	sp, #16
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	e009      	b.n	8007ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3340      	adds	r3, #64	; 0x40
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2b0e      	cmp	r3, #14
 8007ce4:	d9f2      	bls.n	8007ccc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d11c      	bne.n	8007d26 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cfa:	f043 0302 	orr.w	r3, r3, #2
 8007cfe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e005      	b.n	8007d32 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d38:	461a      	mov	r2, r3
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d44:	4619      	mov	r1, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	680b      	ldr	r3, [r1, #0]
 8007d50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d10c      	bne.n	8007d72 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d5e:	2100      	movs	r1, #0
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f965 	bl	8008030 <USB_SetDevSpeed>
 8007d66:	e008      	b.n	8007d7a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d68:	2101      	movs	r1, #1
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f960 	bl	8008030 <USB_SetDevSpeed>
 8007d70:	e003      	b.n	8007d7a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d72:	2103      	movs	r1, #3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f95b 	bl	8008030 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d7a:	2110      	movs	r1, #16
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8f3 	bl	8007f68 <USB_FlushTxFifo>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f91f 	bl	8007fd0 <USB_FlushRxFifo>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da2:	461a      	mov	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dae:	461a      	mov	r2, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	e043      	b.n	8007e4e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ddc:	d118      	bne.n	8007e10 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	461a      	mov	r2, r3
 8007df2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	e013      	b.n	8007e22 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	461a      	mov	r2, r3
 8007e08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	e008      	b.n	8007e22 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	2300      	movs	r3, #0
 8007e20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	461a      	mov	r2, r3
 8007e42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d3b7      	bcc.n	8007dc6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e56:	2300      	movs	r3, #0
 8007e58:	613b      	str	r3, [r7, #16]
 8007e5a:	e043      	b.n	8007ee4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e72:	d118      	bne.n	8007ea6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e013      	b.n	8007eb8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	e008      	b.n	8007eb8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007edc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d3b7      	bcc.n	8007e5c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007efe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d105      	bne.n	8007f20 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	f043 0210 	orr.w	r2, r3, #16
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699a      	ldr	r2, [r3, #24]
 8007f24:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <USB_DevInit+0x2b4>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f043 0208 	orr.w	r2, r3, #8
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d105      	bne.n	8007f50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699a      	ldr	r2, [r3, #24]
 8007f48:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <USB_DevInit+0x2b8>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f5c:	b004      	add	sp, #16
 8007f5e:	4770      	bx	lr
 8007f60:	803c3800 	.word	0x803c3800
 8007f64:	40000004 	.word	0x40000004

08007f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4a13      	ldr	r2, [pc, #76]	; (8007fcc <USB_FlushTxFifo+0x64>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e01b      	b.n	8007fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	daf2      	bge.n	8007f76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	019b      	lsls	r3, r3, #6
 8007f98:	f043 0220 	orr.w	r2, r3, #32
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <USB_FlushTxFifo+0x64>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d901      	bls.n	8007fb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e006      	b.n	8007fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d0f0      	beq.n	8007fa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	00030d40 	.word	0x00030d40

08007fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4a11      	ldr	r2, [pc, #68]	; (800802c <USB_FlushRxFifo+0x5c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e018      	b.n	8008020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	daf2      	bge.n	8007fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4a08      	ldr	r2, [pc, #32]	; (800802c <USB_FlushRxFifo+0x5c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d901      	bls.n	8008012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e006      	b.n	8008020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b10      	cmp	r3, #16
 800801c:	d0f0      	beq.n	8008000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	00030d40 	.word	0x00030d40

08008030 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008050:	4313      	orrs	r3, r2
 8008052:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800807c:	f023 0303 	bic.w	r3, r3, #3
 8008080:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008090:	f043 0302 	orr.w	r3, r3, #2
 8008094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f003 0301 	and.w	r3, r3, #1
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4a13      	ldr	r2, [pc, #76]	; (8008124 <USB_CoreReset+0x64>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d901      	bls.n	80080de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e01b      	b.n	8008116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	daf2      	bge.n	80080cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f043 0201 	orr.w	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a09      	ldr	r2, [pc, #36]	; (8008124 <USB_CoreReset+0x64>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d901      	bls.n	8008108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e006      	b.n	8008116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b01      	cmp	r3, #1
 8008112:	d0f0      	beq.n	80080f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	00030d40 	.word	0x00030d40

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	; (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	; (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	; (800816c <__libc_init_array+0x44>)
 800813c:	f000 f820 	bl	8008180 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	0800821c 	.word	0x0800821c
 8008164:	0800821c 	.word	0x0800821c
 8008168:	0800821c 	.word	0x0800821c
 800816c:	08008220 	.word	0x08008220

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
