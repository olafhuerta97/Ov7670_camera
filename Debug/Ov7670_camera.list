
Ov7670_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008018  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008330  08008330  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08008338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000104  0800843c  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001a4  080084dc  000201a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00038c1c  20000244  0800857c  00020244  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20038e60  0800857c  00028e60  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e5a1  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ee5  00000000  00000000  0003e813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e0  00000000  00000000  000426f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001518  00000000  00000000  00043dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b96c  00000000  00000000  000452f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f2ca  00000000  00000000  00070c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001071ae  00000000  00000000  0008ff26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001970d4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f54  00000000  00000000  00197124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000244 	.word	0x20000244
 8000214:	00000000 	.word	0x00000000
 8000218:	080081f8 	.word	0x080081f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000248 	.word	0x20000248
 8000234:	080081f8 	.word	0x080081f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_DCMI_Init+0x60>)
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_DCMI_Init+0x64>)
 8000544:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_DCMI_Init+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_DCMI_Init+0x60>)
 800054e:	2220      	movs	r2, #32
 8000550:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_DCMI_Init+0x60>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_DCMI_Init+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_DCMI_Init+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_DCMI_Init+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_DCMI_Init+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_DCMI_Init+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_DCMI_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_DCMI_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_DCMI_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_DCMI_Init+0x60>)
 800058a:	f001 fa19 	bl	80019c0 <HAL_DCMI_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fc68 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000260 	.word	0x20000260
 80005a0:	50050000 	.word	0x50050000

080005a4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08e      	sub	sp, #56	; 0x38
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a6d      	ldr	r2, [pc, #436]	; (8000778 <HAL_DCMI_MspInit+0x1d4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	f040 80d3 	bne.w	800076e <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80005c8:	4b6c      	ldr	r3, [pc, #432]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005cc:	4a6b      	ldr	r2, [pc, #428]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6353      	str	r3, [r2, #52]	; 0x34
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
 80005de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a65      	ldr	r2, [pc, #404]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
 80005ec:	4b63      	ldr	r3, [pc, #396]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a5f      	ldr	r2, [pc, #380]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
 8000604:	4b5d      	ldr	r3, [pc, #372]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a59      	ldr	r2, [pc, #356]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
 800061c:	4b57      	ldr	r3, [pc, #348]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a53      	ldr	r2, [pc, #332]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a4d      	ldr	r2, [pc, #308]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 8000646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <HAL_DCMI_MspInit+0x1d8>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000658:	2370      	movs	r3, #112	; 0x70
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000668:	230d      	movs	r3, #13
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4843      	ldr	r0, [pc, #268]	; (8000780 <HAL_DCMI_MspInit+0x1dc>)
 8000674:	f003 fd16 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000678:	2350      	movs	r3, #80	; 0x50
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000688:	230d      	movs	r3, #13
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	483c      	ldr	r0, [pc, #240]	; (8000784 <HAL_DCMI_MspInit+0x1e0>)
 8000694:	f003 fd06 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000698:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006aa:	230d      	movs	r3, #13
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <HAL_DCMI_MspInit+0x1e4>)
 80006b6:	f003 fcf5 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ba:	2308      	movs	r3, #8
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ca:	230d      	movs	r3, #13
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	4619      	mov	r1, r3
 80006d4:	482d      	ldr	r0, [pc, #180]	; (800078c <HAL_DCMI_MspInit+0x1e8>)
 80006d6:	f003 fce5 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ec:	230d      	movs	r3, #13
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	4826      	ldr	r0, [pc, #152]	; (8000790 <HAL_DCMI_MspInit+0x1ec>)
 80006f8:	f003 fcd4 	bl	80040a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <HAL_DCMI_MspInit+0x1f4>)
 8000700:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000708:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000724:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000736:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800073a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000744:	f001 fc08 	bl	8001f58 <HAL_DMA_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_DCMI_MspInit+0x1ae>
    {
      Error_Handler();
 800074e:	f000 fb8b 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 8000756:	649a      	str	r2, [r3, #72]	; 0x48
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_DCMI_MspInit+0x1f0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	204e      	movs	r0, #78	; 0x4e
 8000764:	f001 f8f5 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000768:	204e      	movs	r0, #78	; 0x4e
 800076a:	f001 f90e 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3738      	adds	r7, #56	; 0x38
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	50050000 	.word	0x50050000
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020000 	.word	0x40020000
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40021800 	.word	0x40021800
 8000794:	200002b0 	.word	0x200002b0
 8000798:	40026428 	.word	0x40026428

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x38>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x38>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2039      	movs	r0, #57	; 0x39
 80007c0:	f001 f8c7 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007c4:	2039      	movs	r0, #57	; 0x39
 80007c6:	f001 f8e0 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <MX_ETH_Init+0x88>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ETH_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ETH_Init+0x8c>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ETH_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ETH_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ETH_Init+0x84>)
 8000808:	4a16      	ldr	r2, [pc, #88]	; (8000864 <MX_ETH_Init+0x8c>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ETH_Init+0x84>)
 800080e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000812:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ETH_Init+0x84>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_ETH_Init+0x90>)
 8000818:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_ETH_Init+0x84>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x94>)
 800081e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ETH_Init+0x84>)
 8000822:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000826:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x84>)
 800082a:	f003 f915 	bl	8003a58 <HAL_ETH_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 fb18 	bl	8000e68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000838:	2238      	movs	r2, #56	; 0x38
 800083a:	2100      	movs	r1, #0
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x98>)
 800083e:	f007 fcd3 	bl	80081e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ETH_Init+0x98>)
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_ETH_Init+0x98>)
 800084a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800084e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_ETH_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000348 	.word	0x20000348
 8000860:	40028000 	.word	0x40028000
 8000864:	200003f8 	.word	0x200003f8
 8000868:	200001a4 	.word	0x200001a4
 800086c:	20000104 	.word	0x20000104
 8000870:	20000310 	.word	0x20000310

08000874 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a4e      	ldr	r2, [pc, #312]	; (80009cc <HAL_ETH_MspInit+0x158>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f040 8096 	bne.w	80009c4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000898:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a40      	ldr	r2, [pc, #256]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 800092e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_ETH_MspInit+0x15c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000940:	2332      	movs	r3, #50	; 0x32
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000950:	230b      	movs	r3, #11
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <HAL_ETH_MspInit+0x160>)
 800095c:	f003 fba2 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000960:	2386      	movs	r3, #134	; 0x86
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4817      	ldr	r0, [pc, #92]	; (80009d8 <HAL_ETH_MspInit+0x164>)
 800097c:	f003 fb92 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000992:	230b      	movs	r3, #11
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <HAL_ETH_MspInit+0x168>)
 800099e:	f003 fb81 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_ETH_MspInit+0x16c>)
 80009c0:	f003 fb70 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40028000 	.word	0x40028000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800

080009e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x180>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a59      	ldr	r2, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b54      	ldr	r3, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a53      	ldr	r2, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a4d      	ldr	r2, [pc, #308]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a41      	ldr	r2, [pc, #260]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a35      	ldr	r2, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_GPIO_Init+0x180>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CAMERA_RESET_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f644 0181 	movw	r1, #18561	; 0x4881
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000ac2:	f003 fc9b 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4828      	ldr	r0, [pc, #160]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000acc:	f003 fc96 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <MX_GPIO_Init+0x18c>)
 8000ae8:	f003 fadc 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000b06:	f003 facd 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x184>)
 8000b24:	f003 fabe 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000b40:	f003 fab0 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x188>)
 8000b58:	f003 faa4 	bl	80040a4 <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C2_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C2_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bb0:	f003 fc3e 	bl	8004430 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 f955 	bl	8000e68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bc2:	f004 fa83 	bl	80050cc <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 f94c 	bl	8000e68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bd4:	f004 fac5 	bl	8005162 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 f943 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000400 	.word	0x20000400
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	20404768 	.word	0x20404768

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	; 0xb8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2290      	movs	r2, #144	; 0x90
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 fae7 	bl	80081e8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_I2C_MspInit+0xb0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d13b      	bne.n	8000c9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f005 f95e 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f000 f913 	bl	8000e68 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_I2C_MspInit+0xb8>)
 8000c80:	f003 fa10 	bl	80040a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_I2C_MspInit+0xb4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	37b8      	adds	r7, #184	; 0xb8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40021400 	.word	0x40021400

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fcf0 	bl	800169a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f865 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f7ff fe91 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc2:	f7ff fd6b 	bl	800079c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cc6:	f000 f9ed 	bl	80010a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cca:	f000 fa7b 	bl	80011c4 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000cce:	f7ff fc35 	bl	800053c <MX_DCMI_Init>
  MX_I2C2_Init();
 8000cd2:	f7ff ff4f 	bl	8000b74 <MX_I2C2_Init>
  MX_ETH_Init();
 8000cd6:	f7ff fd7f 	bl	80007d8 <MX_ETH_Init>
  MX_TIM10_Init();
 8000cda:	f000 f93f 	bl	8000f5c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start(&htim10, TIM_CHANNEL_1);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4821      	ldr	r0, [pc, #132]	; (8000d68 <main+0xb8>)
 8000ce2:	f005 fde7 	bl	80068b4 <HAL_TIM_OC_Start>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000ce6:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <main+0xbc>)
 8000ce8:	4921      	ldr	r1, [pc, #132]	; (8000d70 <main+0xc0>)
 8000cea:	4822      	ldr	r0, [pc, #136]	; (8000d74 <main+0xc4>)
 8000cec:	f000 fb12 	bl	8001314 <ov7670_init>
  ov7670_config(0u);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fb57 	bl	80013a4 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS, (uint32_t)imagebuf);
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <main+0xc8>)
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 fbac 	bl	8001458 <ov7670_startCap>
  HAL_Delay(2000);
 8000d00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d04:	f000 fd26 	bl	8001754 <HAL_Delay>
  //ov7670_stopCap();
  uint8_t send = 255;
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  for (i = 1; i<= (OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT *2); i+=2){
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	e00a      	b.n	8000d28 <main+0x78>
	  tempbuf[i/2]=imagebuf[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	085b      	lsrs	r3, r3, #1
 8000d16:	4918      	ldr	r1, [pc, #96]	; (8000d78 <main+0xc8>)
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	440a      	add	r2, r1
 8000d1c:	7811      	ldrb	r1, [r2, #0]
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <main+0xcc>)
 8000d20:	54d1      	strb	r1, [r2, r3]
  for (i = 1; i<= (OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT *2); i+=2){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3302      	adds	r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000d2e:	d9f0      	bls.n	8000d12 <main+0x62>
  }
  for(i=0; i < 2* OV7670_QVGA_WIDTH; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	e002      	b.n	8000d3c <main+0x8c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000d42:	d3f8      	bcc.n	8000d36 <main+0x86>
  {
 // HAL_UART_Transmit(&huart3, &send, 1, 1000);
  }
  HAL_UART_Transmit(&huart3, tempbuf, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2, 1000);
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d4c:	490b      	ldr	r1, [pc, #44]	; (8000d7c <main+0xcc>)
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <main+0xd0>)
 8000d50:	f006 fa95 	bl	800727e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, &tempbuf[OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2], OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2, 1000);
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d5c:	4909      	ldr	r1, [pc, #36]	; (8000d84 <main+0xd4>)
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <main+0xd0>)
 8000d60:	f006 fa8d 	bl	800727e <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart3, "hola", sizeof("hola"), 1000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <main+0xb4>
 8000d66:	bf00      	nop
 8000d68:	20038854 	.word	0x20038854
 8000d6c:	20000400 	.word	0x20000400
 8000d70:	200002b0 	.word	0x200002b0
 8000d74:	20000260 	.word	0x20000260
 8000d78:	20000454 	.word	0x20000454
 8000d7c:	20025c54 	.word	0x20025c54
 8000d80:	200388a0 	.word	0x200388a0
 8000d84:	2002f254 	.word	0x2002f254

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2234      	movs	r2, #52	; 0x34
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f007 fa26 	bl	80081e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dac:	f004 fb6e 	bl	800548c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <SystemClock_Config+0xd8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <SystemClock_Config+0xd8>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xd8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <SystemClock_Config+0xdc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000de4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000de8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000df4:	2304      	movs	r3, #4
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000df8:	23d8      	movs	r3, #216	; 0xd8
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e00:	2309      	movs	r3, #9
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 fb9d 	bl	800554c <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e18:	f000 f826 	bl	8000e68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e1c:	f004 fb46 	bl	80054ac <HAL_PWREx_EnableOverDrive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e26:	f000 f81f 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	2107      	movs	r1, #7
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fe2d 	bl	8005aa8 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e54:	f000 f808 	bl	8000e68 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_MspInit+0x44>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_MspInit+0x44>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_MspInit+0x44>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_MspInit+0x44>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_MspInit+0x44>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_MspInit+0x44>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 fc04 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <DMA2_Stream1_IRQHandler+0x10>)
 8000f16:	f001 f9bf 	bl	8002298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200002b0 	.word	0x200002b0

08000f24 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DCMI_IRQHandler+0x10>)
 8000f2a:	f000 fecf 	bl	8001ccc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000260 	.word	0x20000260

08000f38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <MX_TIM10_Init+0x94>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5-1;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_TIM10_Init+0x90>)
 8000f9a:	f005 fbd3 	bl	8006744 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f7ff ff60 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <MX_TIM10_Init+0x90>)
 8000faa:	f005 fc22 	bl	80067f2 <HAL_TIM_OC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f7ff ff58 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fb8:	2330      	movs	r3, #48	; 0x30
 8000fba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM10_Init+0x90>)
 8000fd0:	f005 fd6a 	bl	8006aa8 <HAL_TIM_OC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8000fda:	f7ff ff45 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM10_Init+0x90>)
 8000fe0:	f000 f828 	bl	8001034 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20038854 	.word	0x20038854
 8000ff0:	40014400 	.word	0x40014400

08000ff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x38>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10b      	bne.n	800101e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_TIM_Base_MspInit+0x3c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_TIM_Base_MspInit+0x3c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40014400 	.word	0x40014400
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d11c      	bne.n	8001090 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_TIM_MspPostInit+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_MspPostInit+0x68>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_TIM_MspPostInit+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001080:	2303      	movs	r3, #3
 8001082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_TIM_MspPostInit+0x6c>)
 800108c:	f003 f80a 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40014400 	.word	0x40014400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <MX_USART3_UART_Init+0x5c>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010b0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80010b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010da:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_USART3_UART_Init+0x58>)
 80010ea:	f006 f87a 	bl	80071e2 <HAL_UART_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80010f4:	f7ff feb8 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200388a0 	.word	0x200388a0
 8001100:	40004800 	.word	0x40004800

08001104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ae      	sub	sp, #184	; 0xb8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2290      	movs	r2, #144	; 0x90
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f007 f85f 	bl	80081e8 <memset>
  if(uartHandle->Instance==USART3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_UART_MspInit+0xb4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13c      	bne.n	80011ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001138:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800113a:	2300      	movs	r3, #0
 800113c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fed6 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114e:	f7ff fe8b 	bl	8000e68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_UART_MspInit+0xb8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_UART_MspInit+0xb8>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0xb8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_MspInit+0xb8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_UART_MspInit+0xb8>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0xb8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800119c:	2307      	movs	r3, #7
 800119e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_UART_MspInit+0xbc>)
 80011aa:	f002 ff7b 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ae:	bf00      	nop
 80011b0:	37b8      	adds	r7, #184	; 0xb8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004800 	.word	0x40004800
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020c00 	.word	0x40020c00

080011c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d2:	2206      	movs	r2, #6
 80011d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d8:	2202      	movs	r2, #2
 80011da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001208:	f003 fff7 	bl	80051fa <HAL_PCD_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001212:	f7ff fe29 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20038928 	.word	0x20038928

08001220 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0ae      	sub	sp, #184	; 0xb8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2290      	movs	r2, #144	; 0x90
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f006 ffd1 	bl	80081e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124e:	d159      	bne.n	8001304 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001254:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fe47 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800126c:	f7ff fdfc 	bl	8000e68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_PCD_MspInit+0xec>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <HAL_PCD_MspInit+0xec>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <HAL_PCD_MspInit+0xec>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001288:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800128c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012a2:	230a      	movs	r3, #10
 80012a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4818      	ldr	r0, [pc, #96]	; (8001310 <HAL_PCD_MspInit+0xf0>)
 80012b0:	f002 fef8 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4810      	ldr	r0, [pc, #64]	; (8001310 <HAL_PCD_MspInit+0xf0>)
 80012d0:	f002 fee8 	bl	80040a4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_PCD_MspInit+0xec>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_PCD_MspInit+0xec>)
 80012da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012de:	6353      	str	r3, [r2, #52]	; 0x34
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_PCD_MspInit+0xec>)
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_PCD_MspInit+0xec>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_PCD_MspInit+0xec>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	6453      	str	r3, [r2, #68]	; 0x44
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_PCD_MspInit+0xec>)
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	37b8      	adds	r7, #184	; 0xb8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <ov7670_init+0x7c>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8001326:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <ov7670_init+0x80>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 800132c:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <ov7670_init+0x84>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <ov7670_init+0x88>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <ov7670_init+0x8c>)
 8001340:	f003 f85c 	bl	80043fc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f000 fa05 	bl	8001754 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <ov7670_init+0x8c>)
 8001352:	f003 f853 	bl	80043fc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001356:	2064      	movs	r0, #100	; 0x64
 8001358:	f000 f9fc 	bl	8001754 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	2012      	movs	r0, #18
 8001360:	f000 f92c 	bl	80015bc <ov7670_write>
  HAL_Delay(30);
 8001364:	201e      	movs	r0, #30
 8001366:	f000 f9f5 	bl	8001754 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	200b      	movs	r0, #11
 8001372:	f000 f943 	bl	80015fc <ov7670_read>
  ov7670_read(0x01, &buffer[1]);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	3301      	adds	r3, #1
 800137c:	4619      	mov	r1, r3
 800137e:	2001      	movs	r0, #1
 8001380:	f000 f93c 	bl	80015fc <ov7670_read>
 // printf("[OV7670] dev id = %02X\n", buffer[0]);


  return RET_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20038e3c 	.word	0x20038e3c
 8001394:	20038e40 	.word	0x20038e40
 8001398:	20038e44 	.word	0x20038e44
 800139c:	20038e48 	.word	0x20038e48
 80013a0:	40020400 	.word	0x40020400

080013a4 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint8_t ret_value;
  ov7670_stopCap();
 80013ac:	f000 f882 	bl	80014b4 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	2012      	movs	r0, #18
 80013b4:	f000 f902 	bl	80015bc <ov7670_write>
  HAL_Delay(30);
 80013b8:	201e      	movs	r0, #30
 80013ba:	f000 f9cb 	bl	8001754 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e012      	b.n	80013ea <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <ov7670_config+0xac>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013cc:	4920      	ldr	r1, [pc, #128]	; (8001450 <ov7670_config+0xac>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	440b      	add	r3, r1
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f000 f8ef 	bl	80015bc <ov7670_write>
    HAL_Delay(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f000 f9b8 	bl	8001754 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <ov7670_config+0xac>)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d1e6      	bne.n	80013c4 <ov7670_config+0x20>
  }
  for(int i = 0; OV7670_reg_read[i][0] != REG_BATT; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	e01d      	b.n	8001438 <ov7670_config+0x94>
	ret_value = ov7670_read(OV7670_reg_read[i][0], &OV7670_reg_read[i][1]);
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <ov7670_config+0xb0>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	3301      	adds	r3, #1
 800140a:	4912      	ldr	r1, [pc, #72]	; (8001454 <ov7670_config+0xb0>)
 800140c:	440b      	add	r3, r1
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f000 f8f3 	bl	80015fc <ov7670_read>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
    if (ret_value != HAL_OK){
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <ov7670_config+0x88>
    	OV7670_reg_read[i][1]=0xFF;
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <ov7670_config+0xb0>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	22ff      	movs	r2, #255	; 0xff
 800142a:	705a      	strb	r2, [r3, #1]
    }
    HAL_Delay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f000 f991 	bl	8001754 <HAL_Delay>
  for(int i = 0; OV7670_reg_read[i][0] != REG_BATT; i++) {
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	3301      	adds	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <ov7670_config+0xb0>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001440:	2bff      	cmp	r3, #255	; 0xff
 8001442:	d1db      	bne.n	80013fc <ov7670_config+0x58>
  }
  return RET_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	08008228 	.word	0x08008228
 8001454:	20000004 	.word	0x20000004

08001458 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8001462:	f000 f827 	bl	80014b4 <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <ov7670_startCap+0x54>)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <ov7670_startCap+0x58>)
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	f000 fb19 	bl	8001ab4 <HAL_DCMI_Start_DMA>
 8001482:	e00d      	b.n	80014a0 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10a      	bne.n	80014a0 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <ov7670_startCap+0x54>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <ov7670_startCap+0x58>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	2102      	movs	r1, #2
 800149c:	f000 fb0a 	bl	8001ab4 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20038e48 	.word	0x20038e48
 80014b0:	20038e3c 	.word	0x20038e3c

080014b4 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <ov7670_stopCap+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fba7 	bl	8001c10 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20038e3c 	.word	0x20038e3c

080014cc <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	f_events++;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_DCMI_FrameEventCallback+0x70>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_DCMI_FrameEventCallback+0x70>)
 80014dc:	6013      	str	r3, [r2, #0]
    if (f_events == 1){
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_DCMI_FrameEventCallback+0x70>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d104      	bne.n	80014f0 <HAL_DCMI_FrameEventCallback+0x24>
		HAL_DCMI_Stop(sp_hdcmi);
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_DCMI_FrameEventCallback+0x74>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fb90 	bl	8001c10 <HAL_DCMI_Stop>
	}
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_DCMI_FrameEventCallback+0x78>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_DCMI_FrameEventCallback+0x38>
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_DCMI_FrameEventCallback+0x78>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_DCMI_FrameEventCallback+0x7c>)
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	4610      	mov	r0, r2
 8001502:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_DCMI_FrameEventCallback+0x80>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_DCMI_FrameEventCallback+0x58>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT /2);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3328      	adds	r3, #40	; 0x28
 8001516:	4619      	mov	r1, r3
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_DCMI_FrameEventCallback+0x80>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001520:	f000 fdc8 	bl	80020b4 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_DCMI_FrameEventCallback+0x7c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_DCMI_FrameEventCallback+0x7c>)
 800152c:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_DCMI_FrameEventCallback+0x84>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20038e38 	.word	0x20038e38
 8001540:	20038e3c 	.word	0x20038e3c
 8001544:	20038e50 	.word	0x20038e50
 8001548:	20038e58 	.word	0x20038e58
 800154c:	20038e48 	.word	0x20038e48
 8001550:	20038e54 	.word	0x20038e54

08001554 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	v_events++;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_DCMI_VsyncEventCallback+0x20>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_DCMI_VsyncEventCallback+0x20>)
 8001564:	6013      	str	r3, [r2, #0]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20038e34 	.word	0x20038e34

08001578 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	h_events++;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_DCMI_LineEventCallback+0x38>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_DCMI_LineEventCallback+0x38>)
 8001588:	6013      	str	r3, [r2, #0]

////  printf("HSYNC %d\n", HAL_GetTick());
  if(s_cbHsync)s_cbHsync(s_currentH);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_DCMI_LineEventCallback+0x3c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_DCMI_LineEventCallback+0x26>
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_DCMI_LineEventCallback+0x3c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_DCMI_LineEventCallback+0x40>)
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	4610      	mov	r0, r2
 800159c:	4798      	blx	r3
  s_currentH++;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_DCMI_LineEventCallback+0x40>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_DCMI_LineEventCallback+0x40>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20038e30 	.word	0x20038e30
 80015b4:	20038e4c 	.word	0x20038e4c
 80015b8:	20038e54 	.word	0x20038e54

080015bc <ov7670_write>:

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <ov7670_write+0x3c>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	2364      	movs	r3, #100	; 0x64
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	2301      	movs	r3, #1
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	1dbb      	adds	r3, r7, #6
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2142      	movs	r1, #66	; 0x42
 80015e4:	f003 f99e 	bl	8004924 <HAL_I2C_Mem_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20038e44 	.word	0x20038e44

080015fc <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <ov7670_read+0x48>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	1dfa      	adds	r2, r7, #7
 800160e:	2364      	movs	r3, #100	; 0x64
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	2142      	movs	r1, #66	; 0x42
 8001616:	f002 ff9b 	bl	8004550 <HAL_I2C_Master_Transmit>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <ov7670_read+0x48>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	2142      	movs	r1, #66	; 0x42
 800162c:	f003 f884 	bl	8004738 <HAL_I2C_Master_Receive>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	4313      	orrs	r3, r2
 8001638:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20038e44 	.word	0x20038e44

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001672:	f7ff fc61 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f006 fd93 	bl	80081a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fb19 	bl	8000cb0 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800168c:	08008338 	.word	0x08008338
  ldr r2, =_sbss
 8001690:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001694:	20038e60 	.word	0x20038e60

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>

0800169a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 f94c 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f805 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016aa:	f7ff fbe3 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f967 	bl	80019a6 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20000100 	.word	0x20000100
 8001710:	200000fc 	.word	0x200000fc

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000100 	.word	0x20000100
 8001738:	20038e5c 	.word	0x20038e5c

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20038e5c 	.word	0x20038e5c

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000100 	.word	0x20000100

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <__NVIC_SetPriorityGrouping+0x40>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x40>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	05fa0000 	.word	0x05fa0000

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e069      	b.n	8001aa6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fde0 	bl	80005a4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_DCMI_Init+0xf0>)
 8001a06:	400b      	ands	r3, r1
 8001a08:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a1e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a2a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a36:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a42:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a4e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d112      	bne.n	8001a86 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a6c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f9b      	ldrb	r3, [r3, #30]
 8001a72:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a74:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7fdb      	ldrb	r3, [r3, #31]
 8001a7c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a82:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a84:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 021e 	orr.w	r2, r2, #30
 8001a94:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	ffe0f007 	.word	0xffe0f007

08001ab4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_DCMI_Start_DMA+0x20>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e095      	b.n	8001c00 <HAL_DCMI_Start_DMA+0x14c>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001af2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0202 	bic.w	r2, r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b18:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_DCMI_Start_DMA+0x154>)
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	4a3a      	ldr	r2, [pc, #232]	; (8001c0c <HAL_DCMI_Start_DMA+0x158>)
 8001b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b28:	2200      	movs	r2, #0
 8001b2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4a:	d20e      	bcs.n	8001b6a <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3328      	adds	r3, #40	; 0x28
 8001b56:	4619      	mov	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	f000 faaa 	bl	80020b4 <HAL_DMA_Start_IT>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d03f      	beq.n	8001be6 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e04a      	b.n	8001c00 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6e:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <HAL_DCMI_Start_DMA+0x154>)
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001b84:	e009      	b.n	8001b9a <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	085a      	lsrs	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	005a      	lsls	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d2f0      	bcs.n	8001b86 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	1e9a      	subs	r2, r3, #2
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3328      	adds	r3, #40	; 0x28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	f000 fdc8 	bl	800276c <HAL_DMAEx_MultiBufferStart_IT>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00c      	b.n	8001c00 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	08001df5 	.word	0x08001df5
 8001c0c:	08001f1f 	.word	0x08001f1f

08001c10 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_DCMI_Stop+0xb4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <HAL_DCMI_Stop+0xb8>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0a5b      	lsrs	r3, r3, #9
 8001c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c28:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_DCMI_Stop+0x2e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e03d      	b.n	8001cba <HAL_DCMI_Stop+0xaa>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001c5e:	4623      	mov	r3, r4
 8001c60:	1e5c      	subs	r4, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	73fb      	strb	r3, [r7, #15]
      break;
 8001c76:	e006      	b.n	8001c86 <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1eb      	bne.n	8001c5e <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c94:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fa6a 	bl	8002174 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d016      	beq.n	8001d14 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	4a35      	ldr	r2, [pc, #212]	; (8001ddc <HAL_DCMI_IRQHandler+0x110>)
 8001d08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 faa0 	bl	8002254 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01e      	beq.n	8001d5c <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2204      	movs	r2, #4
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3e:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_DCMI_IRQHandler+0x110>)
 8001d40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fa84 	bl	8002254 <HAL_DMA_Abort_IT>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f8e1 	bl	8001f1e <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fc02 	bl	8001578 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2208      	movs	r2, #8
 8001d84:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fbe4 	bl	8001554 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d01d      	beq.n	8001dd2 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d107      	bne.n	8001db4 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 021e 	bic.w	r2, r2, #30
 8001db2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fb7d 	bl	80014cc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	08001f1f 	.word	0x08001f1f

08001de0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d043      	beq.n	8001e96 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d118      	bne.n	8001e5a <DCMI_DMAXferCplt+0x66>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	00da      	lsls	r2, r3, #3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f001 fdc5 	bl	80039d8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38
 8001e58:	e044      	b.n	8001ee4 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d13c      	bne.n	8001ee4 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	00da      	lsls	r2, r3, #3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	2201      	movs	r2, #1
 8001e84:	4619      	mov	r1, r3
 8001e86:	f001 fda7 	bl	80039d8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	1e5a      	subs	r2, r3, #1
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
 8001e94:	e026      	b.n	8001ee4 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	e017      	b.n	8001ee4 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10f      	bne.n	8001ee4 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	0099      	lsls	r1, r3, #2
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	440a      	add	r2, r1
 8001eda:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d112      	bne.n	8001f16 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d103      	bne.n	8001f16 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d009      	beq.n	8001f4a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff ff48 	bl	8001de0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff fbea 	bl	800173c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e099      	b.n	80020a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e00f      	b.n	8001fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff fbd1 	bl	800173c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d908      	bls.n	8001fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e078      	b.n	80020a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e8      	bne.n	8001f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_DMA_Init+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b04      	cmp	r3, #4
 8002048:	d117      	bne.n	800207a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00e      	beq.n	800207a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fb09 	bl	8002674 <DMA_CheckFifoParam>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002076:	2301      	movs	r3, #1
 8002078:	e016      	b.n	80020a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fac0 	bl	8002608 <DMA_CalcBaseAndBitshift>
 8002088:	4603      	mov	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	223f      	movs	r2, #63	; 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	e010803f 	.word	0xe010803f

080020b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x26>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e048      	b.n	800216c <HAL_DMA_Start_IT+0xb8>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d137      	bne.n	800215e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fa52 	bl	80025ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	223f      	movs	r2, #63	; 0x3f
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0216 	orr.w	r2, r2, #22
 8002122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002132:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0208 	orr.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e005      	b.n	800216a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7ff fadb 	bl	800173c <HAL_GetTick>
 8002186:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e052      	b.n	800224c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0216 	bic.w	r2, r2, #22
 80021b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_DMA_Abort+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0208 	bic.w	r2, r2, #8
 80021e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f6:	e013      	b.n	8002220 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f8:	f7ff faa0 	bl	800173c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d90c      	bls.n	8002220 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e015      	b.n	800224c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e4      	bne.n	80021f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00c      	b.n	800228c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2205      	movs	r2, #5
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022a4:	4b8e      	ldr	r3, [pc, #568]	; (80024e0 <HAL_DMA_IRQHandler+0x248>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a8e      	ldr	r2, [pc, #568]	; (80024e4 <HAL_DMA_IRQHandler+0x24c>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0a9b      	lsrs	r3, r3, #10
 80022b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	2208      	movs	r2, #8
 80022c4:	409a      	lsls	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01a      	beq.n	8002304 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2208      	movs	r2, #8
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2201      	movs	r2, #1
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2204      	movs	r2, #4
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2204      	movs	r2, #4
 800235e:	409a      	lsls	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2210      	movs	r2, #16
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d043      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03c      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	2210      	movs	r2, #16
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d024      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
 80023c6:	e01f      	b.n	8002408 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e016      	b.n	8002408 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0208 	bic.w	r2, r2, #8
 80023f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2220      	movs	r2, #32
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 808f 	beq.w	8002538 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8087 	beq.w	8002538 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	2220      	movs	r2, #32
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b05      	cmp	r3, #5
 8002440:	d136      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0216 	bic.w	r2, r2, #22
 8002450:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002460:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <HAL_DMA_IRQHandler+0x1da>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0208 	bic.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	223f      	movs	r2, #63	; 0x3f
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d07e      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
        }
        return;
 80024ae:	e079      	b.n	80025a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01d      	beq.n	80024fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d031      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
 80024dc:	e02c      	b.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000
 80024e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e01e      	b.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0210 	bic.w	r2, r2, #16
 8002516:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	2b00      	cmp	r3, #0
 800253e:	d032      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d022      	beq.n	8002592 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2205      	movs	r2, #5
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	d307      	bcc.n	8002580 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f2      	bne.n	8002564 <HAL_DMA_IRQHandler+0x2cc>
 800257e:	e000      	b.n	8002582 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002580:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a4:	bf00      	nop
    }
  }
}
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d108      	bne.n	80025ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ea:	e007      	b.n	80025fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b10      	subs	r3, #16
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <DMA_CalcBaseAndBitshift+0x60>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <DMA_CalcBaseAndBitshift+0x64>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d908      	bls.n	8002648 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 800263e:	4013      	ands	r3, r2
 8002640:	1d1a      	adds	r2, r3, #4
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	659a      	str	r2, [r3, #88]	; 0x58
 8002646:	e006      	b.n	8002656 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	aaaaaaab 	.word	0xaaaaaaab
 800266c:	08008320 	.word	0x08008320
 8002670:	fffffc00 	.word	0xfffffc00

08002674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d856      	bhi.n	8002742 <DMA_CheckFifoParam+0xce>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <DMA_CheckFifoParam+0x28>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bf 	.word	0x080026bf
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	08002743 	.word	0x08002743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e043      	b.n	8002746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c6:	d140      	bne.n	800274a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e03d      	b.n	800274a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	d121      	bne.n	800271c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d837      	bhi.n	800274e <DMA_CheckFifoParam+0xda>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <DMA_CheckFifoParam+0x70>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026fb 	.word	0x080026fb
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e030      	b.n	800275c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d025      	beq.n	8002752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e022      	b.n	8002752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271a:	e01c      	b.n	8002756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d903      	bls.n	800272a <DMA_CheckFifoParam+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002728:	e018      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e015      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e00b      	b.n	800275a <DMA_CheckFifoParam+0xe6>
      break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;   
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
    }
  } 
  
  return status; 
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b80      	cmp	r3, #128	; 0x80
 8002784:	d106      	bne.n	8002794 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f001 b8ff 	b.w	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 800279e:	2302      	movs	r3, #2
 80027a0:	f001 b8f7 	b.w	8003992 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f041 80e5 	bne.w	8003984 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027d6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f001 f910 	bl	8003a0c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b8d      	ldr	r3, [pc, #564]	; (8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d960      	bls.n	80028ba <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a8b      	ldr	r2, [pc, #556]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d057      	beq.n	80028b2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a8a      	ldr	r2, [pc, #552]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d050      	beq.n	80028ae <HAL_DMAEx_MultiBufferStart_IT+0x142>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a88      	ldr	r2, [pc, #544]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d049      	beq.n	80028aa <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a87      	ldr	r2, [pc, #540]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d042      	beq.n	80028a6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a85      	ldr	r2, [pc, #532]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d03a      	beq.n	80028a0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a84      	ldr	r2, [pc, #528]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d032      	beq.n	800289a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a82      	ldr	r2, [pc, #520]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02a      	beq.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a81      	ldr	r2, [pc, #516]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01a      	beq.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7e      	ldr	r2, [pc, #504]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d012      	beq.n	8002882 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a7c      	ldr	r2, [pc, #496]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00a      	beq.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7b      	ldr	r2, [pc, #492]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8002870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002874:	e01e      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002876:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800287a:	e01b      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800287c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002880:	e018      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002882:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002886:	e015      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800288c:	e012      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800288e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002892:	e00f      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8002894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002898:	e00c      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800289a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800289e:	e009      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80028a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028a4:	e006      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80028a6:	2320      	movs	r3, #32
 80028a8:	e004      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80028aa:	2320      	movs	r3, #32
 80028ac:	e002      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80028ae:	2320      	movs	r3, #32
 80028b0:	e000      	b.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80028b2:	2320      	movs	r3, #32
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80028b6:	60d3      	str	r3, [r2, #12]
 80028b8:	e14f      	b.n	8002b5a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d960      	bls.n	8002988 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d057      	beq.n	8002980 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d050      	beq.n	800297c <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d049      	beq.n	8002978 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a53      	ldr	r2, [pc, #332]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d042      	beq.n	8002974 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d03a      	beq.n	800296e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a50      	ldr	r2, [pc, #320]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d032      	beq.n	8002968 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a4f      	ldr	r2, [pc, #316]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d02a      	beq.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01a      	beq.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d012      	beq.n	8002950 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a49      	ldr	r2, [pc, #292]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00a      	beq.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a47      	ldr	r2, [pc, #284]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d102      	bne.n	8002944 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800293e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002942:	e01e      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002948:	e01b      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800294a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800294e:	e018      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002950:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002954:	e015      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002956:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800295a:	e012      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800295c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002960:	e00f      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002966:	e00c      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800296c:	e009      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800296e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002972:	e006      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002974:	2320      	movs	r3, #32
 8002976:	e004      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002978:	2320      	movs	r3, #32
 800297a:	e002      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800297c:	2320      	movs	r3, #32
 800297e:	e000      	b.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8002980:	2320      	movs	r3, #32
 8002982:	4a36      	ldr	r2, [pc, #216]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	e0e8      	b.n	8002b5a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002990:	429a      	cmp	r2, r3
 8002992:	f240 8082 	bls.w	8002a9a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a24      	ldr	r2, [pc, #144]	; (8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d078      	beq.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d071      	beq.n	8002a8e <HAL_DMAEx_MultiBufferStart_IT+0x322>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d06a      	beq.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d063      	beq.n	8002a86 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d05b      	beq.n	8002a80 <HAL_DMAEx_MultiBufferStart_IT+0x314>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d053      	beq.n	8002a7a <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04b      	beq.n	8002a74 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d043      	beq.n	8002a6e <HAL_DMAEx_MultiBufferStart_IT+0x302>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d03b      	beq.n	8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d012      	beq.n	8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00a      	beq.n	8002a1a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d102      	bne.n	8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 8002a0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a12:	e03f      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a18:	e03c      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a1e:	e039      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a24:	e036      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a26:	bf00      	nop
 8002a28:	40026458 	.word	0x40026458
 8002a2c:	40026010 	.word	0x40026010
 8002a30:	40026410 	.word	0x40026410
 8002a34:	40026070 	.word	0x40026070
 8002a38:	40026470 	.word	0x40026470
 8002a3c:	40026028 	.word	0x40026028
 8002a40:	40026428 	.word	0x40026428
 8002a44:	40026088 	.word	0x40026088
 8002a48:	40026488 	.word	0x40026488
 8002a4c:	40026040 	.word	0x40026040
 8002a50:	40026440 	.word	0x40026440
 8002a54:	400260a0 	.word	0x400260a0
 8002a58:	400264a0 	.word	0x400264a0
 8002a5c:	40026400 	.word	0x40026400
 8002a60:	400260b8 	.word	0x400260b8
 8002a64:	40026058 	.word	0x40026058
 8002a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a6c:	e012      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a72:	e00f      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a78:	e00c      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a7e:	e009      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a84:	e006      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a86:	2320      	movs	r3, #32
 8002a88:	e004      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e002      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e000      	b.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8002a92:	2320      	movs	r3, #32
 8002a94:	4a8c      	ldr	r2, [pc, #560]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8002a96:	60d3      	str	r3, [r2, #12]
 8002a98:	e05f      	b.n	8002b5a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a8b      	ldr	r2, [pc, #556]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d057      	beq.n	8002b54 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a89      	ldr	r2, [pc, #548]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d050      	beq.n	8002b50 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a88      	ldr	r2, [pc, #544]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d049      	beq.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a86      	ldr	r2, [pc, #536]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d042      	beq.n	8002b48 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a85      	ldr	r2, [pc, #532]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d03a      	beq.n	8002b42 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a83      	ldr	r2, [pc, #524]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d032      	beq.n	8002b3c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a82      	ldr	r2, [pc, #520]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d02a      	beq.n	8002b36 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a80      	ldr	r2, [pc, #512]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7f      	ldr	r2, [pc, #508]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01a      	beq.n	8002b2a <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d012      	beq.n	8002b24 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7c      	ldr	r2, [pc, #496]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00a      	beq.n	8002b1e <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7a      	ldr	r2, [pc, #488]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d102      	bne.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 8002b12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b16:	e01e      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b1c:	e01b      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b22:	e018      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b28:	e015      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b2e:	e012      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b34:	e00f      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b3a:	e00c      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b40:	e009      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b46:	e006      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e004      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e002      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b50:	2320      	movs	r3, #32
 8002b52:	e000      	b.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002b54:	2320      	movs	r3, #32
 8002b56:	4a5c      	ldr	r2, [pc, #368]	; (8002cc8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8002b58:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d960      	bls.n	8002c28 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d057      	beq.n	8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d050      	beq.n	8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d049      	beq.n	8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a53      	ldr	r2, [pc, #332]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d042      	beq.n	8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d03a      	beq.n	8002c0e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d032      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a4f      	ldr	r2, [pc, #316]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02a      	beq.n	8002c02 <HAL_DMAEx_MultiBufferStart_IT+0x496>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x490>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01a      	beq.n	8002bf6 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d012      	beq.n	8002bf0 <HAL_DMAEx_MultiBufferStart_IT+0x484>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00a      	beq.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d102      	bne.n	8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8002bde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002be2:	e01e      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002be4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002be8:	e01b      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bee:	e018      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bf4:	e015      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bfa:	e012      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c00:	e00f      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c06:	e00c      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	e009      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c12:	e006      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c14:	2310      	movs	r3, #16
 8002c16:	e004      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c18:	2310      	movs	r3, #16
 8002c1a:	e002      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	e000      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002c20:	2310      	movs	r3, #16
 8002c22:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002c24:	60d3      	str	r3, [r2, #12]
 8002c26:	e14f      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f240 8082 	bls.w	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d078      	beq.n	8002d32 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d071      	beq.n	8002d2e <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d06a      	beq.n	8002d2a <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d063      	beq.n	8002d26 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d05b      	beq.n	8002d20 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d053      	beq.n	8002d1a <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04b      	beq.n	8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d043      	beq.n	8002d0e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d012      	beq.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00a      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d102      	bne.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 8002cae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cb2:	e03f      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cb8:	e03c      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cbe:	e039      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cc4:	e036      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002cc6:	bf00      	nop
 8002cc8:	40026000 	.word	0x40026000
 8002ccc:	40026010 	.word	0x40026010
 8002cd0:	40026410 	.word	0x40026410
 8002cd4:	40026070 	.word	0x40026070
 8002cd8:	40026470 	.word	0x40026470
 8002cdc:	40026028 	.word	0x40026028
 8002ce0:	40026428 	.word	0x40026428
 8002ce4:	40026088 	.word	0x40026088
 8002ce8:	40026488 	.word	0x40026488
 8002cec:	40026040 	.word	0x40026040
 8002cf0:	40026440 	.word	0x40026440
 8002cf4:	400260a0 	.word	0x400260a0
 8002cf8:	400264a0 	.word	0x400264a0
 8002cfc:	40026458 	.word	0x40026458
 8002d00:	40026400 	.word	0x40026400
 8002d04:	400260b8 	.word	0x400260b8
 8002d08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d0c:	e012      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d12:	e00f      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d18:	e00c      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1e:	e009      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d24:	e006      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d26:	2310      	movs	r3, #16
 8002d28:	e004      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	e002      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d2e:	2310      	movs	r3, #16
 8002d30:	e000      	b.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8002d32:	2310      	movs	r3, #16
 8002d34:	4a8c      	ldr	r2, [pc, #560]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 8002d36:	6093      	str	r3, [r2, #8]
 8002d38:	e0c6      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b8a      	ldr	r3, [pc, #552]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d960      	bls.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a89      	ldr	r2, [pc, #548]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d057      	beq.n	8002e00 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a87      	ldr	r2, [pc, #540]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d050      	beq.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a86      	ldr	r2, [pc, #536]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d049      	beq.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a84      	ldr	r2, [pc, #528]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d042      	beq.n	8002df4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a83      	ldr	r2, [pc, #524]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03a      	beq.n	8002dee <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a81      	ldr	r2, [pc, #516]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d032      	beq.n	8002de8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d02a      	beq.n	8002de2 <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a7e      	ldr	r2, [pc, #504]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d022      	beq.n	8002ddc <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7d      	ldr	r2, [pc, #500]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d01a      	beq.n	8002dd6 <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7b      	ldr	r2, [pc, #492]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d012      	beq.n	8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7a      	ldr	r2, [pc, #488]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00a      	beq.n	8002dca <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a78      	ldr	r2, [pc, #480]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d102      	bne.n	8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8002dbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dc2:	e01e      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002dc8:	e01b      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dce:	e018      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dd4:	e015      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dda:	e012      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de0:	e00f      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de6:	e00c      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dec:	e009      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df2:	e006      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002df4:	2310      	movs	r3, #16
 8002df6:	e004      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	e002      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	e000      	b.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8002e00:	2310      	movs	r3, #16
 8002e02:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002e04:	60d3      	str	r3, [r2, #12]
 8002e06:	e05f      	b.n	8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d057      	beq.n	8002ec2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d050      	beq.n	8002ebe <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a55      	ldr	r2, [pc, #340]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d049      	beq.n	8002eba <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a54      	ldr	r2, [pc, #336]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d042      	beq.n	8002eb6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d03a      	beq.n	8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d032      	beq.n	8002eaa <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02a      	beq.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01a      	beq.n	8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d012      	beq.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0x726>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a49      	ldr	r2, [pc, #292]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00a      	beq.n	8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x720>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d102      	bne.n	8002e86 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 8002e80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e84:	e01e      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e8a:	e01b      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e90:	e018      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e96:	e015      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e9c:	e012      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea2:	e00f      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea8:	e00c      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eae:	e009      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb4:	e006      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	e004      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	e002      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	e000      	b.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002ec6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f240 8082 	bls.w	8002fda <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d078      	beq.n	8002fd2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d071      	beq.n	8002fce <HAL_DMAEx_MultiBufferStart_IT+0x862>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d06a      	beq.n	8002fca <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d063      	beq.n	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d05b      	beq.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d053      	beq.n	8002fba <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04b      	beq.n	8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d043      	beq.n	8002fae <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d03b      	beq.n	8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d012      	beq.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00a      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d102      	bne.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 8002f4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f52:	e03f      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f58:	e03c      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f5e:	e039      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f64:	e036      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002f66:	bf00      	nop
 8002f68:	40026400 	.word	0x40026400
 8002f6c:	40026058 	.word	0x40026058
 8002f70:	40026010 	.word	0x40026010
 8002f74:	40026410 	.word	0x40026410
 8002f78:	40026070 	.word	0x40026070
 8002f7c:	40026470 	.word	0x40026470
 8002f80:	40026028 	.word	0x40026028
 8002f84:	40026428 	.word	0x40026428
 8002f88:	40026088 	.word	0x40026088
 8002f8c:	40026488 	.word	0x40026488
 8002f90:	40026040 	.word	0x40026040
 8002f94:	40026440 	.word	0x40026440
 8002f98:	400260a0 	.word	0x400260a0
 8002f9c:	400264a0 	.word	0x400264a0
 8002fa0:	40026000 	.word	0x40026000
 8002fa4:	40026458 	.word	0x40026458
 8002fa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fac:	e012      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb2:	e00f      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb8:	e00c      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fbe:	e009      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc4:	e006      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	e004      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fca:	2308      	movs	r3, #8
 8002fcc:	e002      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	4a8c      	ldr	r2, [pc, #560]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8002fd6:	60d3      	str	r3, [r2, #12]
 8002fd8:	e14e      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b8a      	ldr	r3, [pc, #552]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d960      	bls.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a89      	ldr	r2, [pc, #548]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d057      	beq.n	80030a0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a87      	ldr	r2, [pc, #540]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d050      	beq.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a86      	ldr	r2, [pc, #536]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d049      	beq.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a84      	ldr	r2, [pc, #528]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d042      	beq.n	8003094 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a83      	ldr	r2, [pc, #524]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03a      	beq.n	800308e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a81      	ldr	r2, [pc, #516]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d032      	beq.n	8003088 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a80      	ldr	r2, [pc, #512]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d02a      	beq.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x916>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7e      	ldr	r2, [pc, #504]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7d      	ldr	r2, [pc, #500]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01a      	beq.n	8003076 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a7b      	ldr	r2, [pc, #492]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d012      	beq.n	8003070 <HAL_DMAEx_MultiBufferStart_IT+0x904>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00a      	beq.n	800306a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a78      	ldr	r2, [pc, #480]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d102      	bne.n	8003064 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 800305e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003062:	e01e      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	e01b      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800306a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800306e:	e018      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003074:	e015      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003076:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800307a:	e012      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800307c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003080:	e00f      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003086:	e00c      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800308c:	e009      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800308e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003092:	e006      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003094:	2308      	movs	r3, #8
 8003096:	e004      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003098:	2308      	movs	r3, #8
 800309a:	e002      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800309c:	2308      	movs	r3, #8
 800309e:	e000      	b.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80030a0:	2308      	movs	r3, #8
 80030a2:	4a59      	ldr	r2, [pc, #356]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	e0e7      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d960      	bls.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a55      	ldr	r2, [pc, #340]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d057      	beq.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a54      	ldr	r2, [pc, #336]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d050      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d049      	beq.n	8003166 <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a51      	ldr	r2, [pc, #324]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d042      	beq.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a4f      	ldr	r2, [pc, #316]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d03a      	beq.n	800315c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a4e      	ldr	r2, [pc, #312]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d032      	beq.n	8003156 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a4c      	ldr	r2, [pc, #304]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d02a      	beq.n	8003150 <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a4b      	ldr	r2, [pc, #300]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a49      	ldr	r2, [pc, #292]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01a      	beq.n	8003144 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a48      	ldr	r2, [pc, #288]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d012      	beq.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a46      	ldr	r2, [pc, #280]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00a      	beq.n	8003138 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a45      	ldr	r2, [pc, #276]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d102      	bne.n	8003132 <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 800312c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003130:	e01e      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003136:	e01b      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800313c:	e018      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800313e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003142:	e015      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003144:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003148:	e012      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800314a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800314e:	e00f      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003154:	e00c      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315a:	e009      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800315c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003160:	e006      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003162:	2308      	movs	r3, #8
 8003164:	e004      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003166:	2308      	movs	r3, #8
 8003168:	e002      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800316a:	2308      	movs	r3, #8
 800316c:	e000      	b.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800316e:	2308      	movs	r3, #8
 8003170:	4a34      	ldr	r2, [pc, #208]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003172:	60d3      	str	r3, [r2, #12]
 8003174:	e080      	b.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a25      	ldr	r2, [pc, #148]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d078      	beq.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d071      	beq.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d06a      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d063      	beq.n	8003266 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d05b      	beq.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d053      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d04b      	beq.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1a      	ldr	r2, [pc, #104]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d043      	beq.n	800324e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d012      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a16      	ldr	r2, [pc, #88]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00a      	beq.n	80031fa <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d102      	bne.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 80031ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031f2:	e03f      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f8:	e03c      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80031fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031fe:	e039      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003200:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003204:	e036      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003206:	bf00      	nop
 8003208:	40026400 	.word	0x40026400
 800320c:	400260b8 	.word	0x400260b8
 8003210:	40026010 	.word	0x40026010
 8003214:	40026410 	.word	0x40026410
 8003218:	40026070 	.word	0x40026070
 800321c:	40026470 	.word	0x40026470
 8003220:	40026028 	.word	0x40026028
 8003224:	40026428 	.word	0x40026428
 8003228:	40026088 	.word	0x40026088
 800322c:	40026488 	.word	0x40026488
 8003230:	40026040 	.word	0x40026040
 8003234:	40026440 	.word	0x40026440
 8003238:	400260a0 	.word	0x400260a0
 800323c:	400264a0 	.word	0x400264a0
 8003240:	40026058 	.word	0x40026058
 8003244:	40026000 	.word	0x40026000
 8003248:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800324c:	e012      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800324e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003252:	e00f      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003258:	e00c      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800325a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325e:	e009      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003264:	e006      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003266:	2308      	movs	r3, #8
 8003268:	e004      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800326a:	2308      	movs	r3, #8
 800326c:	e002      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800326e:	2308      	movs	r3, #8
 8003270:	e000      	b.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8003272:	2308      	movs	r3, #8
 8003274:	4a8a      	ldr	r2, [pc, #552]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8003276:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d960      	bls.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a87      	ldr	r2, [pc, #540]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d057      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a86      	ldr	r2, [pc, #536]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d050      	beq.n	800333a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a84      	ldr	r2, [pc, #528]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d049      	beq.n	8003336 <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d042      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a81      	ldr	r2, [pc, #516]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d03a      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a80      	ldr	r2, [pc, #512]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d032      	beq.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7e      	ldr	r2, [pc, #504]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02a      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7d      	ldr	r2, [pc, #500]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a7b      	ldr	r2, [pc, #492]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01a      	beq.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7a      	ldr	r2, [pc, #488]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d012      	beq.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a78      	ldr	r2, [pc, #480]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00a      	beq.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a77      	ldr	r2, [pc, #476]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 80032fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003300:	e01e      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003306:	e01b      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800330c:	e018      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800330e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003312:	e015      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003318:	e012      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800331a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331e:	e00f      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003324:	e00c      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332a:	e009      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800332c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003330:	e006      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003332:	2304      	movs	r3, #4
 8003334:	e004      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003336:	2304      	movs	r3, #4
 8003338:	e002      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800333a:	2304      	movs	r3, #4
 800333c:	e000      	b.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800333e:	2304      	movs	r3, #4
 8003340:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003342:	60d3      	str	r3, [r2, #12]
 8003344:	e150      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800334e:	429a      	cmp	r2, r3
 8003350:	d960      	bls.n	8003414 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a54      	ldr	r2, [pc, #336]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d057      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d050      	beq.n	8003408 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a51      	ldr	r2, [pc, #324]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d049      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a4f      	ldr	r2, [pc, #316]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d042      	beq.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4e      	ldr	r2, [pc, #312]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d03a      	beq.n	80033fa <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4c      	ldr	r2, [pc, #304]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d032      	beq.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4b      	ldr	r2, [pc, #300]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d02a      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a49      	ldr	r2, [pc, #292]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d022      	beq.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a48      	ldr	r2, [pc, #288]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01a      	beq.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a46      	ldr	r2, [pc, #280]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d012      	beq.n	80033dc <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a45      	ldr	r2, [pc, #276]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00a      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a43      	ldr	r2, [pc, #268]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d102      	bne.n	80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 80033ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033ce:	e01e      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d4:	e01b      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033da:	e018      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033e0:	e015      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033e6:	e012      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ec:	e00f      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f2:	e00c      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f8:	e009      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80033fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033fe:	e006      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003400:	2304      	movs	r3, #4
 8003402:	e004      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003404:	2304      	movs	r3, #4
 8003406:	e002      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8003408:	2304      	movs	r3, #4
 800340a:	e000      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800340c:	2304      	movs	r3, #4
 800340e:	4a32      	ldr	r2, [pc, #200]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003410:	6093      	str	r3, [r2, #8]
 8003412:	e0e9      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800341c:	429a      	cmp	r2, r3
 800341e:	f240 8083 	bls.w	8003528 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d079      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d072      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d06b      	beq.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d064      	beq.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d05c      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d054      	beq.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04c      	beq.n	8003502 <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d044      	beq.n	80034fc <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03c      	beq.n	80034f6 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d034      	beq.n	80034f0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d02c      	beq.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d124      	bne.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800349a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800349e:	e040      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034a0:	40026000 	.word	0x40026000
 80034a4:	40026458 	.word	0x40026458
 80034a8:	40026010 	.word	0x40026010
 80034ac:	40026410 	.word	0x40026410
 80034b0:	40026070 	.word	0x40026070
 80034b4:	40026470 	.word	0x40026470
 80034b8:	40026028 	.word	0x40026028
 80034bc:	40026428 	.word	0x40026428
 80034c0:	40026088 	.word	0x40026088
 80034c4:	40026488 	.word	0x40026488
 80034c8:	40026040 	.word	0x40026040
 80034cc:	40026440 	.word	0x40026440
 80034d0:	400260a0 	.word	0x400260a0
 80034d4:	400264a0 	.word	0x400264a0
 80034d8:	40026400 	.word	0x40026400
 80034dc:	400260b8 	.word	0x400260b8
 80034e0:	40026058 	.word	0x40026058
 80034e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e8:	e01b      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034ee:	e018      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034f4:	e015      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034fa:	e012      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80034fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003500:	e00f      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003506:	e00c      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800350c:	e009      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800350e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003512:	e006      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003514:	2304      	movs	r3, #4
 8003516:	e004      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003518:	2304      	movs	r3, #4
 800351a:	e002      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800351c:	2304      	movs	r3, #4
 800351e:	e000      	b.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8003520:	2304      	movs	r3, #4
 8003522:	4a8b      	ldr	r2, [pc, #556]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8003524:	60d3      	str	r3, [r2, #12]
 8003526:	e05f      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a89      	ldr	r2, [pc, #548]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d057      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a88      	ldr	r2, [pc, #544]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d050      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a86      	ldr	r2, [pc, #536]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d049      	beq.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a85      	ldr	r2, [pc, #532]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d042      	beq.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a83      	ldr	r2, [pc, #524]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d03a      	beq.n	80035d0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a82      	ldr	r2, [pc, #520]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d032      	beq.n	80035ca <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02a      	beq.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7f      	ldr	r2, [pc, #508]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01a      	beq.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d012      	beq.n	80035b2 <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7a      	ldr	r2, [pc, #488]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00a      	beq.n	80035ac <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a79      	ldr	r2, [pc, #484]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d102      	bne.n	80035a6 <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 80035a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035a4:	e01e      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035aa:	e01b      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035b0:	e018      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035b6:	e015      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035bc:	e012      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c2:	e00f      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c8:	e00c      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ce:	e009      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d4:	e006      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e004      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035da:	2304      	movs	r3, #4
 80035dc:	e002      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035de:	2304      	movs	r3, #4
 80035e0:	e000      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 80035e2:	2304      	movs	r3, #4
 80035e4:	4a5a      	ldr	r2, [pc, #360]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 80035e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b65      	ldr	r3, [pc, #404]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d95c      	bls.n	80036ae <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a56      	ldr	r2, [pc, #344]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d053      	beq.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a55      	ldr	r2, [pc, #340]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04c      	beq.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a53      	ldr	r2, [pc, #332]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d045      	beq.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03e      	beq.n	800369a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a50      	ldr	r2, [pc, #320]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d037      	beq.n	8003696 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4f      	ldr	r2, [pc, #316]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d030      	beq.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4d      	ldr	r2, [pc, #308]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d029      	beq.n	800368e <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4c      	ldr	r2, [pc, #304]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a4a      	ldr	r2, [pc, #296]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01a      	beq.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a49      	ldr	r2, [pc, #292]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d012      	beq.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a47      	ldr	r2, [pc, #284]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00a      	beq.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a46      	ldr	r2, [pc, #280]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d102      	bne.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 800366c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003670:	e01a      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003676:	e017      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800367c:	e014      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800367e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003682:	e011      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003688:	e00e      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	e00c      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	e00a      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003692:	2340      	movs	r3, #64	; 0x40
 8003694:	e008      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003696:	2340      	movs	r3, #64	; 0x40
 8003698:	e006      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800369a:	2301      	movs	r3, #1
 800369c:	e004      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800369e:	2301      	movs	r3, #1
 80036a0:	e002      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80036a6:	2301      	movs	r3, #1
 80036a8:	4a37      	ldr	r2, [pc, #220]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80036aa:	60d3      	str	r3, [r2, #12]
 80036ac:	e141      	b.n	8003932 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d97c      	bls.n	80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d073      	beq.n	80037ac <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a23      	ldr	r2, [pc, #140]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d06c      	beq.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d065      	beq.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d05e      	beq.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d057      	beq.n	800379c <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d050      	beq.n	8003798 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d049      	beq.n	8003794 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d042      	beq.n	8003790 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d01a      	beq.n	800374a <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d012      	beq.n	8003744 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00a      	beq.n	800373e <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d102      	bne.n	8003738 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 8003732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003736:	e03a      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800373c:	e037      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800373e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003742:	e034      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003748:	e031      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800374a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800374e:	e02e      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003750:	40026000 	.word	0x40026000
 8003754:	40026010 	.word	0x40026010
 8003758:	40026410 	.word	0x40026410
 800375c:	40026070 	.word	0x40026070
 8003760:	40026470 	.word	0x40026470
 8003764:	40026028 	.word	0x40026028
 8003768:	40026428 	.word	0x40026428
 800376c:	40026088 	.word	0x40026088
 8003770:	40026488 	.word	0x40026488
 8003774:	40026040 	.word	0x40026040
 8003778:	40026440 	.word	0x40026440
 800377c:	400260a0 	.word	0x400260a0
 8003780:	400264a0 	.word	0x400264a0
 8003784:	40026458 	.word	0x40026458
 8003788:	40026400 	.word	0x40026400
 800378c:	400260b8 	.word	0x400260b8
 8003790:	2340      	movs	r3, #64	; 0x40
 8003792:	e00c      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003794:	2340      	movs	r3, #64	; 0x40
 8003796:	e00a      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8003798:	2340      	movs	r3, #64	; 0x40
 800379a:	e008      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800379c:	2340      	movs	r3, #64	; 0x40
 800379e:	e006      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e004      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e002      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80037ac:	2301      	movs	r3, #1
 80037ae:	4a7b      	ldr	r2, [pc, #492]	; (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 80037b0:	6093      	str	r3, [r2, #8]
 80037b2:	e0be      	b.n	8003932 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d95c      	bls.n	800387a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a77      	ldr	r2, [pc, #476]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d053      	beq.n	8003872 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a76      	ldr	r2, [pc, #472]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04c      	beq.n	800386e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a74      	ldr	r2, [pc, #464]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d045      	beq.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a73      	ldr	r2, [pc, #460]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d03e      	beq.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a71      	ldr	r2, [pc, #452]	; (80039b4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d037      	beq.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a70      	ldr	r2, [pc, #448]	; (80039b8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d030      	beq.n	800385e <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6e      	ldr	r2, [pc, #440]	; (80039bc <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d029      	beq.n	800385a <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6d      	ldr	r2, [pc, #436]	; (80039c0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6b      	ldr	r2, [pc, #428]	; (80039c4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01a      	beq.n	8003850 <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d012      	beq.n	800384a <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	; (80039cc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00a      	beq.n	8003844 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 8003838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383c:	e01a      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800383e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003842:	e017      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003848:	e014      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800384a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800384e:	e011      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003854:	e00e      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003856:	2340      	movs	r3, #64	; 0x40
 8003858:	e00c      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800385a:	2340      	movs	r3, #64	; 0x40
 800385c:	e00a      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	e008      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003862:	2340      	movs	r3, #64	; 0x40
 8003864:	e006      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003866:	2301      	movs	r3, #1
 8003868:	e004      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800386a:	2301      	movs	r3, #1
 800386c:	e002      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003872:	2301      	movs	r3, #1
 8003874:	4a57      	ldr	r2, [pc, #348]	; (80039d4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003876:	60d3      	str	r3, [r2, #12]
 8003878:	e05b      	b.n	8003932 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a49      	ldr	r2, [pc, #292]	; (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d053      	beq.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a47      	ldr	r2, [pc, #284]	; (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d04c      	beq.n	8003928 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a46      	ldr	r2, [pc, #280]	; (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d045      	beq.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a44      	ldr	r2, [pc, #272]	; (80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03e      	beq.n	8003920 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a43      	ldr	r2, [pc, #268]	; (80039b4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d037      	beq.n	800391c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a41      	ldr	r2, [pc, #260]	; (80039b8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d030      	beq.n	8003918 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a40      	ldr	r2, [pc, #256]	; (80039bc <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d029      	beq.n	8003914 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3e      	ldr	r2, [pc, #248]	; (80039c0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3d      	ldr	r2, [pc, #244]	; (80039c4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01a      	beq.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d012      	beq.n	8003904 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00a      	beq.n	80038fe <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a38      	ldr	r2, [pc, #224]	; (80039d0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d102      	bne.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 80038f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f6:	e01a      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038fc:	e017      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80038fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003902:	e014      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003908:	e011      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800390a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800390e:	e00e      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003910:	2340      	movs	r3, #64	; 0x40
 8003912:	e00c      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003914:	2340      	movs	r3, #64	; 0x40
 8003916:	e00a      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003918:	2340      	movs	r3, #64	; 0x40
 800391a:	e008      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800391c:	2340      	movs	r3, #64	; 0x40
 800391e:	e006      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003920:	2301      	movs	r3, #1
 8003922:	e004      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003924:	2301      	movs	r3, #1
 8003926:	e002      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800392c:	2301      	movs	r3, #1
 800392e:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003930:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0216 	orr.w	r2, r2, #22
 8003940:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003950:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0208 	orr.w	r2, r2, #8
 8003970:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e005      	b.n	8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003990:	7dfb      	ldrb	r3, [r7, #23]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40026400 	.word	0x40026400
 80039a0:	40026058 	.word	0x40026058
 80039a4:	40026010 	.word	0x40026010
 80039a8:	40026410 	.word	0x40026410
 80039ac:	40026070 	.word	0x40026070
 80039b0:	40026470 	.word	0x40026470
 80039b4:	40026028 	.word	0x40026028
 80039b8:	40026428 	.word	0x40026428
 80039bc:	40026088 	.word	0x40026088
 80039c0:	40026488 	.word	0x40026488
 80039c4:	40026040 	.word	0x40026040
 80039c8:	40026440 	.word	0x40026440
 80039cc:	400260a0 	.word	0x400260a0
 80039d0:	400264a0 	.word	0x400264a0
 80039d4:	40026000 	.word	0x40026000

080039d8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	e003      	b.n	80039fe <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d108      	bne.n	8003a3c <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a3a:	e007      	b.n	8003a4c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06a      	b.n	8003b40 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2223      	movs	r2, #35	; 0x23
 8003a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fc fef9 	bl	8000874 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_ETH_Init+0xf0>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <HAL_ETH_Init+0xf0>)
 8003a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_ETH_Init+0xf0>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <HAL_ETH_Init+0xf4>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_ETH_Init+0xf4>)
 8003aa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aa4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003aa6:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <HAL_ETH_Init+0xf4>)
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4927      	ldr	r1, [pc, #156]	; (8003b4c <HAL_ETH_Init+0xf4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_ETH_Init+0xf4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ace:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd fe34 	bl	800173c <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ad6:	e011      	b.n	8003afc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ad8:	f7fd fe30 	bl	800173c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ae6:	d909      	bls.n	8003afc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	22e0      	movs	r2, #224	; 0xe0
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e021      	b.n	8003b40 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e4      	bne.n	8003ad8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f958 	bl	8003dc4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f9ff 	bl	8003f18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa55 	bl	8003fca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	461a      	mov	r2, r3
 8003b26:	2100      	movs	r1, #0
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f9bd 	bl	8003ea8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40013800 	.word	0x40013800

08003b50 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4b51      	ldr	r3, [pc, #324]	; (8003cac <ETH_SetMACConfig+0x15c>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	7c1b      	ldrb	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <ETH_SetMACConfig+0x28>
 8003b72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b76:	e000      	b.n	8003b7a <ETH_SetMACConfig+0x2a>
 8003b78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	7c5b      	ldrb	r3, [r3, #17]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <ETH_SetMACConfig+0x38>
 8003b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b86:	e000      	b.n	8003b8a <ETH_SetMACConfig+0x3a>
 8003b88:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b8a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	7fdb      	ldrb	r3, [r3, #31]
 8003b96:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b98:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	7f92      	ldrb	r2, [r2, #30]
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d102      	bne.n	8003bae <ETH_SetMACConfig+0x5e>
 8003ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bac:	e000      	b.n	8003bb0 <ETH_SetMACConfig+0x60>
 8003bae:	2200      	movs	r2, #0
                        macconf->Speed |
 8003bb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	7f1b      	ldrb	r3, [r3, #28]
 8003bb6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003bb8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003bbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	791b      	ldrb	r3, [r3, #4]
 8003bc4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003bc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003bce:	2a00      	cmp	r2, #0
 8003bd0:	d102      	bne.n	8003bd8 <ETH_SetMACConfig+0x88>
 8003bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd6:	e000      	b.n	8003bda <ETH_SetMACConfig+0x8a>
 8003bd8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	7bdb      	ldrb	r3, [r3, #15]
 8003be0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003be2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003be8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7fd fda2 	bl	8001754 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	d101      	bne.n	8003c3e <ETH_SetMACConfig+0xee>
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	e000      	b.n	8003c40 <ETH_SetMACConfig+0xf0>
 8003c3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c40:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c4e:	2a01      	cmp	r2, #1
 8003c50:	d101      	bne.n	8003c56 <ETH_SetMACConfig+0x106>
 8003c52:	2208      	movs	r2, #8
 8003c54:	e000      	b.n	8003c58 <ETH_SetMACConfig+0x108>
 8003c56:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c60:	2a01      	cmp	r2, #1
 8003c62:	d101      	bne.n	8003c68 <ETH_SetMACConfig+0x118>
 8003c64:	2204      	movs	r2, #4
 8003c66:	e000      	b.n	8003c6a <ETH_SetMACConfig+0x11a>
 8003c68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c72:	2a01      	cmp	r2, #1
 8003c74:	d101      	bne.n	8003c7a <ETH_SetMACConfig+0x12a>
 8003c76:	2202      	movs	r2, #2
 8003c78:	e000      	b.n	8003c7c <ETH_SetMACConfig+0x12c>
 8003c7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fd fd5d 	bl	8001754 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	619a      	str	r2, [r3, #24]
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	ff20810f 	.word	0xff20810f

08003cb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <ETH_SetDMAConfig+0x110>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	7b1b      	ldrb	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <ETH_SetDMAConfig+0x2c>
 8003cd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cda:	e000      	b.n	8003cde <ETH_SetDMAConfig+0x2e>
 8003cdc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7b5b      	ldrb	r3, [r3, #13]
 8003ce2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ce4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	7f52      	ldrb	r2, [r2, #29]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d102      	bne.n	8003cf4 <ETH_SetDMAConfig+0x44>
 8003cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cf2:	e000      	b.n	8003cf6 <ETH_SetDMAConfig+0x46>
 8003cf4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cf6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	7b9b      	ldrb	r3, [r3, #14]
 8003cfc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cfe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003d04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	7f1b      	ldrb	r3, [r3, #28]
 8003d0a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003d0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	7f9b      	ldrb	r3, [r3, #30]
 8003d12:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003d14:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d22:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d24:	4313      	orrs	r3, r2
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f7fd fd04 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d54:	461a      	mov	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	791b      	ldrb	r3, [r3, #4]
 8003d5e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d64:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d6a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d70:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d78:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d7a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d82:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d88:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d96:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003da4:	2001      	movs	r0, #1
 8003da6:	f7fd fcd5 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	f8de3f23 	.word	0xf8de3f23

08003dc4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b0a6      	sub	sp, #152	; 0x98
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e00:	2300      	movs	r3, #0
 8003e02:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fe86 	bl	8003b50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e78:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff08 	bl	8003cb0 <ETH_SetDMAConfig>
}
 8003ea0:	bf00      	nop
 8003ea2:	3798      	adds	r7, #152	; 0x98
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3305      	adds	r3, #5
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	3204      	adds	r2, #4
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <ETH_MACAddressConfig+0x68>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3303      	adds	r3, #3
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	061a      	lsls	r2, r3, #24
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3302      	adds	r3, #2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	4313      	orrs	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <ETH_MACAddressConfig+0x6c>)
 8003efa:	4413      	add	r3, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	6013      	str	r3, [r2, #0]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40028040 	.word	0x40028040
 8003f14:	40028044 	.word	0x40028044

08003f18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e03e      	b.n	8003fa4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68d9      	ldr	r1, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	3206      	adds	r2, #6
 8003f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d80c      	bhi.n	8003f88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	440b      	add	r3, r1
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e004      	b.n	8003f92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d9bd      	bls.n	8003f26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	611a      	str	r2, [r3, #16]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e046      	b.n	8004066 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6919      	ldr	r1, [r3, #16]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004014:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800401c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	3212      	adds	r2, #18
 8004032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d80c      	bhi.n	8004056 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6919      	ldr	r1, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	440b      	add	r3, r1
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	60da      	str	r2, [r3, #12]
 8004054:	e004      	b.n	8004060 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d9b5      	bls.n	8003fd8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004096:	60da      	str	r2, [r3, #12]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	e175      	b.n	80043b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80040c4:	2201      	movs	r2, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	f040 8164 	bne.w	80043aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d005      	beq.n	80040fa <HAL_GPIO_Init+0x56>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d130      	bne.n	800415c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004130:	2201      	movs	r2, #1
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 0201 	and.w	r2, r3, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b03      	cmp	r3, #3
 8004166:	d017      	beq.n	8004198 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4313      	orrs	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d123      	bne.n	80041ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	08da      	lsrs	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3208      	adds	r2, #8
 80041ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	220f      	movs	r2, #15
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	08da      	lsrs	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	69b9      	ldr	r1, [r7, #24]
 80041e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2203      	movs	r2, #3
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0203 	and.w	r2, r3, #3
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80be 	beq.w	80043aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <HAL_GPIO_Init+0x324>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a65      	ldr	r2, [pc, #404]	; (80043c8 <HAL_GPIO_Init+0x324>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_GPIO_Init+0x324>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004246:	4a61      	ldr	r2, [pc, #388]	; (80043cc <HAL_GPIO_Init+0x328>)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	220f      	movs	r2, #15
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_GPIO_Init+0x32c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d037      	beq.n	80042e2 <HAL_GPIO_Init+0x23e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d031      	beq.n	80042de <HAL_GPIO_Init+0x23a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a56      	ldr	r2, [pc, #344]	; (80043d8 <HAL_GPIO_Init+0x334>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02b      	beq.n	80042da <HAL_GPIO_Init+0x236>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a55      	ldr	r2, [pc, #340]	; (80043dc <HAL_GPIO_Init+0x338>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d025      	beq.n	80042d6 <HAL_GPIO_Init+0x232>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a54      	ldr	r2, [pc, #336]	; (80043e0 <HAL_GPIO_Init+0x33c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01f      	beq.n	80042d2 <HAL_GPIO_Init+0x22e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a53      	ldr	r2, [pc, #332]	; (80043e4 <HAL_GPIO_Init+0x340>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d019      	beq.n	80042ce <HAL_GPIO_Init+0x22a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a52      	ldr	r2, [pc, #328]	; (80043e8 <HAL_GPIO_Init+0x344>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_GPIO_Init+0x226>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a51      	ldr	r2, [pc, #324]	; (80043ec <HAL_GPIO_Init+0x348>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00d      	beq.n	80042c6 <HAL_GPIO_Init+0x222>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a50      	ldr	r2, [pc, #320]	; (80043f0 <HAL_GPIO_Init+0x34c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <HAL_GPIO_Init+0x21e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4f      	ldr	r2, [pc, #316]	; (80043f4 <HAL_GPIO_Init+0x350>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_GPIO_Init+0x21a>
 80042ba:	2309      	movs	r3, #9
 80042bc:	e012      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042be:	230a      	movs	r3, #10
 80042c0:	e010      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042c2:	2308      	movs	r3, #8
 80042c4:	e00e      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042c6:	2307      	movs	r3, #7
 80042c8:	e00c      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042ca:	2306      	movs	r3, #6
 80042cc:	e00a      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042ce:	2305      	movs	r3, #5
 80042d0:	e008      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e006      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042d6:	2303      	movs	r3, #3
 80042d8:	e004      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042da:	2302      	movs	r3, #2
 80042dc:	e002      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_GPIO_Init+0x240>
 80042e2:	2300      	movs	r3, #0
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f002 0203 	and.w	r2, r2, #3
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	4093      	lsls	r3, r2
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042f4:	4935      	ldr	r1, [pc, #212]	; (80043cc <HAL_GPIO_Init+0x328>)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_GPIO_Init+0x354>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004326:	4a34      	ldr	r2, [pc, #208]	; (80043f8 <HAL_GPIO_Init+0x354>)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800432c:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_GPIO_Init+0x354>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004350:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <HAL_GPIO_Init+0x354>)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004356:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <HAL_GPIO_Init+0x354>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_GPIO_Init+0x354>)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_GPIO_Init+0x354>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <HAL_GPIO_Init+0x354>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	f67f ae86 	bls.w	80040c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40013800 	.word	0x40013800
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40020400 	.word	0x40020400
 80043d8:	40020800 	.word	0x40020800
 80043dc:	40020c00 	.word	0x40020c00
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40021400 	.word	0x40021400
 80043e8:	40021800 	.word	0x40021800
 80043ec:	40021c00 	.word	0x40021c00
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40022400 	.word	0x40022400
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fbcc 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004480:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004490:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d107      	bne.n	80044aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	e006      	b.n	80044b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d104      	bne.n	80044ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <HAL_I2C_Init+0x11c>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	02008000 	.word	0x02008000

08004550 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	461a      	mov	r2, r3
 800455c:	460b      	mov	r3, r1
 800455e:	817b      	strh	r3, [r7, #10]
 8004560:	4613      	mov	r3, r2
 8004562:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	f040 80da 	bne.w	8004726 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_I2C_Master_Transmit+0x30>
 800457c:	2302      	movs	r3, #2
 800457e:	e0d3      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1d8>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004588:	f7fd f8d8 	bl	800173c <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2319      	movs	r3, #25
 8004594:	2201      	movs	r2, #1
 8004596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fb4e 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0be      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2221      	movs	r2, #33	; 0x21
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2210      	movs	r2, #16
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	893a      	ldrh	r2, [r7, #8]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2bff      	cmp	r3, #255	; 0xff
 80045da:	d90e      	bls.n	80045fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	8979      	ldrh	r1, [r7, #10]
 80045ea:	4b51      	ldr	r3, [pc, #324]	; (8004730 <HAL_I2C_Master_Transmit+0x1e0>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fd38 	bl	8005068 <I2C_TransferConfig>
 80045f8:	e06c      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	b2da      	uxtb	r2, r3
 800460a:	8979      	ldrh	r1, [r7, #10]
 800460c:	4b48      	ldr	r3, [pc, #288]	; (8004730 <HAL_I2C_Master_Transmit+0x1e0>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fd27 	bl	8005068 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800461a:	e05b      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	6a39      	ldr	r1, [r7, #32]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb4b 	bl	8004cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e07b      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d034      	beq.n	80046d4 <HAL_I2C_Master_Transmit+0x184>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d130      	bne.n	80046d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fadd 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e04d      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2bff      	cmp	r3, #255	; 0xff
 8004694:	d90e      	bls.n	80046b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	8979      	ldrh	r1, [r7, #10]
 80046a4:	2300      	movs	r3, #0
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fcdb 	bl	8005068 <I2C_TransferConfig>
 80046b2:	e00f      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	8979      	ldrh	r1, [r7, #10]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fcca 	bl	8005068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d19e      	bne.n	800461c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6a39      	ldr	r1, [r7, #32]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fb2a 	bl	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e01a      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2220      	movs	r2, #32
 80046f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_I2C_Master_Transmit+0x1e4>)
 8004706:	400b      	ands	r3, r1
 8004708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	80002000 	.word	0x80002000
 8004734:	fe00e800 	.word	0xfe00e800

08004738 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	461a      	mov	r2, r3
 8004744:	460b      	mov	r3, r1
 8004746:	817b      	strh	r3, [r7, #10]
 8004748:	4613      	mov	r3, r2
 800474a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b20      	cmp	r3, #32
 8004756:	f040 80db 	bne.w	8004910 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_I2C_Master_Receive+0x30>
 8004764:	2302      	movs	r3, #2
 8004766:	e0d4      	b.n	8004912 <HAL_I2C_Master_Receive+0x1da>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004770:	f7fc ffe4 	bl	800173c <HAL_GetTick>
 8004774:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2319      	movs	r3, #25
 800477c:	2201      	movs	r2, #1
 800477e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa5a 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e0bf      	b.n	8004912 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2222      	movs	r2, #34	; 0x22
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2210      	movs	r2, #16
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	893a      	ldrh	r2, [r7, #8]
 80047b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2bff      	cmp	r3, #255	; 0xff
 80047c2:	d90e      	bls.n	80047e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	22ff      	movs	r2, #255	; 0xff
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	8979      	ldrh	r1, [r7, #10]
 80047d2:	4b52      	ldr	r3, [pc, #328]	; (800491c <HAL_I2C_Master_Receive+0x1e4>)
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fc44 	bl	8005068 <I2C_TransferConfig>
 80047e0:	e06d      	b.n	80048be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8979      	ldrh	r1, [r7, #10]
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <HAL_I2C_Master_Receive+0x1e4>)
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fc33 	bl	8005068 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004802:	e05c      	b.n	80048be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	6a39      	ldr	r1, [r7, #32]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fad3 	bl	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e07c      	b.n	8004912 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d034      	beq.n	80048be <HAL_I2C_Master_Receive+0x186>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	2b00      	cmp	r3, #0
 800485a:	d130      	bne.n	80048be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2200      	movs	r2, #0
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f9e8 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e04d      	b.n	8004912 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2bff      	cmp	r3, #255	; 0xff
 800487e:	d90e      	bls.n	800489e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488a:	b2da      	uxtb	r2, r3
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fbe6 	bl	8005068 <I2C_TransferConfig>
 800489c:	e00f      	b.n	80048be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fbd5 	bl	8005068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d19d      	bne.n	8004804 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	6a39      	ldr	r1, [r7, #32]
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fa35 	bl	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e01a      	b.n	8004912 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2220      	movs	r2, #32
 80048e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_I2C_Master_Receive+0x1e8>)
 80048f0:	400b      	ands	r3, r1
 80048f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	80002400 	.word	0x80002400
 8004920:	fe00e800 	.word	0xfe00e800

08004924 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b20      	cmp	r3, #32
 8004948:	f040 80f9 	bne.w	8004b3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_I2C_Mem_Write+0x34>
 8004952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0ed      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_I2C_Mem_Write+0x4e>
 800496e:	2302      	movs	r3, #2
 8004970:	e0e6      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800497a:	f7fc fedf 	bl	800173c <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2319      	movs	r3, #25
 8004986:	2201      	movs	r2, #1
 8004988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f955 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0d1      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2221      	movs	r2, #33	; 0x21
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2240      	movs	r2, #64	; 0x40
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a3a      	ldr	r2, [r7, #32]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c4:	88f8      	ldrh	r0, [r7, #6]
 80049c6:	893a      	ldrh	r2, [r7, #8]
 80049c8:	8979      	ldrh	r1, [r7, #10]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4603      	mov	r3, r0
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f8b9 	bl	8004b4c <I2C_RequestMemoryWrite>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0a9      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2bff      	cmp	r3, #255	; 0xff
 80049f4:	d90e      	bls.n	8004a14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	8979      	ldrh	r1, [r7, #10]
 8004a04:	2300      	movs	r3, #0
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fb2b 	bl	8005068 <I2C_TransferConfig>
 8004a12:	e00f      	b.n	8004a34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	8979      	ldrh	r1, [r7, #10]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fb1a 	bl	8005068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f93f 	bl	8004cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e07b      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d034      	beq.n	8004aec <HAL_I2C_Mem_Write+0x1c8>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d130      	bne.n	8004aec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	2200      	movs	r2, #0
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f8d1 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e04d      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2bff      	cmp	r3, #255	; 0xff
 8004aac:	d90e      	bls.n	8004acc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	8979      	ldrh	r1, [r7, #10]
 8004abc:	2300      	movs	r3, #0
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 facf 	bl	8005068 <I2C_TransferConfig>
 8004aca:	e00f      	b.n	8004aec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	8979      	ldrh	r1, [r7, #10]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fabe 	bl	8005068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d19e      	bne.n	8004a34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f91e 	bl	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e01a      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_I2C_Mem_Write+0x224>)
 8004b1e:	400b      	ands	r3, r1
 8004b20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
  }
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	fe00e800 	.word	0xfe00e800

08004b4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	817b      	strh	r3, [r7, #10]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	813b      	strh	r3, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	8979      	ldrh	r1, [r7, #10]
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <I2C_RequestMemoryWrite+0xa4>)
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fa77 	bl	8005068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	69b9      	ldr	r1, [r7, #24]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f89c 	bl	8004cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e02c      	b.n	8004be8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b9e:	e015      	b.n	8004bcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba0:	893b      	ldrh	r3, [r7, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f882 	bl	8004cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e012      	b.n	8004be8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc2:	893b      	ldrh	r3, [r7, #8]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2180      	movs	r1, #128	; 0x80
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f830 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	80002000 	.word	0x80002000

08004bf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d103      	bne.n	8004c12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d007      	beq.n	8004c30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	619a      	str	r2, [r3, #24]
  }
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4c:	e022      	b.n	8004c94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d01e      	beq.n	8004c94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fc fd71 	bl	800173c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d113      	bne.n	8004c94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e00f      	b.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d0cd      	beq.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cc8:	e02c      	b.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f8ea 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e02a      	b.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d01e      	beq.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fc fd29 	bl	800173c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e007      	b.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d1cb      	bne.n	8004cca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d48:	e028      	b.n	8004d9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f8aa 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e026      	b.n	8004dac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7fc fced 	bl	800173c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d113      	bne.n	8004d9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e007      	b.n	8004dac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d1cf      	bne.n	8004d4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc0:	e064      	b.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f86e 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e062      	b.n	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d138      	bne.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d105      	bne.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e04e      	b.n	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d107      	bne.n	8004e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2210      	movs	r2, #16
 8004e12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2204      	movs	r2, #4
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
 8004e1a:	e002      	b.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2220      	movs	r2, #32
 8004e28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004e36:	400b      	ands	r3, r1
 8004e38:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e022      	b.n	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fc fc71 	bl	800173c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e007      	b.n	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d193      	bne.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	fe00e800 	.word	0xfe00e800

08004ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d068      	beq.n	8004fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004edc:	e049      	b.n	8004f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d045      	beq.n	8004f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fc fc29 	bl	800173c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_IsErrorOccurred+0x54>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d13a      	bne.n	8004f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1e:	d121      	bne.n	8004f64 <I2C_IsErrorOccurred+0xbc>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f26:	d01d      	beq.n	8004f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d01a      	beq.n	8004f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f3e:	f7fc fbfd 	bl	800173c <HAL_GetTick>
 8004f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f44:	e00e      	b.n	8004f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f46:	f7fc fbf9 	bl	800173c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b19      	cmp	r3, #25
 8004f52:	d907      	bls.n	8004f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	f043 0320 	orr.w	r3, r3, #32
 8004f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f62:	e006      	b.n	8004f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d1e9      	bne.n	8004f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d003      	beq.n	8004f88 <I2C_IsErrorOccurred+0xe0>
 8004f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0aa      	beq.n	8004ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2220      	movs	r2, #32
 8004f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01c      	beq.n	8005056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff fde9 	bl	8004bf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <I2C_IsErrorOccurred+0x1bc>)
 800502e:	400b      	ands	r3, r1
 8005030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	fe00e800 	.word	0xfe00e800

08005068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	817b      	strh	r3, [r7, #10]
 8005076:	4613      	mov	r3, r2
 8005078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005080:	7a7b      	ldrb	r3, [r7, #9]
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	4313      	orrs	r3, r2
 8005092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	0d5b      	lsrs	r3, r3, #21
 80050a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <I2C_TransferConfig+0x60>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	43db      	mvns	r3, r3
 80050ac:	ea02 0103 	and.w	r1, r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	03ff63ff 	.word	0x03ff63ff

080050cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d138      	bne.n	8005154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e032      	b.n	8005156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800511e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6819      	ldr	r1, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b20      	cmp	r3, #32
 8005176:	d139      	bne.n	80051ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005182:	2302      	movs	r3, #2
 8005184:	e033      	b.n	80051ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	; 0x24
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fc:	b08f      	sub	sp, #60	; 0x3c
 80051fe:	af0a      	add	r7, sp, #40	; 0x28
 8005200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e116      	b.n	800543a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fb fffa 	bl	8001220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2203      	movs	r2, #3
 8005230:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f002 fd0c 	bl	8007c68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	687e      	ldr	r6, [r7, #4]
 8005258:	466d      	mov	r5, sp
 800525a:	f106 0410 	add.w	r4, r6, #16
 800525e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800526a:	e885 0003 	stmia.w	r5, {r0, r1}
 800526e:	1d33      	adds	r3, r6, #4
 8005270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005272:	6838      	ldr	r0, [r7, #0]
 8005274:	f002 fca0 	bl	8007bb8 <USB_CoreInit>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0d7      	b.n	800543a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f002 fcfa 	bl	8007c8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	e04a      	b.n	8005332 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	333d      	adds	r3, #61	; 0x3d
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	333c      	adds	r3, #60	; 0x3c
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	b298      	uxth	r0, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3344      	adds	r3, #68	; 0x44
 80052d8:	4602      	mov	r2, r0
 80052da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3340      	adds	r3, #64	; 0x40
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	3348      	adds	r3, #72	; 0x48
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	334c      	adds	r3, #76	; 0x4c
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3354      	adds	r3, #84	; 0x54
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	3301      	adds	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d3af      	bcc.n	800529c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e044      	b.n	80053cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005342:	7bfa      	ldrb	r2, [r7, #15]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800536a:	7bfa      	ldrb	r2, [r7, #15]
 800536c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	3301      	adds	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3b5      	bcc.n	8005342 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	687e      	ldr	r6, [r7, #4]
 80053de:	466d      	mov	r5, sp
 80053e0:	f106 0410 	add.w	r4, r6, #16
 80053e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80053f4:	1d33      	adds	r3, r6, #4
 80053f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053f8:	6838      	ldr	r0, [r7, #0]
 80053fa:	f002 fc93 	bl	8007d24 <USB_DevInit>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e014      	b.n	800543a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f80b 	bl	8005444 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f002 fe51 	bl	80080da <USB_DevDisconnect>

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_PCDEx_ActivateLPM+0x44>)
 8005474:	4313      	orrs	r3, r2
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	10000003 	.word	0x10000003

0800548c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40007000 	.word	0x40007000

080054ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	4b23      	ldr	r3, [pc, #140]	; (8005544 <HAL_PWREx_EnableOverDrive+0x98>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	4a22      	ldr	r2, [pc, #136]	; (8005544 <HAL_PWREx_EnableOverDrive+0x98>)
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6413      	str	r3, [r2, #64]	; 0x40
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <HAL_PWREx_EnableOverDrive+0x98>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054ce:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054da:	f7fc f92f 	bl	800173c <HAL_GetTick>
 80054de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054e0:	e009      	b.n	80054f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054e2:	f7fc f92b 	bl	800173c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f0:	d901      	bls.n	80054f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e022      	b.n	800553c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005502:	d1ee      	bne.n	80054e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005504:	4b10      	ldr	r3, [pc, #64]	; (8005548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a0f      	ldr	r2, [pc, #60]	; (8005548 <HAL_PWREx_EnableOverDrive+0x9c>)
 800550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005510:	f7fc f914 	bl	800173c <HAL_GetTick>
 8005514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005516:	e009      	b.n	800552c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005518:	f7fc f910 	bl	800173c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005526:	d901      	bls.n	800552c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e007      	b.n	800553c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_PWREx_EnableOverDrive+0x9c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005538:	d1ee      	bne.n	8005518 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40023800 	.word	0x40023800
 8005548:	40007000 	.word	0x40007000

0800554c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005554:	2300      	movs	r3, #0
 8005556:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e29b      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8087 	beq.w	800567e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005570:	4b96      	ldr	r3, [pc, #600]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b04      	cmp	r3, #4
 800557a:	d00c      	beq.n	8005596 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800557c:	4b93      	ldr	r3, [pc, #588]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b08      	cmp	r3, #8
 8005586:	d112      	bne.n	80055ae <HAL_RCC_OscConfig+0x62>
 8005588:	4b90      	ldr	r3, [pc, #576]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005594:	d10b      	bne.n	80055ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005596:	4b8d      	ldr	r3, [pc, #564]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d06c      	beq.n	800567c <HAL_RCC_OscConfig+0x130>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d168      	bne.n	800567c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e275      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x7a>
 80055b8:	4b84      	ldr	r3, [pc, #528]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a83      	ldr	r2, [pc, #524]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e02e      	b.n	8005624 <HAL_RCC_OscConfig+0xd8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x9c>
 80055ce:	4b7f      	ldr	r3, [pc, #508]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7e      	ldr	r2, [pc, #504]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	4b7c      	ldr	r3, [pc, #496]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a7b      	ldr	r2, [pc, #492]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	e01d      	b.n	8005624 <HAL_RCC_OscConfig+0xd8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f0:	d10c      	bne.n	800560c <HAL_RCC_OscConfig+0xc0>
 80055f2:	4b76      	ldr	r3, [pc, #472]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a75      	ldr	r2, [pc, #468]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80055f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b73      	ldr	r3, [pc, #460]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a72      	ldr	r2, [pc, #456]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00b      	b.n	8005624 <HAL_RCC_OscConfig+0xd8>
 800560c:	4b6f      	ldr	r3, [pc, #444]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6e      	ldr	r2, [pc, #440]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	4b6c      	ldr	r3, [pc, #432]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a6b      	ldr	r2, [pc, #428]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800561e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc f886 	bl	800173c <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fc f882 	bl	800173c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e229      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0xe8>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc f872 	bl	800173c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fc f86e 	bl	800173c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e215      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566e:	4b57      	ldr	r3, [pc, #348]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x110>
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d069      	beq.n	800575e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800568a:	4b50      	ldr	r3, [pc, #320]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005696:	4b4d      	ldr	r3, [pc, #308]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d11c      	bne.n	80056dc <HAL_RCC_OscConfig+0x190>
 80056a2:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d116      	bne.n	80056dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ae:	4b47      	ldr	r3, [pc, #284]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_RCC_OscConfig+0x17a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d001      	beq.n	80056c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e1e9      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c6:	4b41      	ldr	r3, [pc, #260]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	493d      	ldr	r1, [pc, #244]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056da:	e040      	b.n	800575e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d023      	beq.n	800572c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e4:	4b39      	ldr	r3, [pc, #228]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a38      	ldr	r2, [pc, #224]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fc f824 	bl	800173c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fc f820 	bl	800173c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e1c7      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570a:	4b30      	ldr	r3, [pc, #192]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005716:	4b2d      	ldr	r3, [pc, #180]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4929      	ldr	r1, [pc, #164]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
 800572a:	e018      	b.n	800575e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800572c:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a26      	ldr	r2, [pc, #152]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fc f800 	bl	800173c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005740:	f7fb fffc 	bl	800173c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1a3      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d038      	beq.n	80057dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d019      	beq.n	80057a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005772:	4b16      	ldr	r3, [pc, #88]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fb ffdd 	bl	800173c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005786:	f7fb ffd9 	bl	800173c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e180      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 800579a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x23a>
 80057a4:	e01a      	b.n	80057dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <HAL_RCC_OscConfig+0x280>)
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fb ffc3 	bl	800173c <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ba:	f7fb ffbf 	bl	800173c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d903      	bls.n	80057d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e166      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
 80057cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d0:	4b92      	ldr	r3, [pc, #584]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80057d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ee      	bne.n	80057ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a4 	beq.w	8005932 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ea:	4b8c      	ldr	r3, [pc, #560]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10d      	bne.n	8005812 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f6:	4b89      	ldr	r3, [pc, #548]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	4a88      	ldr	r2, [pc, #544]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80057fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005800:	6413      	str	r3, [r2, #64]	; 0x40
 8005802:	4b86      	ldr	r3, [pc, #536]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580e:	2301      	movs	r3, #1
 8005810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005812:	4b83      	ldr	r3, [pc, #524]	; (8005a20 <HAL_RCC_OscConfig+0x4d4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d118      	bne.n	8005850 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800581e:	4b80      	ldr	r3, [pc, #512]	; (8005a20 <HAL_RCC_OscConfig+0x4d4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7f      	ldr	r2, [pc, #508]	; (8005a20 <HAL_RCC_OscConfig+0x4d4>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800582a:	f7fb ff87 	bl	800173c <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005832:	f7fb ff83 	bl	800173c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b64      	cmp	r3, #100	; 0x64
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e12a      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005844:	4b76      	ldr	r3, [pc, #472]	; (8005a20 <HAL_RCC_OscConfig+0x4d4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d106      	bne.n	8005866 <HAL_RCC_OscConfig+0x31a>
 8005858:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	4a6f      	ldr	r2, [pc, #444]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	6713      	str	r3, [r2, #112]	; 0x70
 8005864:	e02d      	b.n	80058c2 <HAL_RCC_OscConfig+0x376>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10c      	bne.n	8005888 <HAL_RCC_OscConfig+0x33c>
 800586e:	4b6b      	ldr	r3, [pc, #428]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a6a      	ldr	r2, [pc, #424]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	6713      	str	r3, [r2, #112]	; 0x70
 800587a:	4b68      	ldr	r3, [pc, #416]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	4a67      	ldr	r2, [pc, #412]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005880:	f023 0304 	bic.w	r3, r3, #4
 8005884:	6713      	str	r3, [r2, #112]	; 0x70
 8005886:	e01c      	b.n	80058c2 <HAL_RCC_OscConfig+0x376>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b05      	cmp	r3, #5
 800588e:	d10c      	bne.n	80058aa <HAL_RCC_OscConfig+0x35e>
 8005890:	4b62      	ldr	r3, [pc, #392]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	4a61      	ldr	r2, [pc, #388]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005896:	f043 0304 	orr.w	r3, r3, #4
 800589a:	6713      	str	r3, [r2, #112]	; 0x70
 800589c:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	4a5e      	ldr	r2, [pc, #376]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6713      	str	r3, [r2, #112]	; 0x70
 80058a8:	e00b      	b.n	80058c2 <HAL_RCC_OscConfig+0x376>
 80058aa:	4b5c      	ldr	r3, [pc, #368]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	4a5b      	ldr	r2, [pc, #364]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	6713      	str	r3, [r2, #112]	; 0x70
 80058b6:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80058bc:	f023 0304 	bic.w	r3, r3, #4
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d015      	beq.n	80058f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7fb ff37 	bl	800173c <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	e00a      	b.n	80058e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d2:	f7fb ff33 	bl	800173c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e0d8      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e8:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ee      	beq.n	80058d2 <HAL_RCC_OscConfig+0x386>
 80058f4:	e014      	b.n	8005920 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fb ff21 	bl	800173c <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fb ff1d 	bl	800173c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f241 3288 	movw	r2, #5000	; 0x1388
 800590c:	4293      	cmp	r3, r2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0c2      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005914:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1ee      	bne.n	80058fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d105      	bne.n	8005932 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005926:	4b3d      	ldr	r3, [pc, #244]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	4a3c      	ldr	r2, [pc, #240]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 800592c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80ae 	beq.w	8005a98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800593c:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
 8005944:	2b08      	cmp	r3, #8
 8005946:	d06d      	beq.n	8005a24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d14b      	bne.n	80059e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005950:	4b32      	ldr	r3, [pc, #200]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a31      	ldr	r2, [pc, #196]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fb feee 	bl	800173c <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005964:	f7fb feea 	bl	800173c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e091      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	3b01      	subs	r3, #1
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	061b      	lsls	r3, r3, #24
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	071b      	lsls	r3, r3, #28
 80059ae:	491b      	ldr	r1, [pc, #108]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80059ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fb febc 	bl	800173c <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fb feb8 	bl	800173c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e05f      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059da:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x47c>
 80059e6:	e057      	b.n	8005a98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a0b      	ldr	r2, [pc, #44]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fb fea2 	bl	800173c <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fb fe9e 	bl	800173c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e045      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x4b0>
 8005a1a:	e03d      	b.n	8005a98 <HAL_RCC_OscConfig+0x54c>
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a24:	4b1f      	ldr	r3, [pc, #124]	; (8005aa4 <HAL_RCC_OscConfig+0x558>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d030      	beq.n	8005a94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d129      	bne.n	8005a94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d122      	bne.n	8005a94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d119      	bne.n	8005a94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d10f      	bne.n	8005a94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800

08005aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0d0      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d910      	bls.n	8005af0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 020f 	bic.w	r2, r3, #15
 8005ad6:	4965      	ldr	r1, [pc, #404]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ade:	4b63      	ldr	r3, [pc, #396]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d001      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0b8      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d020      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b08:	4b59      	ldr	r3, [pc, #356]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a58      	ldr	r2, [pc, #352]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b20:	4b53      	ldr	r3, [pc, #332]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	4a52      	ldr	r2, [pc, #328]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b2c:	4b50      	ldr	r3, [pc, #320]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	494d      	ldr	r1, [pc, #308]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d040      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b52:	4b47      	ldr	r3, [pc, #284]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d115      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e07f      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d107      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6a:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e073      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7a:	4b3d      	ldr	r3, [pc, #244]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e06b      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b8a:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f023 0203 	bic.w	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4936      	ldr	r1, [pc, #216]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9c:	f7fb fdce 	bl	800173c <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba4:	f7fb fdca 	bl	800173c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e053      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 020c 	and.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d1eb      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b27      	ldr	r3, [pc, #156]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d210      	bcs.n	8005bfc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 020f 	bic.w	r2, r3, #15
 8005be2:	4922      	ldr	r1, [pc, #136]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e032      	b.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c08:	4b19      	ldr	r3, [pc, #100]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4916      	ldr	r1, [pc, #88]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c26:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	490e      	ldr	r1, [pc, #56]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c3a:	f000 f821 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	490a      	ldr	r1, [pc, #40]	; (8005c74 <HAL_RCC_ClockConfig+0x1cc>)
 8005c4c:	5ccb      	ldrb	r3, [r1, r3]
 8005c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <HAL_RCC_ClockConfig+0x1d0>)
 8005c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_RCC_ClockConfig+0x1d4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fb fd2a 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023c00 	.word	0x40023c00
 8005c70:	40023800 	.word	0x40023800
 8005c74:	08008210 	.word	0x08008210
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	200000fc 	.word	0x200000fc

08005c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b094      	sub	sp, #80	; 0x50
 8005c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c90:	2300      	movs	r3, #0
 8005c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c98:	4b79      	ldr	r3, [pc, #484]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 030c 	and.w	r3, r3, #12
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d00d      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	f200 80e1 	bhi.w	8005e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x3a>
 8005cb2:	e0db      	b.n	8005e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cb4:	4b73      	ldr	r3, [pc, #460]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cb8:	e0db      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cba:	4b73      	ldr	r3, [pc, #460]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8005cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cbe:	e0d8      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc0:	4b6f      	ldr	r3, [pc, #444]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cca:	4b6d      	ldr	r3, [pc, #436]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d063      	beq.n	8005d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cd6:	4b6a      	ldr	r3, [pc, #424]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	099b      	lsrs	r3, r3, #6
 8005cdc:	2200      	movs	r2, #0
 8005cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cea:	2300      	movs	r3, #0
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
 8005cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	f04f 0000 	mov.w	r0, #0
 8005cfa:	f04f 0100 	mov.w	r1, #0
 8005cfe:	0159      	lsls	r1, r3, #5
 8005d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d04:	0150      	lsls	r0, r2, #5
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	1a51      	subs	r1, r2, r1
 8005d0e:	6139      	str	r1, [r7, #16]
 8005d10:	4629      	mov	r1, r5
 8005d12:	eb63 0301 	sbc.w	r3, r3, r1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d24:	4659      	mov	r1, fp
 8005d26:	018b      	lsls	r3, r1, #6
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d2e:	4651      	mov	r1, sl
 8005d30:	018a      	lsls	r2, r1, #6
 8005d32:	4651      	mov	r1, sl
 8005d34:	ebb2 0801 	subs.w	r8, r2, r1
 8005d38:	4659      	mov	r1, fp
 8005d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d52:	4690      	mov	r8, r2
 8005d54:	4699      	mov	r9, r3
 8005d56:	4623      	mov	r3, r4
 8005d58:	eb18 0303 	adds.w	r3, r8, r3
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	462b      	mov	r3, r5
 8005d60:	eb49 0303 	adc.w	r3, r9, r3
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d72:	4629      	mov	r1, r5
 8005d74:	024b      	lsls	r3, r1, #9
 8005d76:	4621      	mov	r1, r4
 8005d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	024a      	lsls	r2, r1, #9
 8005d80:	4610      	mov	r0, r2
 8005d82:	4619      	mov	r1, r3
 8005d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d86:	2200      	movs	r2, #0
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d90:	f7fa fa52 	bl	8000238 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4613      	mov	r3, r2
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9c:	e058      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9e:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	2200      	movs	r2, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	4611      	mov	r1, r2
 8005daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dae:	623b      	str	r3, [r7, #32]
 8005db0:	2300      	movs	r3, #0
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
 8005db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	f04f 0000 	mov.w	r0, #0
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	0159      	lsls	r1, r3, #5
 8005dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dca:	0150      	lsls	r0, r2, #5
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005df0:	ebb2 040a 	subs.w	r4, r2, sl
 8005df4:	eb63 050b 	sbc.w	r5, r3, fp
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	00eb      	lsls	r3, r5, #3
 8005e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e06:	00e2      	lsls	r2, r4, #3
 8005e08:	4614      	mov	r4, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	18e3      	adds	r3, r4, r3
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	464b      	mov	r3, r9
 8005e14:	eb45 0303 	adc.w	r3, r5, r3
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e26:	4629      	mov	r1, r5
 8005e28:	028b      	lsls	r3, r1, #10
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e30:	4621      	mov	r1, r4
 8005e32:	028a      	lsls	r2, r1, #10
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	61fa      	str	r2, [r7, #28]
 8005e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e44:	f7fa f9f8 	bl	8000238 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e6a:	e002      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3750      	adds	r7, #80	; 0x50
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800
 8005e84:	00f42400 	.word	0x00f42400
 8005e88:	007a1200 	.word	0x007a1200

08005e8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000000 	.word	0x20000000

08005ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ea8:	f7ff fff0 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0a9b      	lsrs	r3, r3, #10
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4903      	ldr	r1, [pc, #12]	; (8005ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	08008220 	.word	0x08008220

08005ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ed0:	f7ff ffdc 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	0b5b      	lsrs	r3, r3, #13
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ee2:	5ccb      	ldrb	r3, [r1, r3]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	08008220 	.word	0x08008220

08005ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d012      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f1c:	4b69      	ldr	r3, [pc, #420]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4a68      	ldr	r2, [pc, #416]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f26:	6093      	str	r3, [r2, #8]
 8005f28:	4b66      	ldr	r3, [pc, #408]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	4964      	ldr	r1, [pc, #400]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d017      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f4e:	4b5d      	ldr	r3, [pc, #372]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	4959      	ldr	r1, [pc, #356]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d017      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f8a:	4b4e      	ldr	r3, [pc, #312]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	494a      	ldr	r1, [pc, #296]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fa8:	d101      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005faa:	2301      	movs	r3, #1
 8005fac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 808b 	beq.w	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fd8:	4b3a      	ldr	r3, [pc, #232]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	4a39      	ldr	r2, [pc, #228]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe4:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ff0:	4b35      	ldr	r3, [pc, #212]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a34      	ldr	r2, [pc, #208]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ffc:	f7fb fb9e 	bl	800173c <HAL_GetTick>
 8006000:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006004:	f7fb fb9a 	bl	800173c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e38f      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006016:	4b2c      	ldr	r3, [pc, #176]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d035      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d02e      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006040:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006048:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006054:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006056:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006060:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006062:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006068:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b01      	cmp	r3, #1
 8006072:	d114      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fb fb62 	bl	800173c <HAL_GetTick>
 8006078:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607a:	e00a      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607c:	f7fb fb5e 	bl	800173c <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f241 3288 	movw	r2, #5000	; 0x1388
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e351      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ee      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060aa:	d111      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060ba:	400b      	ands	r3, r1
 80060bc:	4901      	ldr	r1, [pc, #4]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	608b      	str	r3, [r1, #8]
 80060c2:	e00b      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060c4:	40023800 	.word	0x40023800
 80060c8:	40007000 	.word	0x40007000
 80060cc:	0ffffcff 	.word	0x0ffffcff
 80060d0:	4bac      	ldr	r3, [pc, #688]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4aab      	ldr	r2, [pc, #684]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060da:	6093      	str	r3, [r2, #8]
 80060dc:	4ba9      	ldr	r3, [pc, #676]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e8:	49a6      	ldr	r1, [pc, #664]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d010      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060fa:	4ba2      	ldr	r3, [pc, #648]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006100:	4aa0      	ldr	r2, [pc, #640]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006106:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800610a:	4b9e      	ldr	r3, [pc, #632]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800610c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	499b      	ldr	r1, [pc, #620]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006128:	4b96      	ldr	r3, [pc, #600]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006136:	4993      	ldr	r1, [pc, #588]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800614a:	4b8e      	ldr	r3, [pc, #568]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006158:	498a      	ldr	r1, [pc, #552]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800616c:	4b85      	ldr	r3, [pc, #532]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617a:	4982      	ldr	r1, [pc, #520]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800618e:	4b7d      	ldr	r3, [pc, #500]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	4979      	ldr	r1, [pc, #484]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061b0:	4b74      	ldr	r3, [pc, #464]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	f023 0203 	bic.w	r2, r3, #3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	4971      	ldr	r1, [pc, #452]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d2:	4b6c      	ldr	r3, [pc, #432]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	f023 020c 	bic.w	r2, r3, #12
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e0:	4968      	ldr	r1, [pc, #416]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061f4:	4b63      	ldr	r3, [pc, #396]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006202:	4960      	ldr	r1, [pc, #384]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006216:	4b5b      	ldr	r3, [pc, #364]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	4957      	ldr	r1, [pc, #348]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006238:	4b52      	ldr	r3, [pc, #328]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	494f      	ldr	r1, [pc, #316]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800625a:	4b4a      	ldr	r3, [pc, #296]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006268:	4946      	ldr	r1, [pc, #280]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800627c:	4b41      	ldr	r3, [pc, #260]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628a:	493e      	ldr	r1, [pc, #248]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800629e:	4b39      	ldr	r3, [pc, #228]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	4935      	ldr	r1, [pc, #212]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062c0:	4b30      	ldr	r3, [pc, #192]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ce:	492d      	ldr	r1, [pc, #180]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d011      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062e2:	4b28      	ldr	r3, [pc, #160]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f0:	4924      	ldr	r1, [pc, #144]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006300:	d101      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006312:	2301      	movs	r3, #1
 8006314:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006322:	4b18      	ldr	r3, [pc, #96]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006328:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006330:	4914      	ldr	r1, [pc, #80]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006354:	490b      	ldr	r1, [pc, #44]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00f      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006368:	4b06      	ldr	r3, [pc, #24]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	4902      	ldr	r1, [pc, #8]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006382:	bf00      	nop
 8006384:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006394:	4b8a      	ldr	r3, [pc, #552]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	4986      	ldr	r1, [pc, #536]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063b8:	4b81      	ldr	r3, [pc, #516]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c8:	497d      	ldr	r1, [pc, #500]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d006      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80d6 	beq.w	8006590 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063e4:	4b76      	ldr	r3, [pc, #472]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a75      	ldr	r2, [pc, #468]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f0:	f7fb f9a4 	bl	800173c <HAL_GetTick>
 80063f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063f8:	f7fb f9a0 	bl	800173c <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e195      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800640a:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d021      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11d      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800642a:	4b65      	ldr	r3, [pc, #404]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800642c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643e:	0e1b      	lsrs	r3, r3, #24
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	019a      	lsls	r2, r3, #6
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	041b      	lsls	r3, r3, #16
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	071b      	lsls	r3, r3, #28
 800645e:	4958      	ldr	r1, [pc, #352]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006484:	2b00      	cmp	r3, #0
 8006486:	d02e      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006490:	d129      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006492:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064a0:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a6:	0f1b      	lsrs	r3, r3, #28
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	019a      	lsls	r2, r3, #6
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	071b      	lsls	r3, r3, #28
 80064c6:	493e      	ldr	r1, [pc, #248]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064ce:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d4:	f023 021f 	bic.w	r2, r3, #31
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	3b01      	subs	r3, #1
 80064de:	4938      	ldr	r1, [pc, #224]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01d      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064f2:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f8:	0e1b      	lsrs	r3, r3, #24
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006500:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006506:	0f1b      	lsrs	r3, r3, #28
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	019a      	lsls	r2, r3, #6
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	041b      	lsls	r3, r3, #16
 800651a:	431a      	orrs	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	431a      	orrs	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	071b      	lsls	r3, r3, #28
 8006526:	4926      	ldr	r1, [pc, #152]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	019a      	lsls	r2, r3, #6
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	071b      	lsls	r3, r3, #28
 8006556:	491a      	ldr	r1, [pc, #104]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656a:	f7fb f8e7 	bl	800173c <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006570:	e008      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006572:	f7fb f8e3 	bl	800173c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b64      	cmp	r3, #100	; 0x64
 800657e:	d901      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0d8      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b01      	cmp	r3, #1
 8006594:	f040 80ce 	bne.w	8006734 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a4:	f7fb f8ca 	bl	800173c <HAL_GetTick>
 80065a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065aa:	e00b      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065ac:	f7fb f8c6 	bl	800173c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d904      	bls.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e0bb      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80065be:	bf00      	nop
 80065c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065c4:	4b5e      	ldr	r3, [pc, #376]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d0:	d0ec      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d02e      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d12a      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065fa:	4b51      	ldr	r3, [pc, #324]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006608:	4b4d      	ldr	r3, [pc, #308]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660e:	0f1b      	lsrs	r3, r3, #28
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	019a      	lsls	r2, r3, #6
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	061b      	lsls	r3, r3, #24
 8006628:	431a      	orrs	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	071b      	lsls	r3, r3, #28
 800662e:	4944      	ldr	r1, [pc, #272]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006636:	4b42      	ldr	r3, [pc, #264]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	3b01      	subs	r3, #1
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	493d      	ldr	r1, [pc, #244]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d022      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006664:	d11d      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006666:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	0e1b      	lsrs	r3, r3, #24
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006674:	4b32      	ldr	r3, [pc, #200]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	0f1b      	lsrs	r3, r3, #28
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	019a      	lsls	r2, r3, #6
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	431a      	orrs	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	431a      	orrs	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	071b      	lsls	r3, r3, #28
 800669a:	4929      	ldr	r1, [pc, #164]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d028      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	0e1b      	lsrs	r3, r3, #24
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066bc:	4b20      	ldr	r3, [pc, #128]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	019a      	lsls	r2, r3, #6
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	431a      	orrs	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	071b      	lsls	r3, r3, #28
 80066e2:	4917      	ldr	r1, [pc, #92]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4911      	ldr	r1, [pc, #68]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670c:	f7fb f816 	bl	800173c <HAL_GetTick>
 8006710:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006714:	f7fb f812 	bl	800173c <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e007      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800672e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006732:	d1ef      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40023800 	.word	0x40023800

08006744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e049      	b.n	80067ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fa fc42 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f000 fa0a 	bl	8006b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e049      	b.n	8006898 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f841 	bl	80068a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f000 f9b3 	bl	8006b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <HAL_TIM_OC_Start+0x24>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e03c      	b.n	8006952 <HAL_TIM_OC_Start+0x9e>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d109      	bne.n	80068f2 <HAL_TIM_OC_Start+0x3e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e02f      	b.n	8006952 <HAL_TIM_OC_Start+0x9e>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d109      	bne.n	800690c <HAL_TIM_OC_Start+0x58>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	e022      	b.n	8006952 <HAL_TIM_OC_Start+0x9e>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b0c      	cmp	r3, #12
 8006910:	d109      	bne.n	8006926 <HAL_TIM_OC_Start+0x72>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	bf14      	ite	ne
 800691e:	2301      	movne	r3, #1
 8006920:	2300      	moveq	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	e015      	b.n	8006952 <HAL_TIM_OC_Start+0x9e>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b10      	cmp	r3, #16
 800692a:	d109      	bne.n	8006940 <HAL_TIM_OC_Start+0x8c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e008      	b.n	8006952 <HAL_TIM_OC_Start+0x9e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e092      	b.n	8006a80 <HAL_TIM_OC_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <HAL_TIM_OC_Start+0xb6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006968:	e023      	b.n	80069b2 <HAL_TIM_OC_Start+0xfe>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b04      	cmp	r3, #4
 800696e:	d104      	bne.n	800697a <HAL_TIM_OC_Start+0xc6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006978:	e01b      	b.n	80069b2 <HAL_TIM_OC_Start+0xfe>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b08      	cmp	r3, #8
 800697e:	d104      	bne.n	800698a <HAL_TIM_OC_Start+0xd6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006988:	e013      	b.n	80069b2 <HAL_TIM_OC_Start+0xfe>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b0c      	cmp	r3, #12
 800698e:	d104      	bne.n	800699a <HAL_TIM_OC_Start+0xe6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006998:	e00b      	b.n	80069b2 <HAL_TIM_OC_Start+0xfe>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b10      	cmp	r3, #16
 800699e:	d104      	bne.n	80069aa <HAL_TIM_OC_Start+0xf6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a8:	e003      	b.n	80069b2 <HAL_TIM_OC_Start+0xfe>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fbec 	bl	8007198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a30      	ldr	r2, [pc, #192]	; (8006a88 <HAL_TIM_OC_Start+0x1d4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_TIM_OC_Start+0x120>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a2f      	ldr	r2, [pc, #188]	; (8006a8c <HAL_TIM_OC_Start+0x1d8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_OC_Start+0x124>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <HAL_TIM_OC_Start+0x126>
 80069d8:	2300      	movs	r3, #0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a25      	ldr	r2, [pc, #148]	; (8006a88 <HAL_TIM_OC_Start+0x1d4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d022      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a00:	d01d      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a22      	ldr	r2, [pc, #136]	; (8006a90 <HAL_TIM_OC_Start+0x1dc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d018      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <HAL_TIM_OC_Start+0x1e0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1f      	ldr	r2, [pc, #124]	; (8006a98 <HAL_TIM_OC_Start+0x1e4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00e      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <HAL_TIM_OC_Start+0x1d8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <HAL_TIM_OC_Start+0x1e8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_TIM_OC_Start+0x18a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <HAL_TIM_OC_Start+0x1ec>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d115      	bne.n	8006a6a <HAL_TIM_OC_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <HAL_TIM_OC_Start+0x1f0>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d015      	beq.n	8006a7c <HAL_TIM_OC_Start+0x1c8>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a56:	d011      	beq.n	8006a7c <HAL_TIM_OC_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a68:	e008      	b.n	8006a7c <HAL_TIM_OC_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e000      	b.n	8006a7e <HAL_TIM_OC_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800
 8006aa4:	00010007 	.word	0x00010007

08006aa8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e066      	b.n	8006b94 <HAL_TIM_OC_ConfigChannel+0xec>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b14      	cmp	r3, #20
 8006ad2:	d857      	bhi.n	8006b84 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <HAL_TIM_OC_ConfigChannel+0x34>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006b85 	.word	0x08006b85
 8006ae4:	08006b85 	.word	0x08006b85
 8006ae8:	08006b85 	.word	0x08006b85
 8006aec:	08006b3f 	.word	0x08006b3f
 8006af0:	08006b85 	.word	0x08006b85
 8006af4:	08006b85 	.word	0x08006b85
 8006af8:	08006b85 	.word	0x08006b85
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006b85 	.word	0x08006b85
 8006b04:	08006b85 	.word	0x08006b85
 8006b08:	08006b85 	.word	0x08006b85
 8006b0c:	08006b5b 	.word	0x08006b5b
 8006b10:	08006b85 	.word	0x08006b85
 8006b14:	08006b85 	.word	0x08006b85
 8006b18:	08006b85 	.word	0x08006b85
 8006b1c:	08006b69 	.word	0x08006b69
 8006b20:	08006b85 	.word	0x08006b85
 8006b24:	08006b85 	.word	0x08006b85
 8006b28:	08006b85 	.word	0x08006b85
 8006b2c:	08006b77 	.word	0x08006b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f8d0 	bl	8006cdc <TIM_OC1_SetConfig>
      break;
 8006b3c:	e025      	b.n	8006b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 f93b 	bl	8006dc0 <TIM_OC2_SetConfig>
      break;
 8006b4a:	e01e      	b.n	8006b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f9ac 	bl	8006eb0 <TIM_OC3_SetConfig>
      break;
 8006b58:	e017      	b.n	8006b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fa1b 	bl	8006f9c <TIM_OC4_SetConfig>
      break;
 8006b66:	e010      	b.n	8006b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fa6c 	bl	800704c <TIM_OC5_SetConfig>
      break;
 8006b74:	e009      	b.n	8006b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fab7 	bl	80070f0 <TIM_OC6_SetConfig>
      break;
 8006b82:	e002      	b.n	8006b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
      break;
 8006b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a40      	ldr	r2, [pc, #256]	; (8006cb0 <TIM_Base_SetConfig+0x114>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bba:	d00f      	beq.n	8006bdc <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a3d      	ldr	r2, [pc, #244]	; (8006cb4 <TIM_Base_SetConfig+0x118>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a3c      	ldr	r2, [pc, #240]	; (8006cb8 <TIM_Base_SetConfig+0x11c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3b      	ldr	r2, [pc, #236]	; (8006cbc <TIM_Base_SetConfig+0x120>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a3a      	ldr	r2, [pc, #232]	; (8006cc0 <TIM_Base_SetConfig+0x124>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d108      	bne.n	8006bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2f      	ldr	r2, [pc, #188]	; (8006cb0 <TIM_Base_SetConfig+0x114>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d02b      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d027      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2c      	ldr	r2, [pc, #176]	; (8006cb4 <TIM_Base_SetConfig+0x118>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d023      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2b      	ldr	r2, [pc, #172]	; (8006cb8 <TIM_Base_SetConfig+0x11c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01f      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <TIM_Base_SetConfig+0x120>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01b      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <TIM_Base_SetConfig+0x124>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d017      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <TIM_Base_SetConfig+0x128>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a27      	ldr	r2, [pc, #156]	; (8006cc8 <TIM_Base_SetConfig+0x12c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00f      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a26      	ldr	r2, [pc, #152]	; (8006ccc <TIM_Base_SetConfig+0x130>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <TIM_Base_SetConfig+0x134>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <TIM_Base_SetConfig+0x138>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a23      	ldr	r2, [pc, #140]	; (8006cd8 <TIM_Base_SetConfig+0x13c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d108      	bne.n	8006c60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <TIM_Base_SetConfig+0x114>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_Base_SetConfig+0xf8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a0c      	ldr	r2, [pc, #48]	; (8006cc0 <TIM_Base_SetConfig+0x124>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d103      	bne.n	8006c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	615a      	str	r2, [r3, #20]
}
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40010400 	.word	0x40010400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800
 8006cd0:	40001800 	.word	0x40001800
 8006cd4:	40001c00 	.word	0x40001c00
 8006cd8:	40002000 	.word	0x40002000

08006cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0201 	bic.w	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <TIM_OC1_SetConfig+0xd8>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 0302 	bic.w	r3, r3, #2
 8006d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a21      	ldr	r2, [pc, #132]	; (8006db8 <TIM_OC1_SetConfig+0xdc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC1_SetConfig+0x64>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a20      	ldr	r2, [pc, #128]	; (8006dbc <TIM_OC1_SetConfig+0xe0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10c      	bne.n	8006d5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 0308 	bic.w	r3, r3, #8
 8006d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 0304 	bic.w	r3, r3, #4
 8006d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a16      	ldr	r2, [pc, #88]	; (8006db8 <TIM_OC1_SetConfig+0xdc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_OC1_SetConfig+0x8e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <TIM_OC1_SetConfig+0xe0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d111      	bne.n	8006d8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	621a      	str	r2, [r3, #32]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	fffeff8f 	.word	0xfffeff8f
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40010400 	.word	0x40010400

08006dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0210 	bic.w	r2, r3, #16
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4b2e      	ldr	r3, [pc, #184]	; (8006ea4 <TIM_OC2_SetConfig+0xe4>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0320 	bic.w	r3, r3, #32
 8006e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <TIM_OC2_SetConfig+0xe8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC2_SetConfig+0x68>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a22      	ldr	r2, [pc, #136]	; (8006eac <TIM_OC2_SetConfig+0xec>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10d      	bne.n	8006e44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <TIM_OC2_SetConfig+0xe8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_OC2_SetConfig+0x94>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a17      	ldr	r2, [pc, #92]	; (8006eac <TIM_OC2_SetConfig+0xec>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d113      	bne.n	8006e7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	feff8fff 	.word	0xfeff8fff
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40010400 	.word	0x40010400

08006eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4b2d      	ldr	r3, [pc, #180]	; (8006f90 <TIM_OC3_SetConfig+0xe0>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <TIM_OC3_SetConfig+0xe4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d003      	beq.n	8006f16 <TIM_OC3_SetConfig+0x66>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a21      	ldr	r2, [pc, #132]	; (8006f98 <TIM_OC3_SetConfig+0xe8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d10d      	bne.n	8006f32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <TIM_OC3_SetConfig+0xe4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d003      	beq.n	8006f42 <TIM_OC3_SetConfig+0x92>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <TIM_OC3_SetConfig+0xe8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d113      	bne.n	8006f6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	fffeff8f 	.word	0xfffeff8f
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400

08006f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b1e      	ldr	r3, [pc, #120]	; (8007040 <TIM_OC4_SetConfig+0xa4>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	031b      	lsls	r3, r3, #12
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	; (8007044 <TIM_OC4_SetConfig+0xa8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC4_SetConfig+0x68>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	; (8007048 <TIM_OC4_SetConfig+0xac>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d109      	bne.n	8007018 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	019b      	lsls	r3, r3, #6
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	feff8fff 	.word	0xfeff8fff
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <TIM_OC5_SetConfig+0x98>)
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800708c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	041b      	lsls	r3, r3, #16
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <TIM_OC5_SetConfig+0x9c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC5_SetConfig+0x5e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a11      	ldr	r2, [pc, #68]	; (80070ec <TIM_OC5_SetConfig+0xa0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d109      	bne.n	80070be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	fffeff8f 	.word	0xfffeff8f
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400

080070f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4b1c      	ldr	r3, [pc, #112]	; (800718c <TIM_OC6_SetConfig+0x9c>)
 800711c:	4013      	ands	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	051b      	lsls	r3, r3, #20
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a13      	ldr	r2, [pc, #76]	; (8007190 <TIM_OC6_SetConfig+0xa0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC6_SetConfig+0x60>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a12      	ldr	r2, [pc, #72]	; (8007194 <TIM_OC6_SetConfig+0xa4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d109      	bne.n	8007164 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007156:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	029b      	lsls	r3, r3, #10
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	feff8fff 	.word	0xfeff8fff
 8007190:	40010000 	.word	0x40010000
 8007194:	40010400 	.word	0x40010400

08007198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	2201      	movs	r2, #1
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	43db      	mvns	r3, r3
 80071ba:	401a      	ands	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a1a      	ldr	r2, [r3, #32]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	fa01 f303 	lsl.w	r3, r1, r3
 80071d0:	431a      	orrs	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	621a      	str	r2, [r3, #32]
}
 80071d6:	bf00      	nop
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e040      	b.n	8007276 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7f9 ff7d 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	; 0x24
 800720e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0201 	bic.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f8af 	bl	8007384 <UART_SetConfig>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e022      	b.n	8007276 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fb07 	bl	800784c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0201 	orr.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb8e 	bl	8007990 <UART_CheckIdleState>
 8007274:	4603      	mov	r3, r0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b08a      	sub	sp, #40	; 0x28
 8007282:	af02      	add	r7, sp, #8
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007292:	2b20      	cmp	r3, #32
 8007294:	d171      	bne.n	800737a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_UART_Transmit+0x24>
 800729c:	88fb      	ldrh	r3, [r7, #6]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e06a      	b.n	800737c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2221      	movs	r2, #33	; 0x21
 80072b2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b4:	f7fa fa42 	bl	800173c <HAL_GetTick>
 80072b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d2:	d108      	bne.n	80072e6 <HAL_UART_Transmit+0x68>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e003      	b.n	80072ee <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072ee:	e02c      	b.n	800734a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2200      	movs	r2, #0
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fb95 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e038      	b.n	800737c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800731e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	3302      	adds	r3, #2
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e007      	b.n	8007338 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3301      	adds	r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1cc      	bne.n	80072f0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	2140      	movs	r1, #64	; 0x40
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fb62 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e005      	b.n	800737c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	e000      	b.n	800737c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4ba6      	ldr	r3, [pc, #664]	; (8007648 <UART_SetConfig+0x2c4>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6979      	ldr	r1, [r7, #20]
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a94      	ldr	r2, [pc, #592]	; (800764c <UART_SetConfig+0x2c8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d120      	bne.n	8007442 <UART_SetConfig+0xbe>
 8007400:	4b93      	ldr	r3, [pc, #588]	; (8007650 <UART_SetConfig+0x2cc>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d816      	bhi.n	800743c <UART_SetConfig+0xb8>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0x90>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007425 	.word	0x08007425
 8007418:	08007431 	.word	0x08007431
 800741c:	0800742b 	.word	0x0800742b
 8007420:	08007437 	.word	0x08007437
 8007424:	2301      	movs	r3, #1
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e150      	b.n	80076cc <UART_SetConfig+0x348>
 800742a:	2302      	movs	r3, #2
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e14d      	b.n	80076cc <UART_SetConfig+0x348>
 8007430:	2304      	movs	r3, #4
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e14a      	b.n	80076cc <UART_SetConfig+0x348>
 8007436:	2308      	movs	r3, #8
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e147      	b.n	80076cc <UART_SetConfig+0x348>
 800743c:	2310      	movs	r3, #16
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e144      	b.n	80076cc <UART_SetConfig+0x348>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a83      	ldr	r2, [pc, #524]	; (8007654 <UART_SetConfig+0x2d0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d132      	bne.n	80074b2 <UART_SetConfig+0x12e>
 800744c:	4b80      	ldr	r3, [pc, #512]	; (8007650 <UART_SetConfig+0x2cc>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	f003 030c 	and.w	r3, r3, #12
 8007456:	2b0c      	cmp	r3, #12
 8007458:	d828      	bhi.n	80074ac <UART_SetConfig+0x128>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0xdc>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007495 	.word	0x08007495
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074a1 	.word	0x080074a1
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	0800749b 	.word	0x0800749b
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074a7 	.word	0x080074a7
 8007494:	2300      	movs	r3, #0
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e118      	b.n	80076cc <UART_SetConfig+0x348>
 800749a:	2302      	movs	r3, #2
 800749c:	77fb      	strb	r3, [r7, #31]
 800749e:	e115      	b.n	80076cc <UART_SetConfig+0x348>
 80074a0:	2304      	movs	r3, #4
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e112      	b.n	80076cc <UART_SetConfig+0x348>
 80074a6:	2308      	movs	r3, #8
 80074a8:	77fb      	strb	r3, [r7, #31]
 80074aa:	e10f      	b.n	80076cc <UART_SetConfig+0x348>
 80074ac:	2310      	movs	r3, #16
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e10c      	b.n	80076cc <UART_SetConfig+0x348>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a68      	ldr	r2, [pc, #416]	; (8007658 <UART_SetConfig+0x2d4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d120      	bne.n	80074fe <UART_SetConfig+0x17a>
 80074bc:	4b64      	ldr	r3, [pc, #400]	; (8007650 <UART_SetConfig+0x2cc>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074c6:	2b30      	cmp	r3, #48	; 0x30
 80074c8:	d013      	beq.n	80074f2 <UART_SetConfig+0x16e>
 80074ca:	2b30      	cmp	r3, #48	; 0x30
 80074cc:	d814      	bhi.n	80074f8 <UART_SetConfig+0x174>
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d009      	beq.n	80074e6 <UART_SetConfig+0x162>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d810      	bhi.n	80074f8 <UART_SetConfig+0x174>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <UART_SetConfig+0x15c>
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d006      	beq.n	80074ec <UART_SetConfig+0x168>
 80074de:	e00b      	b.n	80074f8 <UART_SetConfig+0x174>
 80074e0:	2300      	movs	r3, #0
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e0f2      	b.n	80076cc <UART_SetConfig+0x348>
 80074e6:	2302      	movs	r3, #2
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e0ef      	b.n	80076cc <UART_SetConfig+0x348>
 80074ec:	2304      	movs	r3, #4
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e0ec      	b.n	80076cc <UART_SetConfig+0x348>
 80074f2:	2308      	movs	r3, #8
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e0e9      	b.n	80076cc <UART_SetConfig+0x348>
 80074f8:	2310      	movs	r3, #16
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e0e6      	b.n	80076cc <UART_SetConfig+0x348>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a56      	ldr	r2, [pc, #344]	; (800765c <UART_SetConfig+0x2d8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d120      	bne.n	800754a <UART_SetConfig+0x1c6>
 8007508:	4b51      	ldr	r3, [pc, #324]	; (8007650 <UART_SetConfig+0x2cc>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007512:	2bc0      	cmp	r3, #192	; 0xc0
 8007514:	d013      	beq.n	800753e <UART_SetConfig+0x1ba>
 8007516:	2bc0      	cmp	r3, #192	; 0xc0
 8007518:	d814      	bhi.n	8007544 <UART_SetConfig+0x1c0>
 800751a:	2b80      	cmp	r3, #128	; 0x80
 800751c:	d009      	beq.n	8007532 <UART_SetConfig+0x1ae>
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d810      	bhi.n	8007544 <UART_SetConfig+0x1c0>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <UART_SetConfig+0x1a8>
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d006      	beq.n	8007538 <UART_SetConfig+0x1b4>
 800752a:	e00b      	b.n	8007544 <UART_SetConfig+0x1c0>
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e0cc      	b.n	80076cc <UART_SetConfig+0x348>
 8007532:	2302      	movs	r3, #2
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e0c9      	b.n	80076cc <UART_SetConfig+0x348>
 8007538:	2304      	movs	r3, #4
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e0c6      	b.n	80076cc <UART_SetConfig+0x348>
 800753e:	2308      	movs	r3, #8
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e0c3      	b.n	80076cc <UART_SetConfig+0x348>
 8007544:	2310      	movs	r3, #16
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e0c0      	b.n	80076cc <UART_SetConfig+0x348>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a44      	ldr	r2, [pc, #272]	; (8007660 <UART_SetConfig+0x2dc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d125      	bne.n	80075a0 <UART_SetConfig+0x21c>
 8007554:	4b3e      	ldr	r3, [pc, #248]	; (8007650 <UART_SetConfig+0x2cc>)
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007562:	d017      	beq.n	8007594 <UART_SetConfig+0x210>
 8007564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007568:	d817      	bhi.n	800759a <UART_SetConfig+0x216>
 800756a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756e:	d00b      	beq.n	8007588 <UART_SetConfig+0x204>
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d811      	bhi.n	800759a <UART_SetConfig+0x216>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <UART_SetConfig+0x1fe>
 800757a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757e:	d006      	beq.n	800758e <UART_SetConfig+0x20a>
 8007580:	e00b      	b.n	800759a <UART_SetConfig+0x216>
 8007582:	2300      	movs	r3, #0
 8007584:	77fb      	strb	r3, [r7, #31]
 8007586:	e0a1      	b.n	80076cc <UART_SetConfig+0x348>
 8007588:	2302      	movs	r3, #2
 800758a:	77fb      	strb	r3, [r7, #31]
 800758c:	e09e      	b.n	80076cc <UART_SetConfig+0x348>
 800758e:	2304      	movs	r3, #4
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e09b      	b.n	80076cc <UART_SetConfig+0x348>
 8007594:	2308      	movs	r3, #8
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e098      	b.n	80076cc <UART_SetConfig+0x348>
 800759a:	2310      	movs	r3, #16
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e095      	b.n	80076cc <UART_SetConfig+0x348>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <UART_SetConfig+0x2e0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d125      	bne.n	80075f6 <UART_SetConfig+0x272>
 80075aa:	4b29      	ldr	r3, [pc, #164]	; (8007650 <UART_SetConfig+0x2cc>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b8:	d017      	beq.n	80075ea <UART_SetConfig+0x266>
 80075ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075be:	d817      	bhi.n	80075f0 <UART_SetConfig+0x26c>
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c4:	d00b      	beq.n	80075de <UART_SetConfig+0x25a>
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ca:	d811      	bhi.n	80075f0 <UART_SetConfig+0x26c>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <UART_SetConfig+0x254>
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d4:	d006      	beq.n	80075e4 <UART_SetConfig+0x260>
 80075d6:	e00b      	b.n	80075f0 <UART_SetConfig+0x26c>
 80075d8:	2301      	movs	r3, #1
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e076      	b.n	80076cc <UART_SetConfig+0x348>
 80075de:	2302      	movs	r3, #2
 80075e0:	77fb      	strb	r3, [r7, #31]
 80075e2:	e073      	b.n	80076cc <UART_SetConfig+0x348>
 80075e4:	2304      	movs	r3, #4
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e070      	b.n	80076cc <UART_SetConfig+0x348>
 80075ea:	2308      	movs	r3, #8
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e06d      	b.n	80076cc <UART_SetConfig+0x348>
 80075f0:	2310      	movs	r3, #16
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e06a      	b.n	80076cc <UART_SetConfig+0x348>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <UART_SetConfig+0x2e4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d138      	bne.n	8007672 <UART_SetConfig+0x2ee>
 8007600:	4b13      	ldr	r3, [pc, #76]	; (8007650 <UART_SetConfig+0x2cc>)
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800760a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800760e:	d017      	beq.n	8007640 <UART_SetConfig+0x2bc>
 8007610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007614:	d82a      	bhi.n	800766c <UART_SetConfig+0x2e8>
 8007616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761a:	d00b      	beq.n	8007634 <UART_SetConfig+0x2b0>
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007620:	d824      	bhi.n	800766c <UART_SetConfig+0x2e8>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <UART_SetConfig+0x2aa>
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762a:	d006      	beq.n	800763a <UART_SetConfig+0x2b6>
 800762c:	e01e      	b.n	800766c <UART_SetConfig+0x2e8>
 800762e:	2300      	movs	r3, #0
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e04b      	b.n	80076cc <UART_SetConfig+0x348>
 8007634:	2302      	movs	r3, #2
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e048      	b.n	80076cc <UART_SetConfig+0x348>
 800763a:	2304      	movs	r3, #4
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e045      	b.n	80076cc <UART_SetConfig+0x348>
 8007640:	2308      	movs	r3, #8
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e042      	b.n	80076cc <UART_SetConfig+0x348>
 8007646:	bf00      	nop
 8007648:	efff69f3 	.word	0xefff69f3
 800764c:	40011000 	.word	0x40011000
 8007650:	40023800 	.word	0x40023800
 8007654:	40004400 	.word	0x40004400
 8007658:	40004800 	.word	0x40004800
 800765c:	40004c00 	.word	0x40004c00
 8007660:	40005000 	.word	0x40005000
 8007664:	40011400 	.word	0x40011400
 8007668:	40007800 	.word	0x40007800
 800766c:	2310      	movs	r3, #16
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e02c      	b.n	80076cc <UART_SetConfig+0x348>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a72      	ldr	r2, [pc, #456]	; (8007840 <UART_SetConfig+0x4bc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d125      	bne.n	80076c8 <UART_SetConfig+0x344>
 800767c:	4b71      	ldr	r3, [pc, #452]	; (8007844 <UART_SetConfig+0x4c0>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007686:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800768a:	d017      	beq.n	80076bc <UART_SetConfig+0x338>
 800768c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007690:	d817      	bhi.n	80076c2 <UART_SetConfig+0x33e>
 8007692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007696:	d00b      	beq.n	80076b0 <UART_SetConfig+0x32c>
 8007698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769c:	d811      	bhi.n	80076c2 <UART_SetConfig+0x33e>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <UART_SetConfig+0x326>
 80076a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a6:	d006      	beq.n	80076b6 <UART_SetConfig+0x332>
 80076a8:	e00b      	b.n	80076c2 <UART_SetConfig+0x33e>
 80076aa:	2300      	movs	r3, #0
 80076ac:	77fb      	strb	r3, [r7, #31]
 80076ae:	e00d      	b.n	80076cc <UART_SetConfig+0x348>
 80076b0:	2302      	movs	r3, #2
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e00a      	b.n	80076cc <UART_SetConfig+0x348>
 80076b6:	2304      	movs	r3, #4
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e007      	b.n	80076cc <UART_SetConfig+0x348>
 80076bc:	2308      	movs	r3, #8
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e004      	b.n	80076cc <UART_SetConfig+0x348>
 80076c2:	2310      	movs	r3, #16
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e001      	b.n	80076cc <UART_SetConfig+0x348>
 80076c8:	2310      	movs	r3, #16
 80076ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d4:	d15b      	bne.n	800778e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80076d6:	7ffb      	ldrb	r3, [r7, #31]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d828      	bhi.n	800772e <UART_SetConfig+0x3aa>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <UART_SetConfig+0x360>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007709 	.word	0x08007709
 80076e8:	08007711 	.word	0x08007711
 80076ec:	08007719 	.word	0x08007719
 80076f0:	0800772f 	.word	0x0800772f
 80076f4:	0800771f 	.word	0x0800771f
 80076f8:	0800772f 	.word	0x0800772f
 80076fc:	0800772f 	.word	0x0800772f
 8007700:	0800772f 	.word	0x0800772f
 8007704:	08007727 	.word	0x08007727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007708:	f7fe fbcc 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 800770c:	61b8      	str	r0, [r7, #24]
        break;
 800770e:	e013      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007710:	f7fe fbdc 	bl	8005ecc <HAL_RCC_GetPCLK2Freq>
 8007714:	61b8      	str	r0, [r7, #24]
        break;
 8007716:	e00f      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007718:	4b4b      	ldr	r3, [pc, #300]	; (8007848 <UART_SetConfig+0x4c4>)
 800771a:	61bb      	str	r3, [r7, #24]
        break;
 800771c:	e00c      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771e:	f7fe faaf 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 8007722:	61b8      	str	r0, [r7, #24]
        break;
 8007724:	e008      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772a:	61bb      	str	r3, [r7, #24]
        break;
 800772c:	e004      	b.n	8007738 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	77bb      	strb	r3, [r7, #30]
        break;
 8007736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d074      	beq.n	8007828 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	005a      	lsls	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	441a      	add	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d916      	bls.n	8007788 <UART_SetConfig+0x404>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007760:	d212      	bcs.n	8007788 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f023 030f 	bic.w	r3, r3, #15
 800776a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	b29a      	uxth	r2, r3
 8007778:	89fb      	ldrh	r3, [r7, #14]
 800777a:	4313      	orrs	r3, r2
 800777c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	89fa      	ldrh	r2, [r7, #14]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	e04f      	b.n	8007828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	77bb      	strb	r3, [r7, #30]
 800778c:	e04c      	b.n	8007828 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800778e:	7ffb      	ldrb	r3, [r7, #31]
 8007790:	2b08      	cmp	r3, #8
 8007792:	d828      	bhi.n	80077e6 <UART_SetConfig+0x462>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <UART_SetConfig+0x418>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	080077e7 	.word	0x080077e7
 80077ac:	080077d7 	.word	0x080077d7
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077e7 	.word	0x080077e7
 80077b8:	080077e7 	.word	0x080077e7
 80077bc:	080077df 	.word	0x080077df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c0:	f7fe fb70 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 80077c4:	61b8      	str	r0, [r7, #24]
        break;
 80077c6:	e013      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077c8:	f7fe fb80 	bl	8005ecc <HAL_RCC_GetPCLK2Freq>
 80077cc:	61b8      	str	r0, [r7, #24]
        break;
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d0:	4b1d      	ldr	r3, [pc, #116]	; (8007848 <UART_SetConfig+0x4c4>)
 80077d2:	61bb      	str	r3, [r7, #24]
        break;
 80077d4:	e00c      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077d6:	f7fe fa53 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 80077da:	61b8      	str	r0, [r7, #24]
        break;
 80077dc:	e008      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e2:	61bb      	str	r3, [r7, #24]
        break;
 80077e4:	e004      	b.n	80077f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	77bb      	strb	r3, [r7, #30]
        break;
 80077ee:	bf00      	nop
    }

    if (pclk != 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	085a      	lsrs	r2, r3, #1
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	441a      	add	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b0f      	cmp	r3, #15
 800780e:	d909      	bls.n	8007824 <UART_SetConfig+0x4a0>
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007816:	d205      	bcs.n	8007824 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	e001      	b.n	8007828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007834:	7fbb      	ldrb	r3, [r7, #30]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40007c00 	.word	0x40007c00
 8007844:	40023800 	.word	0x40023800
 8007848:	00f42400 	.word	0x00f42400

0800784c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794a:	d10a      	bne.n	8007962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a0:	f7f9 fecc 	bl	800173c <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d10e      	bne.n	80079d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f831 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e027      	b.n	8007a22 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d10e      	bne.n	80079fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f81b 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e011      	b.n	8007a22 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b09c      	sub	sp, #112	; 0x70
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a3a:	e0a7      	b.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	f000 80a3 	beq.w	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a46:	f7f9 fe79 	bl	800173c <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d302      	bcc.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8007a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d13f      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a70:	667b      	str	r3, [r7, #100]	; 0x64
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e6      	bne.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e5      	bne.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e068      	b.n	8007bae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d050      	beq.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af8:	d148      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
 8007b24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e6      	bne.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b56:	623a      	str	r2, [r7, #32]
 8007b58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	69f9      	ldr	r1, [r7, #28]
 8007b5c:	6a3a      	ldr	r2, [r7, #32]
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e5      	bne.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e010      	b.n	8007bae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4013      	ands	r3, r2
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	f43f af48 	beq.w	8007a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3770      	adds	r7, #112	; 0x70
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb8:	b084      	sub	sp, #16
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	f107 001c 	add.w	r0, r7, #28
 8007bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d120      	bne.n	8007c12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <USB_CoreInit+0xac>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d105      	bne.n	8007c06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa96 	bl	8008138 <USB_CoreReset>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
 8007c10:	e010      	b.n	8007c34 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa8a 	bl	8008138 <USB_CoreReset>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d10b      	bne.n	8007c52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f043 0206 	orr.w	r2, r3, #6
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c5e:	b004      	add	sp, #16
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	ffbdffbf 	.word	0xffbdffbf

08007c68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f023 0201 	bic.w	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d115      	bne.n	8007cd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cb8:	2001      	movs	r0, #1
 8007cba:	f7f9 fd4b 	bl	8001754 <HAL_Delay>
      ms++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fa29 	bl	800811c <USB_GetMode>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d01e      	beq.n	8007d0e <USB_SetCurrentMode+0x84>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b31      	cmp	r3, #49	; 0x31
 8007cd4:	d9f0      	bls.n	8007cb8 <USB_SetCurrentMode+0x2e>
 8007cd6:	e01a      	b.n	8007d0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d115      	bne.n	8007d0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cea:	2001      	movs	r0, #1
 8007cec:	f7f9 fd32 	bl	8001754 <HAL_Delay>
      ms++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa10 	bl	800811c <USB_GetMode>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d005      	beq.n	8007d0e <USB_SetCurrentMode+0x84>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b31      	cmp	r3, #49	; 0x31
 8007d06:	d9f0      	bls.n	8007cea <USB_SetCurrentMode+0x60>
 8007d08:	e001      	b.n	8007d0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e005      	b.n	8007d1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b32      	cmp	r3, #50	; 0x32
 8007d12:	d101      	bne.n	8007d18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d24:	b084      	sub	sp, #16
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	e009      	b.n	8007d58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	3340      	adds	r3, #64	; 0x40
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	2200      	movs	r2, #0
 8007d50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3301      	adds	r3, #1
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b0e      	cmp	r3, #14
 8007d5c:	d9f2      	bls.n	8007d44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11c      	bne.n	8007d9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d72:	f043 0302 	orr.w	r3, r3, #2
 8007d76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e005      	b.n	8007daa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db0:	461a      	mov	r2, r3
 8007db2:	2300      	movs	r3, #0
 8007db4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	680b      	ldr	r3, [r1, #0]
 8007dc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10c      	bne.n	8007dea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f965 	bl	80080a8 <USB_SetDevSpeed>
 8007dde:	e008      	b.n	8007df2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007de0:	2101      	movs	r1, #1
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f960 	bl	80080a8 <USB_SetDevSpeed>
 8007de8:	e003      	b.n	8007df2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dea:	2103      	movs	r1, #3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f95b 	bl	80080a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007df2:	2110      	movs	r1, #16
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8f3 	bl	8007fe0 <USB_FlushTxFifo>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f91f 	bl	8008048 <USB_FlushRxFifo>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e26:	461a      	mov	r2, r3
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	461a      	mov	r2, r3
 8007e34:	2300      	movs	r3, #0
 8007e36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	e043      	b.n	8007ec6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e54:	d118      	bne.n	8007e88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e013      	b.n	8007e9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	e008      	b.n	8007e9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	461a      	mov	r2, r3
 8007e96:	2300      	movs	r3, #0
 8007e98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ebe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d3b7      	bcc.n	8007e3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	e043      	b.n	8007f5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eea:	d118      	bne.n	8007f1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	461a      	mov	r2, r3
 8007f00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	e013      	b.n	8007f30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	461a      	mov	r2, r3
 8007f16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	e008      	b.n	8007f30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3b7      	bcc.n	8007ed4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f043 0210 	orr.w	r2, r3, #16
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699a      	ldr	r2, [r3, #24]
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <USB_DevInit+0x2b4>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	f043 0208 	orr.w	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d105      	bne.n	8007fc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <USB_DevInit+0x2b8>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fd4:	b004      	add	sp, #16
 8007fd6:	4770      	bx	lr
 8007fd8:	803c3800 	.word	0x803c3800
 8007fdc:	40000004 	.word	0x40000004

08007fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4a13      	ldr	r2, [pc, #76]	; (8008044 <USB_FlushTxFifo+0x64>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d901      	bls.n	8008000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e01b      	b.n	8008038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	daf2      	bge.n	8007fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	019b      	lsls	r3, r3, #6
 8008010:	f043 0220 	orr.w	r2, r3, #32
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4a08      	ldr	r2, [pc, #32]	; (8008044 <USB_FlushTxFifo+0x64>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d901      	bls.n	800802a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e006      	b.n	8008038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b20      	cmp	r3, #32
 8008034:	d0f0      	beq.n	8008018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	00030d40 	.word	0x00030d40

08008048 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a11      	ldr	r2, [pc, #68]	; (80080a4 <USB_FlushRxFifo+0x5c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d901      	bls.n	8008066 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e018      	b.n	8008098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	daf2      	bge.n	8008054 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2210      	movs	r2, #16
 8008076:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <USB_FlushRxFifo+0x5c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d901      	bls.n	800808a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e006      	b.n	8008098 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b10      	cmp	r3, #16
 8008094:	d0f0      	beq.n	8008078 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	00030d40 	.word	0x00030d40

080080a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080c8:	4313      	orrs	r3, r2
 80080ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f003 0301 	and.w	r3, r3, #1
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4a13      	ldr	r2, [pc, #76]	; (800819c <USB_CoreReset+0x64>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e01b      	b.n	800818e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	daf2      	bge.n	8008144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f043 0201 	orr.w	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <USB_CoreReset+0x64>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d901      	bls.n	8008180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e006      	b.n	800818e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	d0f0      	beq.n	800816e <USB_CoreReset+0x36>

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	00030d40 	.word	0x00030d40

080081a0 <__libc_init_array>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4d0d      	ldr	r5, [pc, #52]	; (80081d8 <__libc_init_array+0x38>)
 80081a4:	4c0d      	ldr	r4, [pc, #52]	; (80081dc <__libc_init_array+0x3c>)
 80081a6:	1b64      	subs	r4, r4, r5
 80081a8:	10a4      	asrs	r4, r4, #2
 80081aa:	2600      	movs	r6, #0
 80081ac:	42a6      	cmp	r6, r4
 80081ae:	d109      	bne.n	80081c4 <__libc_init_array+0x24>
 80081b0:	4d0b      	ldr	r5, [pc, #44]	; (80081e0 <__libc_init_array+0x40>)
 80081b2:	4c0c      	ldr	r4, [pc, #48]	; (80081e4 <__libc_init_array+0x44>)
 80081b4:	f000 f820 	bl	80081f8 <_init>
 80081b8:	1b64      	subs	r4, r4, r5
 80081ba:	10a4      	asrs	r4, r4, #2
 80081bc:	2600      	movs	r6, #0
 80081be:	42a6      	cmp	r6, r4
 80081c0:	d105      	bne.n	80081ce <__libc_init_array+0x2e>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c8:	4798      	blx	r3
 80081ca:	3601      	adds	r6, #1
 80081cc:	e7ee      	b.n	80081ac <__libc_init_array+0xc>
 80081ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d2:	4798      	blx	r3
 80081d4:	3601      	adds	r6, #1
 80081d6:	e7f2      	b.n	80081be <__libc_init_array+0x1e>
 80081d8:	08008330 	.word	0x08008330
 80081dc:	08008330 	.word	0x08008330
 80081e0:	08008330 	.word	0x08008330
 80081e4:	08008334 	.word	0x08008334

080081e8 <memset>:
 80081e8:	4402      	add	r2, r0
 80081ea:	4603      	mov	r3, r0
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d100      	bne.n	80081f2 <memset+0xa>
 80081f0:	4770      	bx	lr
 80081f2:	f803 1b01 	strb.w	r1, [r3], #1
 80081f6:	e7f9      	b.n	80081ec <memset+0x4>

080081f8 <_init>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr

08008204 <_fini>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr
